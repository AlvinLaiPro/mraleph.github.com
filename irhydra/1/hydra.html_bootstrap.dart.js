// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.BoundClosure$i1 = [J, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$1: function(p0) {
    return this._target.call(this._self, this._receiver, p0);
  }
}];

$$.Bound_run__EventLoop = [H, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound_remove_CustomElement = [B, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound__onPause__BroadcastSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound__onResume__BroadcastSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound_addError__BroadcastStreamController = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 1
}];

$$.Bound__completeError__Future = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 1
}];

$$.Bound__onPause__ControllerSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound__onResume__ControllerSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound__onPause__BufferingStreamSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound__onResume__BufferingStreamSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound__onPause__ForwardingStreamSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound__onResume__ForwardingStreamSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$1 = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$1: function(p0) {
    return this._target.call(this._self, p0);
  }
}];

$$.Bound__handleDone__ForwardingStreamSubscription = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  }
}];

$$.BoundClosure$3 = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$3: function(p0, p1, p2) {
    return this._target.call(this._self, p0, p1, p2);
  }
}];

$$.Bound_close__StreamPool = [W, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_isEmpty_Insets = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_next_NeighborsIterator = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound_remove_NeighborsIterator = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_count_Rank = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound_bottom_Rectangle = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_isEmpty_Rectangle = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_right_Rectangle = [D, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_LinkedListNode = [L, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_Listener = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_Binding = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_ComponentItem = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_Template = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_PlaceholderTemplate = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_ConditionalTemplate = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound_remove_LoopTemplate = [V, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Bound__unobserve__ExpressionObserver = [T, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.Bound_rangeContentAsHtml_IRPane = [U, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$2$fullRow: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(id) {
    return this.call$2$fullRow(id, false);
  },
  "+call:1:0": 1,
  call$catchAll: function() {
    return {fullRow: false};
  }
}];

$$.Bound_remove_Node = [W, {"": "BoundClosure;_self,_target,_receiver,_liblib7$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.Closure$_processWorkerMessage = [H, {"": "Closure;call$2,$name"}];

$$.Closure$_throwFormatException = [H, {"": "Closure;call$1,$name"}];

$$.Closure$toStringWrapper = [H, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$invokeClosure = [H, {"": "Closure;call$5,$name"}];

$$.Closure$isAssignable = [H, {"": "Closure;call$2,$name"}];

$$.Closure$typeNameInChrome = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInSafari = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInOpera = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInFirefox = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInIE = [H, {"": "Closure;call$1,$name"}];

$$.Closure$constructorNameFallback = [H, {"": "Closure;call$1,$name"}];

$$.Closure$callDartFunctionWith1Arg = [H, {"": "Closure;call$2,$name"}];

$$.Closure$_matchString = [H, {"": "Closure;call$1,$name"}];

$$.Closure$_stringIdentity = [H, {"": "Closure;call$1,$name"}];

$$.Closure$main = [Y, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$_asyncRunCallback = [P, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$_nullDataHandler = [P, {"": "Closure;call$1,$name"}];

$$.Closure$_nullErrorHandler = [P, {"": "Closure;call$1,$name"}];

$$.Closure$_nullDoneHandler = [P, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$_rootHandleUncaughtError = [P, {"": "Closure;call$4,$name"}];

$$.Closure$_rootRun = [P, {"": "Closure;call$4,$name"}];

$$.Closure$_rootRunUnary = [P, {"": "Closure;call$5,$name"}];

$$.Closure$_rootRegisterCallback = [P, {"": "Closure;call$4,$name"}];

$$.Closure$_rootRegisterUnaryCallback = [P, {"": "Closure;call$4,$name"}];

$$.Closure$_rootScheduleMicrotask = [P, {"": "Closure;call$4,$name"}];

$$.Closure$_rootCreateTimer = [P, {"": "Closure;call$5,$name"}];

$$.Closure$_rootCreatePeriodicTimer = [P, {"": "Closure;call$5,$name"}];

$$.Closure$_rootFork = [P, {"": "Closure;call$5,$name"}];

$$.Closure$_defaultEquals = [P, {"": "Closure;call$2,$name"}];

$$.Closure$_defaultHashCode = [P, {"": "Closure;call$1,$name"}];

$$.Closure$compare = [P, {"": "Closure;call$2,$name"}];

$$.Closure$identical = [P, {"": "Closure;call$2,$name"}];

$$.Closure$identityHashCode = [P, {"": "Closure;call$1,$name"}];

$$.Closure$_standardAttributeValidator = [W, {"": "Closure;call$4,$name"}];

$$.Closure$_uriAttributeValidator = [W, {"": "Closure;call$4,$name"}];

$$.Closure$max = [P, {"": "Closure;call$2,$name"}];

$$.Closure$displayPhase = [U, {"": "Closure;call$2,$name"}];

$$.Closure$loadData = [U, {"": "Closure;call$1,$name"}];

$$.Closure$loadUrl = [U, {"": "Closure;call$1,$name"}];

$$.Closure$_serializeDataTree = [Q, {"": "Closure;call$1,$name"}];

$$.Closure$_serialize = [Q, {"": "Closure;call$1,$name"}];

$$.Closure$_deserialize = [Q, {"": "Closure;call$1,$name"}];

$$.Closure$_updateCurrentFilter = [G, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$stop = [R, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$_doNothing = [T, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$defaultObserveUnhandledError = [T, {"": "Closure;call$4,$name"}];

init.mangledNames = {$$dom_addEventListener$3: "$dom_addEventListener:3:0", $$dom_removeEventListener$3: "$dom_removeEventListener:3:0", $add: "+:1:0", $and: "&:1:0", $div: "/:1:0", $ge: ">=:1:0", $gt: ">:1:0", $index: "[]:1:0", $indexSet: "[]=:2:0", $le: "<=:1:0", $lt: "<:1:0", $mod: "%:1:0", $mul: "*:1:0", $negate: "unary-:0:0", $or: "|:1:0", $shl: "<<:1:0", $shr: ">>:1:0", $sub: "-:1:0", $tdiv: "~/:1:0", $xor: "^:1:0", _addError$1: "_addError:1:0", _addPending$1: "_addPending:1:0", _close$0: "_close:0:0", _complete$1: "_complete:1:0", _completeError$1: "_completeError:1:0", _expectsEvent$1: "_expectsEvent:1:0", _initCustomEvent$4: "_initCustomEvent:4:0", _liblib15$_callback$2: "_callback:2:0", _liblib5$_add$1: "_add:1:0", _onError$1: "_onError:1:0", _onValue$1: "_onValue:1:0", _publish$1: "_publish:1:0", _removeChild$1: "_removeChild:1:0", _removeListeners$0: "_removeListeners:0:0", _replaceChild$2: "_replaceChild:2:0", _setError$1: "_setError:1:0", _setRemoveAfterFiring$0: "_setRemoveAfterFiring:0:0", _setValue$1: "_setValue:1:0", _toggleEventId$0: "_toggleEventId:0:0", _whenCompleteAction$0: "_whenCompleteAction:0:0", abs$0: "abs:0:0", add$1: "add:1:0", add$2: "add:2:0", add$3$id: "add:3:0:id", add$3$klass: "add:3:0:klass", add$4$id$klass: "add:4:0:id:klass", addAll$1: "addAll:1:0", addClass$1: "addClass:1:0", addLeftNeighbor$2: "addLeftNeighbor:2:0", addPath$3: "addPath:3:0", addPoint$1: "addPoint:1:0", addRightNeighbor$2: "addRightNeighbor:2:0", adjustRank$2: "adjustRank:2:0", allMatches$1: "allMatches:1:0", allowsAttribute$3: "allowsAttribute:3:0", allowsElement$1: "allowsElement:1:0", allowsUri$1: "allowsUri:1:0", append$1: "append:1:0", appendHtml$1: "appendHtml:1:0", appendText$1: "appendText:1:0", apply$1: "apply:1:0", assignIndices$0: "assignIndices:0:0", bend$1: "bend:1:0", bind$3: "bind:3:0", bindCallback$2$runGuarded: "bindCallback:2:0:runGuarded", bindClass$3: "bindClass:3:0", bindUnaryCallback$2$runGuarded: "bindUnaryCallback:2:0:runGuarded", bottom$0: "bottom:0:0", call$0: "call:0:0", call$1: "call:1:0", call$1$backtrack: "call:1:0:backtrack", call$1$nstates: "call:1:0:nstates", call$2: "call:2:0", call$2$onError: "call:2:0:onError", call$2$phaseName: "call:2:0:phaseName", call$2$runGuarded: "call:2:0:runGuarded", call$3: "call:3:0", call$3$async: "call:3:0:async", call$3$id: "call:3:0:id", call$3$klass: "call:3:0:klass", call$3$onDone$onError: "call:3:0:onDone:onError", call$3$treeSanitizer$validator: "call:3:0:treeSanitizer:validator", call$4: "call:4:0", call$4$cancelOnError$onDone$onError: "call:4:0:cancelOnError:onDone:onError", call$4$id$klass: "call:4:0:id:klass", call$5: "call:5:0", callSync$1: "callSync:1:0", canRecognize$1: "canRecognize:1:0", cancel$0: "cancel:0:0", catchError$1: "catchError:1:0", ceil$0: "ceil:0:0", cleanup$0: "cleanup:0:0", clear$0: "clear:0:0", click$0: "click:0:0", clone$0: "clone:0:0", clone$1: "clone:1:0", codeOf$1: "codeOf:1:0", codeUnitAt$1: "codeUnitAt:1:0", compareAndNotify$0: "compareAndNotify:0:0", compareTo$1: "compareTo:1:0", component$1: "component:1:0", conditional$3: "conditional:3:0", contains$1: "contains:1:0", containsKey$1: "containsKey:1:0", containsPoint$1: "containsPoint:1:0", containsProper$1: "containsProper:1:0", contentBind$2: "contentBind:2:0", cosine$1: "cosine:1:0", count$0: "count:0:0", create$0: "create:0:0", createRange$1: "createRange:1:0", createShadowRoot$0: "createShadowRoot:0:0", createTimer$2: "createTimer:2:0", crossProduct$1: "crossProduct:1:0", data$1: "data:1:0", deserializeCloseToken$1: "deserializeCloseToken:1:0", deserializeIsolateSink$1: "deserializeIsolateSink:1:0", deserializeSendPort$1: "deserializeSendPort:1:0", displayPhase$2: "displayPhase:2:0", doubleValue$0: "doubleValue:0:0", edge$1: "edge:1:0", endsWith$1: "endsWith:1:0", eval$1: "eval:1:0", firstMatch$1: "firstMatch:1:0", forEach$1: "forEach:1:0", fullReset$0: "fullReset:0:0", generateShortestPath$1: "generateShortestPath:1:0", get$$$_observers: "$_observers", get$$short: "short", get$Spinner: "Spinner", get$_contents: "_contents", get$_duration: "_duration", get$_error: "_error", get$_errorTest: "_errorTest", get$_errorZone: "_errorZone", get$_eventState: "_eventState", get$_hasError: "_hasError", get$_innerHtml: "_innerHtml", get$_isChained: "_isChained", get$_isComplete: "_isComplete", get$_isFiring: "_isFiring", get$_key: "_key", get$_liblib1$_element: "_element", get$_liblib1$_next: "_next", get$_liblib1$_previous: "_previous", get$_liblib15$_callback: "_callback", get$_liblib15$_id: "_id", get$_liblib5$_next: "_next", get$_liblib5$_previous: "_previous", get$_liblib5$_value: "_value", get$_name: "_name", get$_namespaceUri: "_namespaceUri", get$_nextListener: "_nextListener", get$_onError: "_onError", get$_onValue: "_onValue", get$_removeAfterFiring: "_removeAfterFiring", get$_specification: "_specification", get$_value: "_value", get$_whenCompleteAction: "_whenCompleteAction", get$_zone: "_zone", get$activeTab: "activeTab", get$args: "args", get$attributes: "attributes", get$blocks: "blocks", get$bottom: "bottom", get$bottomLeft: "bottomLeft", get$bottomPadding: "bottomPadding", get$bottomRight: "bottomRight", get$cachedCosines: "cachedCosines", get$center: "center", get$changes: "changes", get$children: "children", get$className: "className", get$classes: "classes", get$client: "client", get$clientHeight: "clientHeight", get$code: "code", get$codeMode: "codeMode", get$comment: "comment", get$cost: "cost", get$count: "count", get$createTimer: "createTimer", get$cssText: "cssText", get$current: "current", get$cut: "cut", get$data: "data", get$delta: "delta", get$deopts: "deopts", get$detail: "detail", get$display: "display", get$document: "document", get$end: "end", get$epilogue: "epilogue", get$exclude: "exclude", get$excludedObstacles: "excludedObstacles", get$files: "files", get$first: "first", get$firstChild: "firstChild", get$firstTimestamp: "firstTimestamp", get$flag: "flag", get$from: "from", get$full: "full", get$fullName: "fullName", get$grownSegments: "grownSegments", get$gutter: "gutter", get$handleUncaughtError: "handleUncaughtError", get$height: "height", get$hir: "hir", get$host: "host", get$hostname: "hostname", get$href: "href", get$id: "id", get$inMilliseconds: "inMilliseconds", get$incoming: "incoming", get$index: "index", get$innerHtml: "innerHtml", get$ir: "ir", get$isDirty: "isDirty", get$isEmpty: "isEmpty", get$isFeedback: "isFeedback", get$isGetter: "isGetter", get$isInverted: "isInverted", get$isLazy: "isLazy", get$isMarked: "isMarked", get$isNotEmpty: "isNotEmpty", get$isPermanent: "isPermanent", get$isSetMember: "isSetMember", get$isSetter: "isSetter", get$isTight: "isTight", get$isolateStatics: "isolateStatics", get$iterator: "iterator", get$key: "key", get$keys: "keys", get$label: "label", get$last: "last", get$lastChild: "lastChild", get$lastOffset: "lastOffset", get$left: "left", get$leftCount: "leftCount", get$leftDirty: "leftDirty", get$leftFreedom: "leftFreedom", get$leftLinks: "leftLinks", get$leftNeighbors: "leftNeighbors", get$leftNonzero: "leftNonzero", get$length: "length", get$level: "level", get$lir: "lir", get$list: "list", get$loadProfile: "loadProfile", get$maxWidth: "maxWidth", get$memberName: "memberName", get$method: "method", get$millisecondsSinceEpoch: "millisecondsSinceEpoch", get$name: "name", get$namedArguments: "namedArguments", get$nearestObstacle: "nearestObstacle", get$nearestObstacleChecked: "nearestObstacleChecked", get$neighbors: "neighbors", get$newUrl: "newUrl", get$newValue: "newValue", get$next: "next", get$nextNode: "nextNode", get$node: "node", get$nodeType: "nodeType", get$nodes: "nodes", get$obs: "obs", get$offset: "offset", get$offsetIncoming: "offsetIncoming", get$offsetOutgoing: "offsetOutgoing", get$oldUrl: "oldUrl", get$oldValue: "oldValue", get$onChange: "onChange", get$onClick: "onClick", get$onKeyUp: "onKeyUp", get$onMouseOut: "onMouseOut", get$onMouseOver: "onMouseOver", get$onResize: "onResize", get$onScroll: "onScroll", get$op: "op", get$outgoing: "outgoing", get$padding: "padding", get$parent: "parent", get$parentNode: "parentNode", get$paths: "paths", get$phases: "phases", get$points: "points", get$port: "port", get$positionOnObstacle: "positionOnObstacle", get$positionalArguments: "positionalArguments", get$predecessors: "predecessors", get$previousNode: "previousNode", get$prologue: "prologue", get$protocol: "protocol", get$rangeContentAsHtml: "rangeContentAsHtml", get$rangeContentAsHtmlFull: "rangeContentAsHtmlFull", get$rank: "rank", get$raw: "raw", get$registerCallback: "registerCallback", get$registerUnaryCallback: "registerUnaryCallback", get$remove: "remove", get$reopts: "reopts", get$responseText: "responseText", get$right: "right", get$rightCount: "rightCount", get$rightDirty: "rightDirty", get$rightFreedom: "rightFreedom", get$rightLinks: "rightLinks", get$rightNeighbors: "rightNeighbors", get$rightNonzero: "rightNonzero", get$run: "run", get$runUnary: "runUnary", get$scheduleMicrotask: "scheduleMicrotask", get$scrollLeft: "scrollLeft", get$scrollTop: "scrollTop", get$segments: "segments", get$slack: "slack", get$sortValue: "sortValue", get$source: "source", get$sourceOffset: "sourceOffset", get$start: "start", get$style: "style", get$successors: "successors", get$supportedCodeModes: "supportedCodeModes", get$tagName: "tagName", get$target: "target", get$targetOffset: "targetOffset", get$text: "text", get$threshold: "threshold", get$ticks: "ticks", get$timestamp: "timestamp", get$to: "to", get$top: "top", get$topLeft: "topLeft", get$topPadding: "topPadding", get$topRight: "topRight", get$total: "total", get$totalCount: "totalCount", get$tree: "tree", get$type: "type", get$unweightedTotal: "unweightedTotal", get$uriPolicy: "uriPolicy", get$vNodes: "vNodes", get$value: "value", get$values: "values", get$visibleObstacles: "visibleObstacles", get$weight: "weight", get$weightedDivisor: "weightedDivisor", get$weightedTotal: "weightedTotal", get$width: "width", get$window: "window", get$workingData: "workingData", get$workingInts: "workingInts", get$x: "x", get$xtag: "xtag", get$y: "y", getBendPoints$0: "getBendPoints:0:0", getBoundingClientRect$0: "getBoundingClientRect:0:0", getDeformedRectangle$1: "getDeformedRectangle:1:0", getDistance$1: "getDistance:1:0", getEndPoint$0: "getEndPoint:0:0", getIndexForRank$1: "getIndexForRank:1:0", getLength$0: "getLength:0:0", getNamespacedAttributes$1: "getNamespacedAttributes:1:0", getPoints$0: "getPoints:0:0", getPosition$1: "getPosition:1:0", getPropertyValue$1: "getPropertyValue:1:0", getPull$0: "getPull:0:0", getRange$2: "getRange:2:0", getRightNeighbor$1: "getRightNeighbor:1:0", getSlope$0: "getSlope:0:0", getSourceIndex$1: "getSourceIndex:1:0", getStartPoint$0: "getStartPoint:0:0", getSubPath$1: "getSubPath:1:0", getTargetIndex$1: "getTargetIndex:1:0", getTransposed$0: "getTransposed:0:0", group$1: "group:1:0", grow$0: "grow:0:0", growVertices$0: "growVertices:0:0", handleUncaughtError$1: "handleUncaughtError:1:0", hasNext$0: "hasNext:0:0", height$0: "height:0:0", href$1: "href:1:0", inSameErrorZone$1: "inSameErrorZone:1:0", indexOf$1: "indexOf:1:0", indexOf$2: "indexOf:2:0", info$1: "info:1:0", initValues$0: "initValues:0:0", insert$0: "insert:0:0", insertAllBefore$2: "insertAllBefore:2:0", insertBefore$2: "insertBefore:2:0", insertRange$3: "insertRange:3:0", intersects$1: "intersects:1:0", intersects$4: "intersects:4:0", invert$0: "invert:0:0", invertPriorVertices$1: "invertPriorVertices:1:0", isCompletelyFlagged$0: "isCompletelyFlagged:0:0", iteratorNeighbors$0: "iteratorNeighbors:0:0", jQuery$1: "jQuery:1:0", join$1: "join:1:0", line$1: "line:1:0", listen$1: "listen:1:0", listen$2: "listen:2:0", listen$3$onDone$onError: "listen:3:0:onDone:onError", lookup$1: "lookup:1:0", lookup$2: "lookup:2:0", loop$3: "loop:3:0", map$1: "map:1:0", matchAsPrefix$2: "matchAsPrefix:2:0", matches$1: "matches:1:0", matchesWithAncestors$1: "matchesWithAncestors:1:0", modify$1: "modify:1:0", moveNext$0: "moveNext:0:0", next$0: "next:0:0", offset$0: "offset:0:0", opposite$1: "opposite:1:0", parse$1: "parse:1:0", perform$1: "perform:1:0", popover$1: "popover:1:0", process$0: "process:0:0", processEdge$1: "processEdge:1:0", query$1: "query:1:0", queryAll$1: "queryAll:1:0", readClasses$0: "readClasses:0:0", reconnectSubPaths$0: "reconnectSubPaths:0:0", refreshExcludedObstacles$1: "refreshExcludedObstacles:1:0", refreshValues$0: "refreshValues:0:0", registerCallback$1: "registerCallback:1:0", registerUnaryCallback$1: "registerUnaryCallback:1:0", remove$0: "remove:0:0", remove$1: "remove:1:0", removeAll$1: "removeAll:1:0", removeAt$1: "removeAt:1:0", removeLast$0: "removeLast:0:0", removePoint$1: "removePoint:1:0", replaceAll$2: "replaceAll:2:0", replaceAllMapped$2: "replaceAllMapped:2:0", replaceWith$1: "replaceWith:1:0", reset$0: "reset:0:0", resetPartial$0: "resetPartial:0:0", revert$0: "revert:0:0", right$0: "right:0:0", run$1: "run:1:0", runGuarded$1: "runGuarded:1:0", runUnaryGuarded$2: "runUnaryGuarded:2:0", scheduleMicrotask$1: "scheduleMicrotask:1:0", scrollIntoView$1: "scrollIntoView:1:0", scrollLeft$0: "scrollLeft:0:0", scrollTo$2: "scrollTo:2:0", scrollTop$0: "scrollTop:0:0", send$2: "send:2:0", set$$$_observers: "$_observers=", set$_eventState: "_eventState=", set$_innerHtml: "_innerHtml=", set$_isChained: "_isChained=", set$_liblib1$_next: "_next=", set$_liblib1$_previous: "_previous=", set$_liblib5$_next: "_next=", set$_liblib5$_previous: "_previous=", set$_nextListener: "_nextListener=", set$_value: "_value=", set$attributes: "attributes=", set$bottomPadding: "bottomPadding=", set$className: "className=", set$code: "code=", set$codeMode: "codeMode=", set$cost: "cost=", set$count: "count=", set$cssText: "cssText=", set$cut: "cut=", set$display: "display=", set$end: "end=", set$exclude: "exclude=", set$firstTimestamp: "firstTimestamp=", set$flag: "flag=", set$height: "height=", set$href: "href=", set$index: "index=", set$isDirty: "isDirty=", set$isFeedback: "isFeedback=", set$isInverted: "isInverted=", set$isMarked: "isMarked=", set$isPermanent: "isPermanent=", set$isSetMember: "isSetMember=", set$label: "label=", set$left: "left=", set$leftDirty: "leftDirty=", set$length: "length=", set$maxWidth: "maxWidth=", set$name: "name=", set$nearestObstacle: "nearestObstacle=", set$nearestObstacleChecked: "nearestObstacleChecked=", set$neighbors: "neighbors=", set$next: "next=", set$padding: "padding=", set$rank: "rank=", set$reopts: "reopts=", set$right: "right=", set$rightDirty: "rightDirty=", set$sortValue: "sortValue=", set$start: "start=", set$text: "text=", set$threshold: "threshold=", set$top: "top=", set$topPadding: "topPadding=", set$totalCount: "totalCount=", set$tree: "tree=", set$type: "type=", set$unweightedTotal: "unweightedTotal=", set$vNodes: "vNodes=", set$value: "value=", set$weightedTotal: "weightedTotal=", set$width: "width=", set$x: "x=", set$xtag: "xtag=", set$y: "y=", setDimensions$2: "setDimensions:2:0", setEndPoint$1: "setEndPoint:1:0", setFlags$1: "setFlags:1:0", setPoints$1: "setPoints:1:0", setProperty$3: "setProperty:3:0", setStartPoint$1: "setStartPoint:1:0", show$0: "show:0:0", shrink$0: "shrink:0:0", shrinkVertices$0: "shrinkVertices:0:0", sort$1: "sort:1:0", spin$1: "spin:1:0", split$1: "split:1:0", startsWith$1: "startsWith:1:0", stop$0: "stop:0:0", sublist$2: "sublist:2:0", substring$1: "substring:1:0", substring$2: "substring:2:0", switchTo$1: "switchTo:1:0", testAndSet$1: "testAndSet:1:0", then$1: "then:1:0", then$2$onError: "then:2:0:onError", tip$0: "tip:0:0", toDouble$0: "toDouble:0:0", toInt$0: "toInt:0:0", toJs$0: "toJs:0:0", toJson$0: "toJson:0:0", toList$0: "toList:0:0", toLowerCase$0: "toLowerCase:0:0", toSendPort$0: "toSendPort:0:0", toStringAsFixed$1: "toStringAsFixed:1:0", toUpperCase$0: "toUpperCase:0:0", tooltip$1: "tooltip:1:0", transpose$0: "transpose:0:0", trim$0: "trim:0:0", updateOffset$0: "updateOffset:0:0", visitCloseToken$1: "visitCloseToken:1:0", visitIsolateSink$1: "visitIsolateSink:1:0", visitList$1: "visitList:1:0", visitMap$1: "visitMap:1:0", visitPrimitive$1: "visitPrimitive:1:0", visitSendPort$1: "visitSendPort:1:0", visitSendPortSync$1: "visitSendPortSync:1:0", warning$1: "warning:1:0", where$1: "where:1:0", width$0: "width:0:0", write$1: "write:1:0", writeAll$2: "writeAll:2:0"};
(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code>-"},

"+JS_CONST": []}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

"+getInterceptor:1:0": 1,

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

"+makeDispatchRecord:4:0": 1,

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = H.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return J.getNativeInterceptor(object);
},

"+getNativeInterceptor:1:0": 1,

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  "+==:1:0": 1,
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  "+hashCode": 1,
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "+toString:0:0": 1,
  noSuchMethod$1: function(receiver, invocation) {
    throw H.wrapException(new P.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  "+noSuchMethod:1:0": 1
},

"+Interceptor": [],

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  "+toString:0:0": 1,
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  "+hashCode": 1,
  $isbool: true
},

"+JSBool": [7],

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  "+==:1:0": 1,
  toString$0: function(receiver) {
    return "null";
  },
  "+toString:0:0": 1,
  get$hashCode: function(receiver) {
    return 0;
  },
  "+hashCode": 1
},

"+JSNull": [8],

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  "+hashCode": 1
},

"+JavaScriptObject": [9],

PlainJavaScriptObject: {"": "JavaScriptObject;"},

"+PlainJavaScriptObject": [],

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

"+UnknownJavaScriptObject": [],

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("add"));
    receiver.push(value);
  },
  "+add:1:0": 1,
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  "+removeAt:1:0": 1,
  insert$2: function(receiver, index, value) {
    if (index < 0 || index > receiver.length)
      throw H.wrapException(new P.RangeError("value " + index));
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("insert"));
    receiver.splice(index, 0, value);
  },
  "+insert:2:0": 1,
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("removeLast"));
    if (receiver.length === 0)
      throw H.wrapException(new P.RangeError("value -1"));
    return receiver.pop();
  },
  "+removeLast:0:0": 1,
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, J.JSArray.prototype.remove$1, _receiver, "remove$1");
  },
  where$1: function(receiver, f) {
    var t1 = new H.WhereIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+where:1:0": 1,
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  "+addAll:1:0": 1,
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  "+clear:0:0": 1,
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  "+forEach:1:0": 1,
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  "+map:1:0": 1,
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = P.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  "+join:1:0": 1,
  "*join": [10],
  join$0: function($receiver) {
    return this.join$1($receiver, "");
  },
  "+join:0:0": 1,
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  "+elementAt:1:0": 1,
  sublist$2: function(receiver, start, end) {
    var t1;
    if (start == null)
      H.throwExpression(new P.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
    }
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw H.wrapException(new P.ArgumentError(end));
      if (end < start || end > receiver.length) {
        t1 = receiver.length;
        throw H.wrapException(new P.RangeError("value " + H.S(end) + " not in range " + H.S(start) + ".." + t1));
      }
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  getRange$2: function(receiver, start, end) {
    H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
    return H.SubListIterable$(receiver, start, end, null);
  },
  "+getRange:2:0": 1,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+first": 1,
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+last": 1,
  removeRange$2: function(receiver, start, end) {
    var receiverLength, t1;
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("removeRange"));
    receiverLength = receiver.length;
    t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, receiverLength) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + receiverLength));
    if (typeof start !== "number")
      throw H.iae(start);
    if (end < start || end > receiverLength)
      throw H.wrapException(new P.RangeError("value " + end + " not in range " + H.S(start) + ".." + receiverLength));
    H.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    this.set$length(receiver, receiverLength - (end - start));
  },
  "+removeRange:2:0": 1,
  sort$1: function(receiver, compare) {
    if (!!receiver.immutable$list)
      H.throwExpression(new P.UnsupportedError("sort"));
    H.IterableMixinWorkaround_sortList(receiver, compare);
  },
  "+sort:1:0": 1,
  "*sort": [0],
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  "+indexOf:2:0": 1,
  "*indexOf": [2],
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  "+indexOf:1:0": 1,
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], other))
        return true;
    return false;
  },
  "+contains:1:0": 1,
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 1,
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  "+toString:0:0": 1,
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  "+iterator": 1,
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  "+hashCode": 1,
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 1,
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(newLength)));
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  "+length=": 1,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(new P.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $isList: true,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

"+JSArray": [11, 12],

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [null];
  }
},

"+JSMutableArray": [13],

JSFixedArray: {"": "JSMutableArray;"},

"+JSFixedArray": [],

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

"+JSExtendableArray": [],

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  "+compareTo:1:0": 1,
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  "+isNegative": 1,
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  "+isNaN": 1,
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  "+remainder:1:0": 1,
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  "+abs:0:0": 1,
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw H.wrapException(new P.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw H.wrapException(new P.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  "+toInt:0:0": 1,
  ceil$0: function(receiver) {
    return this.toInt$0(Math.ceil(receiver));
  },
  "+ceil:0:0": 1,
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  "+roundToDouble:0:0": 1,
  toDouble$0: function(receiver) {
    return receiver;
  },
  "+toDouble:0:0": 1,
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw H.wrapException(new P.RangeError(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver))
      return "-" + result;
    return result;
  },
  "+toStringAsFixed:1:0": 1,
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  "+toString:0:0": 1,
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  "+hashCode": 1,
  $negate: function(receiver) {
    return -receiver;
  },
  "+unary-:0:0": 1,
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  "++:1:0": 1,
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  "+-:1:0": 1,
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver / other;
  },
  "+/:1:0": 1,
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  "+*:1:0": 1,
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  "+%:1:0": 1,
  $tdiv: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  "+~/:1:0": 1,
  $shl: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  "+<<:1:0": 1,
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  "+>>:1:0": 1,
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver & other) >>> 0;
  },
  "+&:1:0": 1,
  $or: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver | other) >>> 0;
  },
  "+|:1:0": 1,
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver ^ other) >>> 0;
  },
  "+^:1:0": 1,
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver < other;
  },
  "+<:1:0": 1,
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  "+>:1:0": 1,
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  "+<=:1:0": 1,
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver >= other;
  },
  "+>=:1:0": 1,
  $isnum: true
},

"+JSNumber": [14],

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

"+JSInt": [15, 16],

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

"+JSDouble": [15],

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    if (index >= receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver.charCodeAt(index);
  },
  "+codeUnitAt:1:0": 1,
  allMatches$1: function(receiver, str) {
    return H.allMatchesInStringUnchecked(receiver, str);
  },
  "+allMatches:1:0": 1,
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        H.throwExpression(new P.RangeError("value " + H.S(t3)));
      if (t3 >= t2)
        H.throwExpression(new P.RangeError("value " + H.S(t3)));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        H.throwExpression(new P.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  "+matchAsPrefix:2:0": 1,
  "*matchAsPrefix": [2],
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  "++:1:0": 1,
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  "+endsWith:1:0": 1,
  replaceAll$2: function(receiver, from, to) {
    return H.stringReplaceAllUnchecked(receiver, from, to);
  },
  "+replaceAll:2:0": 1,
  replaceAllMapped$2: function(receiver, from, convert) {
    return H.stringReplaceAllFuncUnchecked(receiver, from, convert, null);
  },
  "+replaceAllMapped:2:0": 1,
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  "+split:1:0": 1,
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(new P.RangeError("value " + index + " not in range 0.." + receiver.length));
    if (typeof pattern === "string") {
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern == receiver.substring(index, endIndex);
    }
    return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
  },
  "+startsWith:2:0": 1,
  "*startsWith": [2],
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  "+startsWith:1:0": 1,
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (typeof startIndex !== "number")
      H.throwExpression(new P.ArgumentError(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      H.throwExpression(new P.ArgumentError(endIndex));
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(startIndex)));
    if (t1.$gt(startIndex, endIndex) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(startIndex)));
    if (J.$gt$n(endIndex, receiver.length) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  "+substring:2:0": 1,
  "*substring": [0],
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  "+substring:1:0": 1,
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  "+toLowerCase:0:0": 1,
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  "+toUpperCase:0:0": 1,
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(new P.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(new P.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(new P.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  "+trim:0:0": 1,
  indexOf$2: function(receiver, pattern, start) {
    var t1, match, t2, i;
    if (pattern == null)
      H.throwExpression(new P.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + receiver.length));
    if (typeof pattern === "string")
      return receiver.indexOf(pattern, start);
    t1 = J.getInterceptor$s(pattern);
    if (typeof pattern === "object" && pattern !== null && !!t1.$isJSSyntaxRegExp) {
      match = pattern._execGlobal$2(receiver, start);
      return match == null ? -1 : match._match.index;
    }
    for (t2 = receiver.length, i = start; i <= t2; ++i)
      if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  "+indexOf:2:0": 1,
  "*indexOf": [2],
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  "+indexOf:1:0": 1,
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2;
    start = receiver.length;
    t1 = pattern.length;
    if (start == null)
      throw start.$add();
    t2 = receiver.length;
    if (start + t1 > t2)
      start = t2 - t1;
    return receiver.lastIndexOf(pattern, start);
  },
  "+lastIndexOf:2:0": 1,
  "*lastIndexOf": [0],
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  "+lastIndexOf:1:0": 1,
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      H.throwExpression(new P.ArgumentError(null));
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(new P.RangeError("value " + startIndex + " not in range 0.." + receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  "+contains:2:0": 1,
  "*contains": [2],
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  "+contains:1:0": 1,
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 1,
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  "+compareTo:1:0": 1,
  toString$0: function(receiver) {
    return receiver;
  },
  "+toString:0:0": 1,
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  "+hashCode": 1,
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 1,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver[index];
  },
  "+[]:1:0": 1,
  $isString: true,
  $isPattern: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
},

"+_isWhitespace:1:0": 1}

},

"+JSString": [11, 17]}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

"+_callInIsolate:2:0": 1,

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

"+startRootIsolate:1:0": 1,

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

"+computeThisScript:0:0": 1,

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(new P.UnsupportedError("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

"+computeThisScriptD8:0:0": 1,

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        H.Primitives_printString(J.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

"+_processWorkerMessage:2:0": 1,

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(new P._ExceptionImplementation(trace));
    }

},

"+_log:1:0": 1,

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = P._Isolate_port();
  t1.toSendPort$0;
  J.send$2$x(replyTo, "spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id));
  topLevel.call$0();
},

"+_startIsolate:2:0": 1,

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

"+_spawnWorker:3:0": 1,

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

"+_waitForPendingPorts:2:0": 1,

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer0(0, new H._MessageTraverserVisitedMap0());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap0());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

"+_serializeMessage:1:0": 1,

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer0(null).deserialize$1(message);
  else
    return message;
},

"+_deserializeMessage:1:0": 1,

_MessageTraverser_isPrimitive0: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

"+isPrimitive:1:0": 1,

_Deserializer_isPrimitive0: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

"+isPrimitive:1:0": 1,

CloseToken: {"": "Object;", $isCloseToken: true},

"+CloseToken": [],

JsIsolateSink: {"": "EventSink;_isClosed-,_liblib15$_port<-",
  add$1: function(_, message) {
    var t1 = this._liblib15$_port;
    t1.send$1(t1, message);
  },
  "+add:1:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isIsolateSink && J.$eq(this._liblib15$_port, other.get$_liblib15$_port());
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return J.$add$ns(J.get$hashCode$(this._liblib15$_port), 499);
  },
  "+hashCode": 1,
  $isJsIsolateSink: true,
  $isIsolateSink: true
},

"+JsIsolateSink": [18],

_Manager: {"": "Object;nextIsolateId-,currentManagerId-,nextManagerId-,currentContext-,rootContext-,topEventLoop-,fromCommandLine-,isWorker-,supportsWorkers-,isolates-,mainManager-,managers-,entry-",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  "+_nativeDetectEnvironment:0:0": 1,
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  "+_nativeInitWorkerMessageHandler:0:0": 1,
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

"+new _Manager:1:0": 1}

},

"+_Manager": [],

_IsolateContext: {"": "Object;id>-,ports-,isolateStatics<-",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  "+eval:1:0": 1,
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  "+lookup:1:0": 1,
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(new P._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  "+register:2:0": 1,
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib1$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  "+unregister:1:0": 1,
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
},

"+new _IsolateContext:0:0": 1}

},

"+_IsolateContext": [19],

_EventLoop: {"": "Object;events-,activeTimerCount-",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._liblib1$_head === t1._liblib1$_tail)
      return;
    return t1.removeFirst$0();
  },
  "+dequeue:0:0": 1,
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib1$_length === 0)
      throw H.wrapException(new P._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  "+checkOpenReceivePortsFromCommandLine:0:0": 1,
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._liblib1$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  "+runIteration:0:0": 1,
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  "+_runHelper:0:0": 1,
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  },
  "+run:0:0": 1,
  get$run: function() {
    return new H.Bound_run__EventLoop(this, H._EventLoop.prototype.run$0, null, "run$0");
  }
},

"+_EventLoop": [],

_EventLoop__runHelper_next: {"": "Closure;this_0-",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_EventLoop__runHelper_next": [],

_IsolateEvent: {"": "Object;isolate-,fn-,message-",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  "+process:0:0": 1,
  $is_IsolateEvent: true
},

"+_IsolateEvent": [],

_MainManagerStub: {"": "Object;"},

"+_MainManagerStub": [],

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0-,replyTo_1-",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+IsolateNatives__processWorkerMessage_closure": [],

_BaseSendPort: {"": "Object;",
  _checkReplyTo$1: function(replyTo) {
    var t1;
    if (replyTo != null) {
      t1 = J.getInterceptor(replyTo);
      t1 = (typeof replyTo !== "object" || replyTo === null || !t1.$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !t1.$is_WorkerSendPort) && true;
    } else
      t1 = false;
    if (t1)
      throw H.wrapException(new P._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  "+_checkReplyTo:1:0": 1,
  call$1: function(message) {
    var t1, completer, port;
    t1 = null;
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    port = H.ReceivePortImpl$();
    this.send$2(this, message, new H._NativeJsSendPort(port, $globalState.currentContext.id));
    port._liblib15$_callback = new H._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  "+call:1:0": 1,
  $isFunction: true,
  $isSendPort: true
},

"+_BaseSendPort": [20],

_BaseSendPort_call_closure: {"": "Closure;completer_0-,port_1-",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    t1 = this.port_1;
    t1._liblib15$_callback = null;
    $globalState.currentContext.unregister$1(t1._liblib15$_id);
    t1 = J.getInterceptor(value);
    t2 = this.completer_0;
    if (typeof value === "object" && value !== null && !!t1.$isException) {
      t1 = t2.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(value, null);
    } else {
      t1 = t2.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncComplete$1(value);
    }
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_BaseSendPort_call_closure": [],

_NativeJsSendPort: {"": "_BaseSendPort;_liblib15$_receivePort-,_liblib15$_isolateId-",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts([message, replyTo], new H._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  "+send:2:0": 1,
  "*send": [0],
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  "+send:1:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._liblib15$_receivePort, other._liblib15$_receivePort);
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return this._liblib15$_receivePort.get$_liblib15$_id();
  },
  "+hashCode": 1,
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

"+_NativeJsSendPort": [20],

_NativeJsSendPort_send_closure: {"": "Closure;this_1-,message_2-,replyTo_3-",
  call$0: function() {
    var t1, t2, t3, t4, t5, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    t5 = t2._liblib15$_isolateId;
    isolate = t4.$index(t4, t5);
    if (isolate == null)
      return;
    if (t2._liblib15$_receivePort.get$_liblib15$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t5;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = H._serializeMessage(t1.msg_0);
      t1.reply_1 = H._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t3.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_NativeJsSendPort_send_closure": [],

_NativeJsSendPort_send__closure: {"": "Closure;box_0-,this_4-,shouldSerialize_5-",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4._liblib15$_receivePort;
    if (t1.get$_liblib15$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
        t2.reply_1 = H._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1._liblib15$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_NativeJsSendPort_send__closure": [],

_WorkerSendPort: {"": "_BaseSendPort;_workerId-,_receivePortId-,_liblib15$_isolateId-",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts([message, replyTo], new H._WorkerSendPort_send_closure(this, message, replyTo));
  },
  "+send:2:0": 1,
  "*send": [0],
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  "+send:1:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort)
      t1 = J.$eq(this._workerId, other._workerId) && J.$eq(this._liblib15$_isolateId, other._liblib15$_isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return J.$xor$n(J.$xor$n(J.$shl$n(this._workerId, 16), J.$shl$n(this._liblib15$_isolateId, 8)), this._receivePortId);
  },
  "+hashCode": 1,
  $is_WorkerSendPort: true,
  $isSendPort: true
},

"+_WorkerSendPort": [20],

_WorkerSendPort_send_closure: {"": "Closure;this_0-,message_1-,replyTo_2-",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_WorkerSendPort_send_closure": [],

ReceivePortImpl: {"": "Object;_liblib15$_id<-,_liblib15$_callback<-",
  _liblib15$_callback$2: function(arg0, arg1) {
    return this._liblib15$_callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return new H._NativeJsSendPort(this, $globalState.currentContext.id);
  },
  "+toSendPort:0:0": 1,
  ReceivePortImpl$0: function() {
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._liblib15$_id, this);
  },
  $isReceivePort: true,
  static: {
"": "ReceivePortImpl__nextFreeId-",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
},

"+new ReceivePortImpl:0:0": 1}

},

"+ReceivePortImpl": [21],

_waitForPendingPorts_closure: {"": "Closure;callback_0-",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_waitForPendingPorts_closure": [],

_PendingSendPortFinder: {"": "_MessageTraverser;ports-,_visited-",
  visitPrimitive$1: function(x) {
  },
  "+visitPrimitive:1:0": 1,
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, new H._PendingSendPortFinder_visitList_closure(this));
  },
  "+visitList:1:0": 1,
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), new H._PendingSendPortFinder_visitMap_closure(this));
  },
  "+visitMap:1:0": 1,
  visitSendPort$1: function(port) {
  },
  "+visitSendPort:1:0": 1,
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._liblib15$_port);
  },
  "+visitIsolateSink:1:0": 1,
  visitCloseToken$1: function(token) {
  },
  "+visitCloseToken:1:0": 1,
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap0());
  t1._PendingSendPortFinder$0();
  return t1;
},

"+new _PendingSendPortFinder:0:0": 1}

},

"+_PendingSendPortFinder": [],

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0-",
  call$1: function(e) {
    return this.this_0._liblib15$_dispatch$1(e);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_PendingSendPortFinder_visitList_closure": [],

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0-",
  call$1: function(e) {
    return this.this_0._liblib15$_dispatch$1(e);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_PendingSendPortFinder_visitMap_closure": [],

_JsSerializer0: {"": "_Serializer;_liblib15$_nextFreeRefId-,_visited-",
  visitSendPort$1: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._liblib15$_isolateId, x._liblib15$_receivePort.get$_liblib15$_id()];
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._liblib15$_isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  },
  "+visitSendPort:1:0": 1,
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._liblib15$_port), isClosed];
  },
  "+visitIsolateSink:1:0": 1,
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  "+visitCloseToken:1:0": 1
},

"+_JsSerializer": [],

_JsCopier: {"": "_Copier;_visited-",
  visitSendPort$1: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._liblib15$_receivePort, x._liblib15$_isolateId);
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._liblib15$_isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  },
  "+visitSendPort:1:0": 1,
  visitIsolateSink$1: function(sink) {
    var result = new H.JsIsolateSink(false, this.visitSendPort$1(sink._liblib15$_port));
    result._isClosed = sink._isClosed;
    return result;
  },
  "+visitIsolateSink:1:0": 1,
  visitCloseToken$1: function(token) {
    return token;
  },
  "+visitCloseToken:1:0": 1
},

"+_JsCopier": [],

_JsDeserializer0: {"": "_Deserializer;_liblib15$_deserialized-",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  "+deserializeSendPort:1:0": 1,
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = J.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new H.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  "+deserializeIsolateSink:1:0": 1,
  deserializeCloseToken$1: function(list) {
    return C.C_CloseToken;
  },
  "+deserializeCloseToken:1:0": 1
},

"+_JsDeserializer": [],

_JsVisitedMap: {"": "Object;tagged-",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  "+[]:1:0": 1,
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  "+[]=:2:0": 1,
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  "+reset:0:0": 1,
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  },
  "+cleanup:0:0": 1
},

"+_JsVisitedMap": [22],

_MessageTraverserVisitedMap0: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  "+[]:1:0": 1,
  $indexSet: function(_, object, info) {
  },
  "+[]=:2:0": 1,
  reset$0: function(_) {
  },
  "+reset:0:0": 1,
  cleanup$0: function() {
  },
  "+cleanup:0:0": 1
},

"+_MessageTraverserVisitedMap": [],

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive0(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._liblib15$_dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  "+traverse:1:0": 1,
  _liblib15$_dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  "+_dispatch:1:0": 1,
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  },
  "+visitObject:1:0": 1
},

"+_MessageTraverser": [],

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  "+visitPrimitive:1:0": 1,
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = P.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t2 = this._liblib15$_dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  "+visitList:1:0": 1,
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; i < len; ++i) {
      t3 = this._liblib15$_dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  },
  "+visitMap:1:0": 1
},

"+_Copier": [],

_Copier_visitMap_closure: {"": "Closure;box_0-,this_1-",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._liblib15$_dispatch$1(key), t1._liblib15$_dispatch$1(val));
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_Copier_visitMap_closure": [],

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  "+visitPrimitive:1:0": 1,
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._liblib15$_nextFreeRefId;
    this._liblib15$_nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._liblib15$_serializeList$1(list)];
  },
  "+visitList:1:0": 1,
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._liblib15$_nextFreeRefId;
    this._liblib15$_nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._liblib15$_serializeList$1(J.toList$0$ax(map.get$keys())), this._liblib15$_serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  "+visitMap:1:0": 1,
  _liblib15$_serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this._liblib15$_serializeList$1$bailout(1, list);
    len = list.length;
    result = P.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t2 = this._liblib15$_dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  },
  "+_serializeList:1:0": 1,
  _liblib15$_serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._liblib15$_dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

"+_Serializer": [],

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive0(x))
      return x;
    this._liblib15$_deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._liblib15$_deserializeHelper$1(x);
  },
  "+deserialize:1:0": 1,
  _liblib15$_deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._liblib15$_deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._liblib15$_deserializeList$1(x);
      case "map":
        return this._liblib15$_deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  "+_deserializeHelper:1:0": 1,
  _liblib15$_deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !H.isJsIndexable(dartList, dartList[init.dispatchPropertyName]))
      return this._liblib15$_deserializeList$1$bailout(1, dartList, id);
    t1 = this._liblib15$_deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw H.ioore(dartList, i);
      t1 = this._liblib15$_deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw H.ioore(dartList, i);
      dartList[i] = t1;
    }
    return dartList;
  },
  "+_deserializeList:1:0": 1,
  _liblib15$_deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._liblib15$_deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._liblib15$_deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _liblib15$_deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._liblib15$_deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !H.isJsIndexable(keys, keys[init.dispatchPropertyName])))
      return this._liblib15$_deserializeMap$1$bailout(1, result, keys, t1, x);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !H.isJsIndexable(values, values[init.dispatchPropertyName])))
      return this._liblib15$_deserializeMap$1$bailout(2, result, keys, 0, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw H.ioore(keys, i);
      key = this._liblib15$_deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw H.ioore(values, i);
      result.$indexSet(result, key, this._liblib15$_deserializeHelper$1(values[i]));
    }
    return result;
  },
  "+_deserializeMap:1:0": 1,
  _liblib15$_deserializeMap$1$bailout: function(state0, result, keys, t1, x, values) {
    switch (state0) {
      case 0:
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t1 = J.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._liblib15$_deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = J.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw H.iae(len);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._liblib15$_deserializeHelper$1(t1.$index(keys, i)), this._liblib15$_deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  },
  "+deserializeObject:1:0": 1
},

"+_Deserializer": [],

TimerImpl: {"": "Object;_once-,_inEventLoop-,_handle-",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
  },
  "+cancel:0:0": 1,
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (J.$eq(milliseconds, 0))
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
  },
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(new P.UnsupportedError("Periodic timer."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

"+new TimerImpl:2:0": 1,

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
},

"+new TimerImpl$periodic:2:0": 1}

},

"+TimerImpl": [23],

TimerImpl_internalCallback: {"": "Closure;this_0-,callback_1-",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TimerImpl_internalCallback": [],

TimerImpl_internalCallback0: {"": "Closure;this_2-,callback_3-",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TimerImpl_internalCallback": [],

TimerImpl$periodic_closure: {"": "Closure;this_0-,callback_1-",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TimerImpl$periodic_closure": []}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

"+isJsIndexable:2:0": 1,

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(new P.ArgumentError(value));
  return res;
},

"+S:1:0": 1,

createInvocationMirror: function($name, internalName, kind, $arguments, argumentNames) {
  return new H.JSInvocationMirror($name, internalName, kind, $arguments, argumentNames, null);
},

"+createInvocationMirror:5:0": 1,

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

"+initializeStatics:1:0": 1,

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

"+objectHashCode:1:0": 1,

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

"+printString:1:0": 1,

Primitives__throwFormatException: function(string) {
  throw H.wrapException(new P.FormatException(string));
},

"+_throwFormatException:1:0": 1,

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i, t2;
  handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (typeof radix !== "number" || Math.floor(radix) !== radix)
      throw H.wrapException(new P.ArgumentError("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw H.wrapException(new P.RangeError("Radix " + radix + " not in range 2..36"));
    if (match != null) {
      if (radix === 10) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] != null;
      } else
        t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (radix >= 10) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        if (1 >= match.length)
          throw H.ioore(match, 1);
        digitsPart = match[1];
        t1 = J.getInterceptor$asx(digitsPart);
        i = 0;
        while (true) {
          t2 = t1.get$length(digitsPart);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          J.$or$n(t1.codeUnitAt$1(digitsPart, 0), 32);
          if (J.$gt$n(t1.codeUnitAt$1(digitsPart, i), maxCharCode) === true)
            return handleError.call$1(source);
          ++i;
        }
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
},

"+parseInt:3:0": 1,

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed, t1;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  handleError = H.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = J.trim$0$s(source);
    t1 = J.getInterceptor(trimmed);
    if (t1.$eq(trimmed, "NaN") || t1.$eq(trimmed, "+NaN") || t1.$eq(trimmed, "-NaN"))
      return result;
    return handleError.call$1(source);
  }
  return result;
},

"+parseDouble:2:0": 1,

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = H.constructorNameFallback(J.getInterceptor(object));
  if (J.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0);
},

"+objectTypeName:1:0": 1,

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

"+objectToString:1:0": 1,

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

"+newFixedList:1:0": 1,

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

"+_fromCharCodeApply:1:0": 1,

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(new P.ArgumentError(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

"+stringFromCodePoints:1:0": 1,

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i < 0)
      throw H.wrapException(new P.ArgumentError(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

"+stringFromCharCodes:1:0": 1,

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

"+lazyAsJsDate:1:0": 1,

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

"+getYear:1:0": 1,

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

"+getMonth:1:0": 1,

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

"+getDay:1:0": 1,

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

"+getHours:1:0": 1,

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

"+getMinutes:1:0": 1,

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

"+getSeconds:1:0": 1,

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

"+getMilliseconds:1:0": 1,

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

"+getProperty:2:0": 1,

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

"+setProperty:3:0": 1,

Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
  var t1, buffer, $arguments, allNamedArguments, listOfNamedArguments, t2, selectorName, jsFunction;
  t1 = {};
  t1.argumentCount_0 = 0;
  buffer = P.StringBuffer$("");
  $arguments = [];
  t1.argumentCount_0 = t1.argumentCount_0 + positionalArguments.length;
  C.JSArray_methods.addAll$1($arguments, positionalArguments);
  if ("call$catchAll" in $function) {
    allNamedArguments = $function.call$catchAll();
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure(allNamedArguments));
    listOfNamedArguments = Object.getOwnPropertyNames(allNamedArguments);
    t2 = J.getInterceptor$asx(listOfNamedArguments);
    t1.argumentCount_0 = t1.argumentCount_0 + t2.get$length(listOfNamedArguments);
    t2.forEach$1(listOfNamedArguments, new H.Primitives_applyFunction_closure0(buffer, $arguments, allNamedArguments));
  } else if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
    namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure1(t1, buffer, $arguments));
  selectorName = "call$" + t1.argumentCount_0 + H.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null) {
    if (namedArguments == null)
      t1 = null;
    else {
      t1 = namedArguments.get$keys();
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }
    return $function.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, selectorName, 0, $arguments, t1, null));
  }
  return jsFunction.apply($function, $arguments);
},

"+applyFunction:3:0": 1,

iae: function(argument) {
  throw H.wrapException(new P.ArgumentError(argument));
},

"+iae:1:0": 1,

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(new P.RangeError("value " + H.S(index)));
},

"+ioore:2:0": 1,

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

"+wrapException:1:0": 1,

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

"+toStringWrapper:0:0": 1,

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

"+throwExpression:1:0": 1,

makeLiteralListConst: function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
},

"+makeLiteralListConst:1:0": 1,

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

"+unwrapException:1:0": 1,

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

"+objectHashCode:1:0": 1,

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

"+fillLiteralMap:2:0": 1,

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw H.wrapException(new P._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

"+invokeClosure:5:0": 1,

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, H.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

"+convertDartClosureToJS:2:0": 1,

propertyTypeCastError: function(value, property) {
  var actualType, t1, expectedType;
  actualType = H.Primitives_objectTypeName(value);
  t1 = J.getInterceptor$asx(property);
  expectedType = t1.substring$2(property, 3, t1.get$length(property));
  throw H.wrapException(new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType)));
},

"+propertyTypeCastError:2:0": 1,

propertyTypeCast: function(value, property) {
  if (value == null || !!value[property])
    return value;
  H.propertyTypeCastError(value, property);
},

"+propertyTypeCast:2:0": 1,

listSuperNativeTypeCast: function(value, property) {
  var t1 = J.getInterceptor(value);
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!t1.$isList) || value == null)
    return value;
  if (J.getInterceptor(value)[property])
    return value;
  H.propertyTypeCastError(value, property);
},

"+listSuperNativeTypeCast:2:0": 1,

throwCyclicInit: function(staticName) {
  throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
},

"+throwCyclicInit:1:0": 1,

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

"+setRuntimeTypeInfo:2:0": 1,

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

"+getRuntimeTypeInfo:1:0": 1,

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

"+getRuntimeTypeArguments:2:0": 1,

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

"+getRuntimeTypeArgument:3:0": 1,

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + H.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

"+runtimeTypeToString:1:0": 1,

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

"+joinArguments:2:0": 1,

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

"+substitute:2:0": 1,

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = H.getRuntimeTypeInfo(object);
  interceptor = J.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
},

"+checkSubtype:4:0": 1,

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

"+areSubtypes:2:0": 1,

isSupertypeOfNull: function(type) {
  return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null";
},

"+isSupertypeOfNull:1:0": 1,

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if (o == null)
    return H.isSupertypeOfNull(t);
  if (t == null)
    return true;
  rti = H.getRuntimeTypeInfo(o);
  o = J.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return H.isSubtype(type, t);
},

"+checkSubtypeOfRuntimeType:2:0": 1,

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.runtimeTypeToString(typeOfT) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.runtimeTypeToString(typeOfT)] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

"+isSubtype:2:0": 1,

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

"+isAssignable:2:0": 1,

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

"+areAssignable:3:0": 1,

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

"+areAssignableMaps:2:0": 1,

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

"+isFunctionSubtype:2:0": 1,

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

"+invokeOn:3:0": 1,

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

"+typeNameInChrome:1:0": 1,

typeNameInSafari: function(obj) {
  return H.constructorNameFallback(obj);
},

"+typeNameInSafari:1:0": 1,

typeNameInOpera: function(obj) {
  return H.constructorNameFallback(obj);
},

"+typeNameInOpera:1:0": 1,

typeNameInFirefox: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

"+typeNameInFirefox:1:0": 1,

typeNameInIE: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

"+typeNameInIE:1:0": 1,

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

"+constructorNameFallback:1:0": 1,

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

"+alternateTag:2:0": 1,

getFunctionForTypeNameOf: function() {
  var getTagFunction = H.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return H.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

"+getFunctionForTypeNameOf:0:0": 1,

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return H.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return H.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return H.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return H.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return H.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return H.typeNameInSafari$closure;
  else
    return H.constructorNameFallback$closure;
},

"+getBaseFunctionForTypeNameOf:0:0": 1,

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new H.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})(H.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

"+applyExperimentalFixup:2:0": 1,

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

"+callDartFunctionWith1Arg:2:0": 1,

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

"+toStringForNativeObject:1:0": 1,

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

"+hashCodeForNativeObject:1:0": 1,

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

"+defineProperty:3:0": 1,

defineNativeMethods: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, true);
},

"+defineNativeMethods:2:0": 1,

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

"+defineNativeMethodsNonleaf:2:0": 1,

defineNativeMethodsExtended: function(tags, interceptorClass, subclassInterceptorClasses) {
  var classes, t1, i;
  if ($.interceptorToTag == null)
    $.interceptorToTag = [];
  classes = subclassInterceptorClasses;
  for (t1 = classes.length, i = 0; i < t1; ++i) {
    $.interceptorToTag.push(classes[i]);
    $.interceptorToTag.push(tags);
  }
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

"+defineNativeMethodsExtended:3:0": 1,

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

"+defineNativeMethodsCommon:3:0": 1,

defineNativeMethodsFinish: function() {
},

"+defineNativeMethodsFinish:0:0": 1,

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

"+lookupInterceptor:2:0": 1,

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = H.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = H.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = H.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return H.makeLeafDispatchRecord(interceptor);
  else
    return J.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

"+lookupDispatchRecord:1:0": 1,

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

"+makeLeafDispatchRecord:1:0": 1,

regExpGetGlobalNative: function(regexp) {
  var nativeRegexp = regexp.get$_nativeGlobalVersion();
  nativeRegexp.lastIndex = 0;
  return nativeRegexp;
},

"+regExpGetGlobalNative:1:0": 1,

allMatchesInStringUnchecked: function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = P.List_List(null, P.Match);
  H.setRuntimeTypeInfo(result, [P.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push(new H.StringMatch(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
},

"+allMatchesInStringUnchecked:2:0": 1,

stringContainsUnchecked: function(receiver, other, startIndex) {
  var t1;
  if (typeof other === "string")
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else {
    t1 = J.getInterceptor$s(other);
    if (typeof other === "object" && other !== null && !!t1.$isJSSyntaxRegExp) {
      t1 = C.JSString_methods.substring$1(receiver, startIndex);
      return other._nativeRegExp.test(t1);
    } else
      return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
  }
},

"+stringContainsUnchecked:3:0": 1,

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          result._contents = result._contents + t1;
          result._contents = result._contents + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  else {
    t1 = J.getInterceptor(from);
    if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp)
      return receiver.replace(H.regExpGetGlobalNative(from), to.replace("$", "$$$$"));
    else {
      if (from == null)
        H.throwExpression(new P.ArgumentError(null));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  }
},

"+stringReplaceAllUnchecked:3:0": 1,

_matchString: function(match) {
  return J.$index$asx(match, 0);
},

"+_matchString:1:0": 1,

_stringIdentity: function(string) {
  return string;
},

"+_stringIdentity:1:0": 1,

stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
  var t1, buffer, startIndex, match, t2, str, t3;
  t1 = J.getInterceptor(pattern);
  if (typeof pattern !== "string" && (typeof pattern !== "object" || pattern === null || !t1.$isPattern))
    throw H.wrapException(new P.ArgumentError(H.S(pattern) + " is not a Pattern"));
  onNonMatch = H._stringIdentity$closure;
  buffer = P.StringBuffer$("");
  t1 = new H._AllMatchesIterable(pattern, receiver);
  t1 = new H._AllMatchesIterator(t1._re, t1._string, null);
  startIndex = 0;
  for (; t1.moveNext$0();) {
    match = t1._liblib7$_current;
    t2 = match._match;
    str = onNonMatch.call$1(C.JSString_methods.substring$2(receiver, startIndex, t2.index));
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
    str = onMatch.call$1(match);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
    t3 = t2.index;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2 = J.get$length$asx(t2[0]);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    startIndex = t3 + t2;
  }
  buffer.write$1(onNonMatch.call$1(C.JSString_methods.substring$1(receiver, startIndex)));
  return buffer._contents;
},

"+stringReplaceAllFuncUnchecked:4:0": 1,

ConstantMap: {"": "Object;",
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return !J.$eq(this.get$length(this), 0);
  },
  "+isNotEmpty": 1,
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 1,
  _throwUnmodifiable$0: function() {
    throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable Map"));
  },
  "+_throwUnmodifiable:0:0": 1,
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  "+[]=:2:0": 1,
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, H.ConstantMap.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(_) {
    return this._throwUnmodifiable$0();
  },
  "+clear:0:0": 1,
  addAll$1: function(_, other) {
    return this._throwUnmodifiable$0();
  },
  "+addAll:1:0": 1,
  $isMap: true
},

"+ConstantMap": [24],

ConstantStringMap: {"": "ConstantMap;length>-,_jsObject-,_keys-",
  containsKey$1: function(key) {
    if (typeof key !== "string")
      return false;
    if (key === "__proto__")
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  "+containsKey:1:0": 1,
  $index: function(_, key) {
    if (typeof key !== "string")
      return;
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  "+[]:1:0": 1,
  forEach$1: function(_, f) {
    J.forEach$1$ax(this._keys, new H.ConstantStringMap_forEach_closure(this, f));
  },
  "+forEach:1:0": 1,
  get$keys: function() {
    var t1 = new H._ConstantMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ConstantStringMap", 0)]);
    return t1;
  },
  "+keys": 1,
  get$values: function(_) {
    return J.map$1$ax(this._keys, new H.ConstantStringMap_values_closure(this));
  },
  "+values": 1,
  $asConstantMap: null,
  $asMap: null
},

"+ConstantStringMap": [],

ConstantStringMap_forEach_closure: {"": "Closure;this_0-,f_1-",
  call$1: function(key) {
    var t1 = this.this_0;
    return this.f_1.call$2(key, t1.$index(t1, key));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+ConstantStringMap_forEach_closure": [],

ConstantStringMap_values_closure: {"": "Closure;this_0-",
  call$1: function(key) {
    var t1 = this.this_0;
    return t1.$index(t1, key);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+ConstantStringMap_values_closure": [],

_ConstantMapKeyIterable: {"": "IterableBase;_liblib7$_map-",
  get$iterator: function(_) {
    return J.get$iterator$ax(this._liblib7$_map._keys);
  },
  "+iterator": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+_ConstantMapKeyIterable": [],

JSInvocationMirror: {"": "Object;_liblib7$_memberName-,_internalName-,_kind-,_arguments-,_namedArgumentNames-,_namedIndices-",
  get$memberName: function() {
    var $name, t1, unmangledName;
    $name = this._liblib7$_memberName;
    t1 = J.getInterceptor($name);
    if (typeof $name === "object" && $name !== null && !!t1.$isSymbol)
      return $name;
    t1 = $.get$mangledNames();
    unmangledName = t1.$index(t1, $name);
    if (unmangledName != null)
      $name = J.$index$asx(J.split$1$s(unmangledName, ":"), 0);
    this._liblib7$_memberName = new H.Symbol0($name);
    return this._liblib7$_memberName;
  },
  "+memberName": 1,
  get$isGetter: function() {
    return J.$eq(this._kind, 1);
  },
  "+isGetter": 1,
  get$isSetter: function() {
    return J.$eq(this._kind, 2);
  },
  "+isSetter": 1,
  get$positionalArguments: function() {
    var t1, t2, t3, argumentCount, list, index;
    if (J.$eq(this._kind, 1))
      return C.List_empty;
    t1 = this._arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.get$positionalArguments$bailout(1, t1);
    t2 = t1.length;
    t3 = J.get$length$asx(this._namedArgumentNames);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    argumentCount = t2 - t3;
    if (argumentCount === 0)
      return C.List_empty;
    list = [];
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw H.ioore(t1, index);
      list.push(t1[index]);
    }
    return H.makeLiteralListConst(list);
  },
  "+positionalArguments": 1,
  get$positionalArguments$bailout: function(state0, t1) {
    var t2, t3, t4, argumentCount, list, index;
    t2 = J.getInterceptor$asx(t1);
    t3 = t2.get$length(t1);
    t4 = J.get$length$asx(this._namedArgumentNames);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    argumentCount = J.$sub$n(t3, t4);
    if (J.$eq(argumentCount, 0))
      return C.List_empty;
    list = [];
    if (typeof argumentCount !== "number")
      throw H.iae(argumentCount);
    index = 0;
    for (; index < argumentCount; ++index)
      list.push(t2.$index(t1, index));
    return H.makeLiteralListConst(list);
  },
  get$namedArguments: function() {
    var t1, t2, namedArgumentCount, t3, namedArgumentsStartIndex, map, i, t4;
    if (!J.$eq(this._kind, 0))
      return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = this._namedArgumentNames;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.get$namedArguments$bailout(1, t1);
    t2 = J.getInterceptor(t1);
    namedArgumentCount = t1.length;
    t3 = this._arguments;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !H.isJsIndexable(t3, t3[init.dispatchPropertyName])))
      return this.get$namedArguments$bailout(2, t1, t3, t2, namedArgumentCount);
    namedArgumentsStartIndex = t3.length - namedArgumentCount;
    if (namedArgumentCount === 0)
      return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t2 = t1[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t3.length)
        throw H.ioore(t3, t4);
      map.$indexSet(map, new H.Symbol0(t2), t3[t4]);
    }
    return map;
  },
  "+namedArguments": 1,
  get$namedArguments$bailout: function(state0, t1, t3, t2, namedArgumentCount) {
    switch (state0) {
      case 0:
        if (!J.$eq(this._kind, 0))
          return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = this._namedArgumentNames;
      case 1:
        state0 = 0;
        t2 = J.getInterceptor$asx(t1);
        namedArgumentCount = t2.get$length(t1);
        t3 = this._arguments;
      case 2:
        var t4, namedArgumentsStartIndex, map, t5, i;
        state0 = 0;
        t4 = J.getInterceptor$asx(t3);
        namedArgumentsStartIndex = J.$sub$n(t4.get$length(t3), namedArgumentCount);
        if (J.$eq(namedArgumentCount, 0))
          return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
        if (typeof namedArgumentCount !== "number")
          throw H.iae(namedArgumentCount);
        t5 = J.getInterceptor$ns(namedArgumentsStartIndex);
        i = 0;
        for (; i < namedArgumentCount; ++i)
          map.$indexSet(map, new H.Symbol0(t2.$index(t1, i)), t4.$index(t3, t5.$add(namedArgumentsStartIndex, i)));
        return map;
    }
  },
  static: {
"": "JSInvocationMirror_METHOD-,JSInvocationMirror_GETTER-,JSInvocationMirror_SETTER-",
}

},

"+JSInvocationMirror": [25],

Primitives_applyFunction_closure: {"": "Closure;allNamedArguments_1-",
  call$2: function(key, argument) {
    this.allNamedArguments_1[key] = argument;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Primitives_applyFunction_closure": [],

Primitives_applyFunction_closure0: {"": "Closure;buffer_2-,arguments_3-,allNamedArguments_4-",
  call$1: function($name) {
    this.buffer_2.write$1("$" + H.S($name));
    this.arguments_3.push(this.allNamedArguments_4[$name]);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Primitives_applyFunction_closure": [],

Primitives_applyFunction_closure1: {"": "Closure;box_0-,buffer_5-,arguments_6-",
  call$2: function($name, argument) {
    var t1;
    this.buffer_5.write$1("$" + H.S($name));
    this.arguments_6.push(argument);
    t1 = this.box_0;
    t1.argumentCount_0 = t1.argumentCount_0 + 1;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Primitives_applyFunction_closure": [],

TypeErrorDecoder: {"": "Object;_pattern-,_arguments-,_argumentsExpr-,_expr-,_method-,_receiver-",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  "+matchTypeError:1:0": 1,
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern-,TypeErrorDecoder_notClosurePattern-,TypeErrorDecoder_nullCallPattern-,TypeErrorDecoder_nullLiteralCallPattern-,TypeErrorDecoder_undefinedCallPattern-,TypeErrorDecoder_undefinedLiteralCallPattern-,TypeErrorDecoder_nullPropertyPattern-,TypeErrorDecoder_nullLiteralPropertyPattern-,TypeErrorDecoder_undefinedPropertyPattern-,TypeErrorDecoder_undefinedLiteralPropertyPattern-",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

"+extractPattern:1:0": 1,

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

"+provokeCallErrorOn:1:0": 1,

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

"+provokeCallErrorOnNull:0:0": 1,

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

"+provokeCallErrorOnUndefined:0:0": 1,

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

"+provokePropertyErrorOn:1:0": 1,

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

"+provokePropertyErrorOnNull:0:0": 1,

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
},

"+provokePropertyErrorOnUndefined:0:0": 1}

},

"+TypeErrorDecoder": [],

NullError: {"": "Error;_message-,_method-",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  "+toString:0:0": 1,
  $isError: true
},

"+NullError": [26],

JsNoSuchMethodError: {"": "Error;_message-,_method-,_receiver-",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  "+toString:0:0": 1,
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
},

"+new JsNoSuchMethodError:2:0": 1}

},

"+JsNoSuchMethodError": [26],

UnknownJsTypeError: {"": "Error;_message-",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  },
  "+toString:0:0": 1
},

"+UnknownJsTypeError": [],

unwrapException_saveStackTrace: {"": "Closure;ex_0-",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+unwrapException_saveStackTrace": [],

_StackTrace: {"": "Object;_exception-,_trace-",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  },
  "+toString:0:0": 1
},

"+_StackTrace": [27],

invokeClosure_closure: {"": "Closure;closure_0-",
  call$0: function() {
    return this.closure_0.call$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+invokeClosure_closure": [],

invokeClosure_closure0: {"": "Closure;closure_1-,arg1_2-",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+invokeClosure_closure": [],

invokeClosure_closure1: {"": "Closure;closure_3-,arg1_4-,arg2_5-",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+invokeClosure_closure": [],

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  "+toString:0:0": 1,
  $isFunction: true
},

"+Closure": [28],

BoundClosure: {"": "Closure;_self-,_target-,_receiver-,_liblib7$_name-",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
  },
  "+hashCode": 1,
  $isBoundClosure: true
},

"+BoundClosure": [],

CastErrorImplementation: {"": "Error;message-",
  toString$0: function(_) {
    return this.message;
  },
  "+toString:0:0": 1,
  $isError: true
},

"+CastErrorImplementation": [29],

TypeImpl: {"": "Object;_typeName-,_unmangledName-",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  "+toString:0:0": 1,
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  "+hashCode": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  "+==:1:0": 1,
  $isTypeImpl: true
},

"+TypeImpl": [30],

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0-",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+applyExperimentalFixup_newGetTagDartFunction": [],

JSSyntaxRegExp: {"": "Object;_nativeRegExp-,_nativeGlobalRegExp-,_nativeAnchoredRegExp-",
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  "+_nativeGlobalVersion": 1,
  get$_nativeAnchoredVersion: function() {
    var t1 = this._nativeAnchoredRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
    this._nativeAnchoredRegExp = t1;
    return t1;
  },
  "+_nativeAnchoredVersion": 1,
  firstMatch$1: function(str) {
    var m;
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    return H._MatchImplementation$(this, m);
  },
  "+firstMatch:1:0": 1,
  allMatches$1: function(_, str) {
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    return new H._AllMatchesIterable(this, str);
  },
  "+allMatches:1:0": 1,
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return H._MatchImplementation$(this, match);
  },
  "+_execGlobal:2:0": 1,
  _execAnchored$2: function(string, start) {
    var regexp, match, t1, t2;
    regexp = this.get$_nativeAnchoredVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    t1 = match.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw H.ioore(match, t2);
    if (match[t2] != null)
      return;
    J.set$length$asx(match, t2);
    return H._MatchImplementation$(this, match);
  },
  "+_execAnchored:2:0": 1,
  matchAsPrefix$2: function(_, string, start) {
    if (start < 0 || start > string.length)
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + string.length));
    return this._execAnchored$2(string, start);
  },
  "+matchAsPrefix:2:0": 1,
  "*matchAsPrefix": [2],
  $isJSSyntaxRegExp: true,
  $isRegExp: true,
  $isPattern: true,
  static: {
JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    H.throwExpression(new P.ArgumentError(pattern));
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw H.wrapException(new P.FormatException("Illegal RegExp pattern: " + H.S(pattern) + ", " + errorMessage));
},

"+makeNative:4:0": 1}

},

"+JSSyntaxRegExp": [31],

_MatchImplementation: {"": "Object;pattern-,_match-",
  get$start: function(_) {
    return this._match.index;
  },
  "+start": 1,
  get$end: function() {
    var t1, t2;
    t1 = this._match;
    t2 = t1.index;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1 = J.get$length$asx(t1[0]);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return t2 + t1;
  },
  "+end": 1,
  group$1: function(index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+group:1:0": 1,
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 1,
  _MatchImplementation$2: function(pattern, _match) {
  },
  $isMatch: true,
  static: {
_MatchImplementation$: function(pattern, _match) {
  var t1 = new H._MatchImplementation(pattern, _match);
  t1._MatchImplementation$2(pattern, _match);
  return t1;
},

"+new _MatchImplementation:2:0": 1}

},

"+_MatchImplementation": [32],

_AllMatchesIterable: {"": "IterableBase;_re-,_string-",
  get$iterator: function(_) {
    return new H._AllMatchesIterator(this._re, this._string, null);
  },
  "+iterator": 1,
  $asIterable: function() {
    return [P.Match];
  }
},

"+_AllMatchesIterable": [],

_AllMatchesIterator: {"": "Object;_regExp-,_string-,_liblib7$_current-",
  get$current: function() {
    return this._liblib7$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var t1, t2, index;
    if (this._string == null)
      return false;
    t1 = this._liblib7$_current;
    if (t1 != null) {
      t1 = t1._match;
      t2 = t1.index;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      index = t2 + t1;
      if (this._liblib7$_current._match.index === index)
        ++index;
    } else
      index = 0;
    this._liblib7$_current = this._regExp._execGlobal$2(this._string, index);
    if (this._liblib7$_current == null) {
      this._string = null;
      return false;
    }
    return true;
  },
  "+moveNext:0:0": 1
},

"+_AllMatchesIterator": [33],

StringMatch: {"": "Object;start>-,input-,pattern-",
  get$end: function() {
    return this.start + this.pattern.length;
  },
  "+end": 1,
  $index: function(_, g) {
    if (!J.$eq(g, 0))
      H.throwExpression(new P.RangeError("value " + H.S(g)));
    return this.pattern;
  },
  "+[]:1:0": 1,
  group$1: function(group_) {
    if (!J.$eq(group_, 0))
      throw H.wrapException(new P.RangeError("value " + H.S(group_)));
    return this.pattern;
  },
  "+group:1:0": 1,
  $isMatch: true
},

"+StringMatch": [32]}],
["bootstrap", "hydra.html_bootstrap.dart", , Y, {
main0: function() {
  $.useObservers = false;
  U.main();
  U.init_autogenerated();
},

"+main:0:0": 1},
1],
["code", "package:irhydra/src/modes/code.dart", , Z, {
Code: {"": "Object;start>-,code>-,blocks<-",
  get$isEmpty: function(_) {
    return this.code.length === 0;
  },
  "+isEmpty": 1,
  codeOf$1: function($name) {
    var t1, t2, t3;
    t1 = this.blocks;
    if (t1.containsKey$1($name) === true) {
      t2 = this.code;
      t3 = J.get$start$x(t1.$index(t1, $name));
      t1 = J.$add$ns(J.get$start$x(t1.$index(t1, $name)), J.get$length$asx(t1.$index(t1, $name)));
      H.IterableMixinWorkaround__rangeCheck(t2, t3, t1);
      t1 = H.SubListIterable$(t2, t3, t1, null);
    } else
      t1 = C.List_empty;
    return t1;
  },
  "+codeOf:1:0": 1,
  get$prologue: function() {
    var t1, t2;
    t1 = this.blocks;
    if (t1.get$isEmpty(t1))
      t1 = C.List_empty;
    else {
      t2 = this.code;
      t1 = J.get$start$x(J.get$first$ax(t1.get$values(t1)));
      H.IterableMixinWorkaround__rangeCheck(t2, 0, t1);
      t1 = H.SubListIterable$(t2, 0, t1, null);
    }
    return t1;
  },
  "+prologue": 1,
  get$epilogue: function() {
    var t1, t2, t3;
    t1 = this.blocks;
    if (t1.get$isEmpty(t1))
      t1 = C.List_empty;
    else {
      t2 = this.code;
      t1 = J.get$last$ax(t1.get$values(t1)).get$end();
      t3 = t2.length;
      H.IterableMixinWorkaround__rangeCheck(t2, t1, t3);
      t3 = H.SubListIterable$(t2, t1, t3, null);
      t1 = t3;
    }
    return t1;
  },
  "+epilogue": 1
},

"+Code": [],

Range: {"": "Object;start*-,end@-",
  get$length: function(_) {
    return J.$sub$n(this.end, this.start);
  },
  "+length": 1
},

"+Range": [],

Instruction: {"": "Object;offset>-,instr-,comment<-",
  offset$0: function($receiver) {
    return this.offset.call$0();
  },
  $isInstruction: true
},

"+Instruction": [],

Jump: {"": "Object;offset>-,opcode-,target>-,comment<-",
  offset$0: function($receiver) {
    return this.offset.call$0();
  },
  $isJump: true
},

"+Jump": [],

Comment: {"": "Object;comment<-", $isComment: true},

"+Comment": [],

CodeSplicer: {"": "Object;pane-,mode-,code>-,instructions-,currentPos-,opcodeRe-,addressImmediateRe-",
  emitUntil$1: function(marker) {
    var nextPos, i, t1;
    if (!J.$eq(this.mode, "inline asm"))
      return;
    nextPos = this._nextMarker$1(marker);
    if (nextPos == null)
      return;
    i = this.currentPos;
    if (typeof nextPos !== "number")
      throw H.iae(nextPos);
    t1 = this.instructions;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.emitUntil$1$bailout(1, t1, nextPos, i);
    for (; i < nextPos; ++i) {
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(t1, i);
      this._display$1(t1[i]);
    }
    this.currentPos = nextPos + 1;
  },
  "+emitUntil:1:0": 1,
  emitUntil$1$bailout: function(state0, t1, nextPos, i) {
    switch (state0) {
      case 0:
        if (!J.$eq(this.mode, "inline asm"))
          return;
        nextPos = this._nextMarker$1(marker);
        if (nextPos == null)
          return;
        i = this.currentPos;
        if (typeof nextPos !== "number")
          throw H.iae(nextPos);
        t1 = this.instructions;
      case 1:
        var t2;
        state0 = 0;
        t2 = J.getInterceptor$asx(t1);
        for (; i < nextPos; ++i)
          this._display$1(t2.$index(t1, i));
        this.currentPos = nextPos + 1;
    }
  },
  emitWhile$1: function(test) {
    var t1, t2, current;
    if (!J.$eq(this.mode, "inline asm"))
      return;
    t1 = this.instructions;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.emitWhile$1$bailout(1, test, t1);
    for (; t2 = this.currentPos, t2 < t1.length;) {
      this.currentPos = t2 + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      current = t1[t2];
      t2 = J.getInterceptor(current);
      if (typeof current === "object" && current !== null && !!t2.$isComment && test.call$1(current.comment) !== true)
        break;
      this._display$1(current);
    }
  },
  "+emitWhile:1:0": 1,
  emitWhile$1$bailout: function(state0, test, t1) {
    switch (state0) {
      case 0:
        if (!J.$eq(this.mode, "inline asm"))
          return;
        t1 = this.instructions;
      case 1:
        var t2, t3, t4, current;
        state0 = 0;
        t2 = J.getInterceptor$asx(t1);
        while (true) {
          t3 = this.currentPos;
          t4 = t2.get$length(t1);
          if (typeof t4 !== "number")
            throw H.iae(t4);
          if (!(t3 < t4))
            break;
          t3 = this.currentPos;
          this.currentPos = t3 + 1;
          current = t2.$index(t1, t3);
          t3 = J.getInterceptor(current);
          if (typeof current === "object" && current !== null && !!t3.$isComment && test.call$1(current.comment) !== true)
            break;
          this._display$1(current);
        }
    }
  },
  emitRest$0: function() {
    var i, t1, t2;
    if (J.$eq(this.mode, "no asm"))
      return;
    i = this.currentPos;
    t1 = this.instructions;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.emitRest$0$bailout(1, t1, i);
    for (; t2 = t1.length, i < t2; ++i) {
      if (i >>> 0 !== i || i >= t2)
        throw H.ioore(t1, i);
      this._display$1(t1[i]);
    }
  },
  "+emitRest:0:0": 1,
  emitRest$0$bailout: function(state0, t1, i) {
    switch (state0) {
      case 0:
        if (J.$eq(this.mode, "no asm"))
          return;
        i = this.currentPos;
        t1 = this.instructions;
      case 1:
        var t2, t3;
        state0 = 0;
        t2 = J.getInterceptor$asx(t1);
        while (true) {
          t3 = t2.get$length(t1);
          if (typeof t3 !== "number")
            throw H.iae(t3);
          if (!(i < t3))
            break;
          this._display$1(t2.$index(t1, i));
          ++i;
        }
    }
  },
  isAfterMarker$1: function(marker) {
    var t1, t2, t3, t4;
    t1 = this.currentPos;
    if (0 < t1) {
      t2 = this.instructions;
      t3 = J.getInterceptor$asx(t2);
      t4 = t3.get$length(t2);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (t1 < t4) {
        t1 = t3.$index(t2, this.currentPos - 1);
        t2 = J.getInterceptor(t1);
        t1 = typeof t1 === "object" && t1 !== null && !!t2.$isComment && J.contains$1$asx(t1.comment, marker) === true;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+isAfterMarker:1:0": 1,
  _nextMarker$1: function(marker) {
    var i, t1, t2, t3;
    i = this.currentPos;
    t1 = this.instructions;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this._nextMarker$1$bailout(1, marker, t1, i);
    for (; t2 = t1.length, i < t2; ++i) {
      if (i >>> 0 !== i || i >= t2)
        throw H.ioore(t1, i);
      t2 = t1[i];
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isComment && J.contains$1$asx(t2.comment, marker) === true)
        return i;
    }
    return;
  },
  "+_nextMarker:1:0": 1,
  _nextMarker$1$bailout: function(state0, marker, t1, i) {
    switch (state0) {
      case 0:
        i = this.currentPos;
        t1 = this.instructions;
      case 1:
        var t2, t3, t4;
        state0 = 0;
        t2 = J.getInterceptor$asx(t1);
        while (true) {
          t3 = t2.get$length(t1);
          if (typeof t3 !== "number")
            throw H.iae(t3);
          if (!(i < t3))
            break;
          t3 = t2.$index(t1, i);
          t4 = J.getInterceptor(t3);
          if (typeof t3 === "object" && t3 !== null && !!t4.$isComment && J.contains$1$asx(t3.comment, marker) === true)
            return i;
          ++i;
        }
        return;
    }
  },
  _display$1: function(instr) {
    var t1, t2;
    t1 = J.getInterceptor(instr);
    if (typeof instr === "object" && instr !== null && !!t1.$isInstruction) {
      t1 = instr.offset;
      J.add$4$id$klass$ax(this.pane, H.S(t1), this._formatInstruction$1(instr), "offset-" + H.S(t1), "native-code");
    } else if (typeof instr === "object" && instr !== null && !!t1.$isComment) {
      t1 = ";; " + H.S(instr.comment);
      t2 = W._ElementFactoryProvider_createElement_tag("em", null);
      J.appendText$1$x(t2, t1);
      J.add$3$klass$ax(this.pane, " ", t2, "native-code");
    } else if (typeof instr === "object" && instr !== null && !!t1.$isJump) {
      t1 = instr.offset;
      J.add$4$id$klass$ax(this.pane, H.S(t1), this._formatJump$1(instr), "offset-" + H.S(t1), "native-code");
    }
  },
  "+_display:1:0": 1,
  _formatInstruction$1: function(instr) {
    var t1, t2, opcode, operands, immediateDef, t3, t4, immAddress, immValue, map, formattedOperands;
    t1 = this.opcodeRe.firstMatch$1(instr.instr)._match;
    t2 = t1.length;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    opcode = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    operands = t1[3];
    t1 = instr.comment;
    t2 = t1 != null;
    if (t2) {
      immediateDef = this.addressImmediateRe.firstMatch$1(t1);
      if (immediateDef != null) {
        t3 = immediateDef._match;
        t4 = t3.length;
        if (1 >= t4)
          throw H.ioore(t3, 1);
        immAddress = t3[1];
        if (2 >= t4)
          throw H.ioore(t3, 2);
        immValue = t3[2];
        map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        map.$indexSet(map, immAddress, new Z.CodeSplicer__formatInstruction_closure(immAddress, immValue));
        formattedOperands = N.makeFormatter(map).call$1(operands);
      } else
        formattedOperands = null;
    } else
      formattedOperands = null;
    if (formattedOperands == null) {
      formattedOperands = document.createElement("span", null);
      t3 = J.getInterceptor$x(formattedOperands);
      t3.appendText$1(formattedOperands, operands);
      if (t2) {
        t1 = ";; " + H.S(t1);
        t2 = W._ElementFactoryProvider_createElement_tag("em", null);
        J.appendText$1$x(t2, t1);
        t3.append$1(formattedOperands, t2);
      }
    }
    t1 = document.createElement("span", null);
    t2 = document.createElement("span", null);
    t3 = J.getInterceptor$x(t2);
    J.add$1$ax(t3.get$classes(t2), "boldy");
    t3.appendText$1(t2, opcode);
    t3 = J.getInterceptor$x(t1);
    t3.append$1(t1, t2);
    t3.append$1(t1, formattedOperands);
    return t1;
  },
  "+_formatInstruction:1:0": 1,
  _formatJump$1: function(instr) {
    var elem, t1, t2, t3;
    elem = document.createElement("span", null);
    t1 = document.createElement("span", null);
    t2 = J.getInterceptor$x(t1);
    J.add$1$ax(t2.get$classes(t1), "boldy");
    t2.appendText$1(t1, instr.opcode);
    t2 = J.getInterceptor$x(elem);
    t2.append$1(elem, t1);
    t2.appendText$1(elem, " ");
    t1 = instr.target;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (0 <= t1) {
      t3 = J.get$offset$x(J.get$last$ax(J.get$code$x(this.code)));
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t3 = C.JSNumber_methods.$le(t1, t3) === true;
    } else
      t3 = false;
    if (t3) {
      t3 = W.AnchorElement_AnchorElement("#" + H.S(J.href$1$x(this.pane, "offset-" + H.S(t1))));
      J.appendText$1$x(t3, H.S(t1));
      t2.append$1(elem, t3);
    } else
      t2.appendText$1(elem, H.S(J.$add$ns(J.get$start$x(this.code), t1)));
    t1 = instr.comment;
    if (t1 != null) {
      t1 = ";; " + H.S(t1);
      t3 = W._ElementFactoryProvider_createElement_tag("em", null);
      J.appendText$1$x(t3, t1);
      t2.append$1(elem, t3);
    }
    return elem;
  },
  "+_formatJump:1:0": 1,
  static: {
"": "CodeSplicer_CODE_MODE_INLINE-,CodeSplicer_CODE_MODE_SEPARATE-,CodeSplicer_CODE_MODE_NONE-,CodeSplicer_CODE_MODES-",
}

},

"+CodeSplicer": [],

CodeSplicer__formatInstruction_closure: {"": "Closure;immAddress_0-,immValue_1-",
  call$1: function(_) {
    var t1, t2, t3;
    t1 = H.S(this.immAddress_0) + " (" + H.S(this.immValue_1) + ")";
    t2 = document.createElement("span", null);
    t3 = J.getInterceptor$x(t2);
    J.add$1$ax(t3.get$classes(t2), "native-code-constant");
    t3.appendText$1(t2, t1);
    return t2;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CodeSplicer__formatInstruction_closure": []}],
["code_parser", "package:irhydra/src/modes/dartvm/code_parser.dart", , U, {
parse1: function(text) {
  var t1;
  if (text != null) {
    t1 = text.call$0();
    t1 = new U.CodeParser([], H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), null, null, J.toList$0$ax(J.split$1$s(t1, "\n")), 0, []);
    t1._states.push(new R._State(t1._convertPatterns$1(t1.get$patterns()), t1.lineno));
    t1.parse$0();
    t1 = t1.get$code(t1);
  } else
    t1 = new Z.Code(0, C.List_empty, C.Map_empty);
  return t1;
},

"+parse:1:0": 1,

CodeParser: {"": "ParserBase;_liblib12$_code-,blocks<-,start*-,block-,lines-,lineno-,_states-",
  get$patterns: function() {
    return H.fillLiteralMap(["^0x([a-f0-9]+)\\s+[a-f0-9]+\\s+(j\\w+) 0x([a-f0-9]+)$", new U.CodeParser_patterns_closure(this), "^0x([a-f0-9]+)\\s+[a-f0-9]+\\s+([^;]+)$", new U.CodeParser_patterns_closure0(this), "^\\s+;; (B\\d+)$", new U.CodeParser_patterns_closure1(this), "^\\s+;;+(.*)$", new U.CodeParser_patterns_closure2(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  "+patterns": 1,
  get$code: function(_) {
    var t1 = this.block;
    if (t1 != null)
      t1.end = this._liblib12$_code.length;
    return new Z.Code(this.start, this._liblib12$_code, this.blocks);
  },
  "+code": 1
},

"+CodeParser": [],

CodeParser_patterns_closure: {"": "Closure;this_0-",
  call$3: function(address, jmp, target) {
    var t1 = this.this_0;
    t1._liblib12$_code.push(new Z.Jump(J.$sub$n(H.Primitives_parseInt(address, 16, null), t1.start), jmp, J.$sub$n(H.Primitives_parseInt(target, 16, null), t1.start), null));
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+CodeParser_patterns_closure": [],

CodeParser_patterns_closure0: {"": "Closure;this_1-",
  call$2: function(address, instr) {
    var t1;
    address = H.Primitives_parseInt(address, 16, null);
    t1 = this.this_1;
    if (t1.start == null)
      t1.start = address;
    t1._liblib12$_code.push(new Z.Instruction(J.$sub$n(address, t1.start), instr, null));
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+CodeParser_patterns_closure": [],

CodeParser_patterns_closure1: {"": "Closure;this_2-",
  call$1: function($name) {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = t1.block;
    if (t2 != null)
      t2.end = t1._liblib12$_code.length;
    t2 = t1.blocks;
    t3 = new Z.Range(t1._liblib12$_code.length, null);
    t1.block = t3;
    t2.$indexSet(t2, $name, t3);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CodeParser_patterns_closure": [],

CodeParser_patterns_closure2: {"": "Closure;this_3-",
  call$1: function(comment) {
    var t1, t2;
    t1 = this.this_3;
    if (t1.block != null) {
      t2 = J.getInterceptor$asx(comment);
      t2 = t2.contains$1(comment, "SlowPath") === true || t2.contains$1(comment, "Deopt stub") === true;
    } else
      t2 = false;
    if (t2) {
      t1.block.end = t1._liblib12$_code.length;
      t1.block = null;
    }
    t1._liblib12$_code.push(new Z.Comment(comment));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CodeParser_patterns_closure": []}],
["code_parser", "package:irhydra/src/modes/v8/code_parser.dart", , U, {
parse: function(lines) {
  var t1;
  if (lines != null) {
    t1 = new U.Parser([], H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), null, null, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(j\\w+) (\\d+) ", false, true, false), null, null), J.toList$0$ax(lines), 0, []);
    t1._states.push(new R._State(t1._convertPatterns$1(t1.get$patterns()), t1.lineno));
    t1.parse$0();
    t1 = t1.get$code(t1);
  } else
    t1 = new Z.Code(0, C.List_empty, C.Map_empty);
  return t1;
},

"+parse:1:0": 1,

PreParser: {"": "ParserBase;methods-,currentMethod-,lines-,lineno-,_states-",
  enterMethod$1: function($name) {
    this.currentMethod = new K.Method(new K.Name($name, null, $name), [], []);
    this.methods.push(this.currentMethod);
  },
  "+enterMethod:1:0": 1,
  get$patterns: function() {
    return H.fillLiteralMap(["^\\-\\-\\- Optimized code \\-\\-\\-$", H.fillLiteralMap(["^name = ([\\w.]*)$", new U.PreParser_patterns_closure(this), "^Instructions", H.fillLiteralMap(["^\\s+;;; Safepoint table", new U.PreParser_patterns_closure0(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "^\\[deoptimizing \\(DEOPT (\\w+)\\): begin 0x[a-f0-9]+ ([\\w$.]+) @(\\d+)", new U.PreParser_patterns_closure1(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  "+patterns": 1
},

"+PreParser": [],

PreParser_patterns_closure: {"": "Closure;this_0-",
  call$1: function($name) {
    this.this_0.enterMethod$1($name);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+PreParser_patterns_closure": [],

PreParser_patterns_closure0: {"": "Closure;this_1-",
  call$0: function() {
    var t1 = this.this_1;
    if (t1.currentMethod == null)
      t1.enterMethod$1("");
    t1.currentMethod.phases.push(new K.Phase("Z_Code generation", null, t1.subrange$0()));
    t1.currentMethod = null;
    t1.leave$1$nstates(2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+PreParser_patterns_closure": [],

PreParser_patterns_closure1: {"": "Closure;this_2-",
  call$3: function(type, method_name, bailout_id) {
    var t1 = this.this_2;
    t1._states.push(new R._State(t1._convertPatterns$1(H.fillLiteralMap(["^\\[deoptimizing \\(\\w+\\): end", new U.PreParser_patterns__closure(t1, type, method_name, bailout_id)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))), t1.lineno));
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+PreParser_patterns_closure": [],

PreParser_patterns__closure: {"": "Closure;this_3-,type_4-,method_name_5-,bailout_id_6-",
  call$0: function() {
    var t1, t2, t3, t4, t5, t6, currentMethod;
    t1 = H.Primitives_parseInt(this.bailout_id_6, null, null);
    t2 = this.this_3;
    t3 = t2.subrange$1$inclusive(true);
    t4 = J.$eq(this.type_4, "lazy");
    for (t5 = new H.ReversedListIterable(t2.methods), H.setRuntimeTypeInfo(t5, [null]), t5 = new H.ListIterator(t5, t5.get$length(t5), 0, null), t6 = this.method_name_5; t5.moveNext$0();) {
      currentMethod = t5._liblib$_current;
      if (J.$eq(J.get$name$x(currentMethod).get$full(), t6)) {
        J.add$1$ax(currentMethod.get$deopts(), new K.Deopt(t1, t3, t4));
        break;
      }
    }
    t2.leave$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+PreParser_patterns__closure": [],

Parser: {"": "ParserBase;_liblib11$_code-,blocks<-,start*-,block-,localJumpRe-,lines-,lineno-,_states-",
  get$patterns: function() {
    return H.fillLiteralMap(["^0x([a-f0-9]+)\\s+(\\d+)\\s+[a-f0-9]+\\s+([^;]+)(;;.*)?$", new U.Parser_patterns_closure(this), "^\\s+;;; <@\\d+,#\\d+> \\-+ (B\\d+)", new U.Parser_patterns_closure0(this), "^\\s+;*\\s*(.*)$", new U.Parser_patterns_closure1(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  "+patterns": 1,
  parseInstruction$3: function(addr, instr, comment) {
    var offset, localJump, t1, t2, opcode;
    if (this.start == null)
      this.start = addr;
    offset = J.$sub$n(addr, this.start);
    if (comment != null)
      comment = J.replaceAll$2$s(comment, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^;;\\s+", false, true, false), null, null), "");
    localJump = this.localJumpRe.firstMatch$1(instr);
    if (localJump != null) {
      t1 = localJump._match;
      t2 = t1.length;
      if (1 >= t2)
        throw H.ioore(t1, 1);
      opcode = t1[1];
      if (2 >= t2)
        throw H.ioore(t1, 2);
      this._liblib11$_code.push(new Z.Jump(offset, opcode, H.Primitives_parseInt(t1[2], null, null), comment));
      return;
    }
    this._liblib11$_code.push(new Z.Instruction(offset, instr, comment));
  },
  "+parseInstruction:3:0": 1,
  parseComment$1: function(comment) {
    var t1, t2, t3, lastComment;
    t1 = this._liblib11$_code;
    t2 = C.JSArray_methods.get$last(t1);
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isComment) {
      lastComment = C.JSArray_methods.get$last(t1).get$comment();
      t2 = J.getInterceptor$asx(lastComment);
      if (t2.contains$1(lastComment, ": gap.") === true || t2.contains$1(lastComment, ": label.") === true) {
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t1.pop();
      }
    }
    if (J.startsWith$1$s(comment, "Deferred") === true && this.block != null) {
      this.block.end = t1.length;
      this.block = null;
    }
    t1.push(new Z.Comment(comment));
  },
  "+parseComment:1:0": 1,
  get$code: function(_) {
    var t1 = this.block;
    if (t1 != null)
      t1.end = this._liblib11$_code.length;
    return new Z.Code(this.start, this._liblib11$_code, this.blocks);
  },
  "+code": 1
},

"+Parser": [],

Parser_patterns_closure: {"": "Closure;this_0-",
  call$4: function(address, offs, instr, comment) {
    this.this_0.parseInstruction$3(H.Primitives_parseInt(address, 16, null), instr, comment);
  },
  "+call:4:0": 1,
  "*call": [0],
  call$3: function(address, offs, instr) {
    return this.call$4(address, offs, instr, null);
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+Parser_patterns_closure": [],

Parser_patterns_closure0: {"": "Closure;this_1-",
  call$1: function($name) {
    var t1, t2, t3;
    t1 = this.this_1;
    t2 = t1.block;
    if (t2 != null)
      t2.end = t1._liblib11$_code.length;
    t2 = t1.blocks;
    t3 = new Z.Range(t1._liblib11$_code.length, null);
    t1.block = t3;
    t2.$indexSet(t2, $name, t3);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Parser_patterns_closure": [],

Parser_patterns_closure1: {"": "Closure;this_2-",
  call$1: function(text) {
    return this.this_2.parseComment$1(text);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Parser_patterns_closure": []}],
["custom_element", "package:custom_element/custom_element.dart", , B, {
CustomElement: {"": "Object;",
  get$host: function(_) {
    throw H.wrapException(new P.StateError("host element has not been set."));
  },
  "+host": 1,
  createShadowRoot$1: function(_, componentName) {
    var root = J.createShadowRoot$0$x(this.get$host(this));
    return root;
  },
  "+createShadowRoot:1:0": 1,
  "*createShadowRoot": [0],
  createShadowRoot$0: function($receiver) {
    return this.createShadowRoot$1($receiver, null);
  },
  "+createShadowRoot:0:0": 1,
  bind$3: function(_, $name, model, path) {
    return J.bind$3$x(this.get$host(this), $name, model, path);
  },
  "+bind:3:0": 1,
  get$nodes: function(_) {
    return J.get$nodes$x(this.get$host(this));
  },
  "+nodes": 1,
  replaceWith$1: function(_, otherNode) {
    J.replaceWith$1$x(this.get$host(this), otherNode);
  },
  "+replaceWith:1:0": 1,
  remove$0: function(_) {
    return J.remove$0$ax(this.get$host(this));
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new B.Bound_remove_CustomElement(this, B.CustomElement.prototype.remove$0, _receiver, "remove$0");
  },
  get$nextNode: function(_) {
    return J.get$nextNode$x(this.get$host(this));
  },
  "+nextNode": 1,
  get$document: function(_) {
    return J.get$document$x(this.get$host(this));
  },
  "+document": 1,
  get$previousNode: function(_) {
    return J.get$previousNode$x(this.get$host(this));
  },
  "+previousNode": 1,
  get$text: function(_) {
    return J.get$text$x(this.get$host(this));
  },
  "+text": 1,
  set$text: function(_, v) {
    J.set$text$x(this.get$host(this), v);
  },
  "+text=": 1,
  contains$1: function(_, other) {
    return J.contains$1$asx(this.get$host(this), other);
  },
  "+contains:1:0": 1,
  insertBefore$2: function(_, newChild, refChild) {
    return J.insertBefore$2$x(this.get$host(this), newChild, refChild);
  },
  "+insertBefore:2:0": 1,
  insertAllBefore$2: function(_, newChild, refChild) {
    return J.insertAllBefore$2$x(this.get$host(this), newChild, refChild);
  },
  "+insertAllBefore:2:0": 1,
  get$attributes: function(_) {
    return J.get$attributes$x(this.get$host(this));
  },
  "+attributes": 1,
  set$attributes: function(_, value) {
    J.set$attributes$x(this.get$host(this), value);
  },
  "+attributes=": 1,
  get$children: function(_) {
    return J.get$children$x(this.get$host(this));
  },
  "+children": 1,
  get$classes: function(_) {
    return J.get$classes$x(this.get$host(this));
  },
  "+classes": 1,
  getNamespacedAttributes$1: function(_, namespace) {
    return J.getNamespacedAttributes$1$x(this.get$host(this), namespace);
  },
  "+getNamespacedAttributes:1:0": 1,
  clone$1: function(_, deep) {
    return J.clone$1$x(this.get$host(this), deep);
  },
  "+clone:1:0": 1,
  get$parent: function(_) {
    return J.get$parent$x(this.get$host(this));
  },
  "+parent": 1,
  get$parentNode: function(_) {
    return J.get$parentNode$x(this.get$host(this));
  },
  "+parentNode": 1,
  get$id: function(_) {
    return J.get$id$x(this.get$host(this));
  },
  "+id": 1,
  get$innerHtml: function(_) {
    return J.get$innerHtml$x(this.get$host(this));
  },
  "+innerHtml": 1,
  click$0: function(_) {
    J.click$0$x(this.get$host(this));
  },
  "+click:0:0": 1,
  get$style: function(_) {
    return J.get$style$x(this.get$host(this));
  },
  "+style": 1,
  get$tagName: function(_) {
    return J.get$tagName$x(this.get$host(this));
  },
  "+tagName": 1,
  scrollIntoView$1: function(_, alignment) {
    J.scrollIntoView$1$x(this.get$host(this), alignment);
  },
  "+scrollIntoView:1:0": 1,
  "*scrollIntoView": [0],
  scrollIntoView$0: function($receiver) {
    return this.scrollIntoView$1($receiver, null);
  },
  "+scrollIntoView:0:0": 1,
  matches$1: function(_, selectors) {
    return J.matches$1$x(this.get$host(this), selectors);
  },
  "+matches:1:0": 1,
  matchesWithAncestors$1: function(_, selectors) {
    return J.matchesWithAncestors$1$x(this.get$host(this), selectors);
  },
  "+matchesWithAncestors:1:0": 1,
  query$1: function(_, selectors) {
    return J.query$1$x(this.get$host(this), selectors);
  },
  "+query:1:0": 1,
  queryAll$1: function(_, selectors) {
    return J.queryAll$1$x(this.get$host(this), selectors);
  },
  "+queryAll:1:0": 1,
  get$className: function(_) {
    return J.get$className$x(this.get$host(this));
  },
  "+className": 1,
  set$className: function(_, value) {
    J.set$className$x(this.get$host(this), value);
  },
  "+className=": 1,
  get$clientHeight: function(_) {
    return J.get$height$x(J.get$client$x(this.get$host(this)));
  },
  "+clientHeight": 1,
  get$client: function(_) {
    return J.get$client$x(this.get$host(this));
  },
  "+client": 1,
  get$offset: function(_) {
    return J.get$offset$x(this.get$host(this));
  },
  "+offset": 1,
  offset$0: function($receiver) {
    return this.get$offset($receiver).call$0();
  },
  get$scrollLeft: function(_) {
    return J.get$scrollLeft$x(this.get$host(this));
  },
  "+scrollLeft": 1,
  scrollLeft$0: function($receiver) {
    return this.get$scrollLeft($receiver).call$0();
  },
  get$scrollTop: function(_) {
    return J.get$scrollTop$x(this.get$host(this));
  },
  "+scrollTop": 1,
  scrollTop$0: function($receiver) {
    return this.get$scrollTop($receiver).call$0();
  },
  getBoundingClientRect$0: function(_) {
    return J.getBoundingClientRect$0$x(this.get$host(this));
  },
  "+getBoundingClientRect:0:0": 1,
  get$firstChild: function(_) {
    return J.get$firstChild$x(this.get$host(this));
  },
  "+firstChild": 1,
  get$lastChild: function(_) {
    return J.get$lastChild$x(this.get$host(this));
  },
  "+lastChild": 1,
  get$nodeType: function(_) {
    return J.get$nodeType$x(this.get$host(this));
  },
  "+nodeType": 1,
  $$dom_addEventListener$3: function(_, type, listener, useCapture) {
    J.$$dom_addEventListener$3$x(this.get$host(this), type, listener, useCapture);
  },
  "+$dom_addEventListener:3:0": 1,
  "*$dom_addEventListener": [0],
  $$dom_removeEventListener$3: function(_, type, listener, useCapture) {
    J.$$dom_removeEventListener$3$x(this.get$host(this), type, listener, useCapture);
  },
  "+$dom_removeEventListener:3:0": 1,
  "*$dom_removeEventListener": [0],
  get$xtag: function(_) {
    return J.get$xtag$x(this.get$host(this));
  },
  "+xtag": 1,
  set$xtag: function(_, value) {
    J.set$xtag$x(this.get$host(this), value);
  },
  "+xtag=": 1,
  append$1: function(_, e) {
    return J.append$1$x(this.get$host(this), e);
  },
  "+append:1:0": 1,
  appendText$1: function(_, text) {
    return J.appendText$1$x(this.get$host(this), text);
  },
  "+appendText:1:0": 1,
  appendHtml$1: function(_, html) {
    return J.appendHtml$1$x(this.get$host(this), html);
  },
  "+appendHtml:1:0": 1,
  get$onChange: function(_) {
    return J.get$onChange$x(this.get$host(this));
  },
  "+onChange": 1,
  get$onClick: function(_) {
    return J.get$onClick$x(this.get$host(this));
  },
  "+onClick": 1,
  get$onKeyUp: function(_) {
    return J.get$onKeyUp$x(this.get$host(this));
  },
  "+onKeyUp": 1,
  get$onScroll: function(_) {
    return J.get$onScroll$x(this.get$host(this));
  },
  "+onScroll": 1,
  get$onMouseOut: function(_) {
    return J.get$onMouseOut$x(this.get$host(this));
  },
  "+onMouseOut": 1,
  get$onMouseOver: function(_) {
    return J.get$onMouseOver$x(this.get$host(this));
  },
  "+onMouseOver": 1,
  $isElement: true,
  $isNode: true,
  $isEventTarget: true
},

"+CustomElement": [34]}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !H.isJsIndexable(src, src[init.dispatchPropertyName])))
    return H.Arrays_copy$bailout(1, dst, src, srcStart, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !H.isJsIndexable(dst, dst[init.dispatchPropertyName]))
    return H.Arrays_copy$bailout(1, dst, src, srcStart, dstStart, count);
  if (typeof dstStart !== "number")
    throw H.iae(dstStart);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw H.ioore(src, i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw H.ioore(dst, j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw H.ioore(src, i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw H.ioore(dst, j);
      dst[j] = t4;
    }
},

"+copy:5:0": 1,

Arrays_copy$bailout: function(state0, dst, src, srcStart, dstStart, count) {
  var i, j, t1, t2;
  if (typeof dstStart !== "number")
    throw H.iae(dstStart);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = J.getInterceptor$asx(src); i >= srcStart; --i, --j)
      C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = srcStart + count, t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; i < t1; ++i, ++j)
      C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (typeof startIndex !== "number")
    return H.Arrays_indexOf$bailout(1, element, a, endIndex, startIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  if (startIndex !== (startIndex | 0))
    return H.Arrays_indexOf$bailout(2, element, a, endIndex, startIndex);
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

"+indexOf:4:0": 1,

Arrays_indexOf$bailout: function(state0, element, a, endIndex, startIndex) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$ge(startIndex, a.length) === true)
        return -1;
      if (t1.$lt(startIndex, 0) === true)
        startIndex = 0;
    case 2:
      var t1, i;
      state0 = 0;
      for (i = startIndex; J.$lt$n(i, endIndex) === true; ++i) {
        if (i >>> 0 !== i || i >= a.length)
          throw H.ioore(a, i);
        if (J.$eq(a[i], element))
          return i;
      }
      return -1;
  }
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._liblib$_current);
},

"+forEach:2:0": 1,

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._liblib$_current) === true)
      return true;
  return false;
},

"+any:2:0": 1,

IterableMixinWorkaround_every: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._liblib$_current) !== true)
      return false;
  return true;
},

"+every:2:0": 1,

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

"+toStringIterable:3:0": 1,

IterableMixinWorkaround_sortList: function(list, compare) {
  if (compare == null)
    compare = P.Comparable_compare$closure;
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

"+sortList:2:0": 1,

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = J.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true || t1.$gt(start, list.length) === true) {
    t1 = list.length;
    throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
  }
  t1 = J.getInterceptor$n(end);
  if (t1.$lt(end, start) === true || t1.$gt(end, list.length) === true) {
    t1 = list.length;
    throw H.wrapException(new P.RangeError("value " + H.S(end) + " not in range " + H.S(start) + ".." + t1));
  }
},

"+_rangeCheck:3:0": 1,

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > J.get$length$asx(from))
    throw H.wrapException(new P.StateError("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

"+setRangeList:5:0": 1,

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

"+_doSort:4:0": 1,

Sort__insertionSort: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !H.isJsIndexable(a, a[init.dispatchPropertyName]))
    return H.Sort__insertionSort$bailout(1, a, compare, left, right);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw H.ioore(a, t1);
        t1 = J.$gt$n(compare.call$2(a[t1], el), 0) === true;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw H.ioore(a, j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw H.ioore(a, j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw H.ioore(a, j);
    a[j] = el;
  }
},

"+_insertionSort:4:0": 1,

Sort__insertionSort$bailout: function(state0, a, compare, left, right) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0) === true))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, great0, less0, pivots_are_equal, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !H.isJsIndexable(a, a[init.dispatchPropertyName]))
    return H.Sort__dualPivotQuicksort$bailout(1, a, compare, right, left);
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw H.ioore(a, index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw H.ioore(a, index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw H.ioore(a, index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw H.ioore(a, index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw H.ioore(a, index5);
  el5 = a[index5];
  if (J.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw H.ioore(a, index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw H.ioore(a, index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw H.ioore(a, index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw H.ioore(a, left);
  t2 = a[left];
  if (index2 >= t1)
    throw H.ioore(a, index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw H.ioore(a, right);
  t2 = a[right];
  if (index4 >= t1)
    throw H.ioore(a, index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw H.ioore(a, k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = J.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw H.ioore(a, less);
          t2 = a[less];
          if (k >= t1)
            throw H.ioore(a, k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw H.ioore(a, great);
          comp = compare.call$2(a[great], el2);
          t1 = J.getInterceptor$n(comp);
          if (t1.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw H.ioore(a, less);
              t1 = a[less];
              if (k >= t2)
                throw H.ioore(a, k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw H.ioore(a, great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw H.ioore(a, great);
              t1 = a[great];
              if (k >= t2)
                throw H.ioore(a, k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw H.ioore(a, k);
      ak = a[k];
      if (J.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw H.ioore(a, less);
          t2 = a[less];
          if (k >= t1)
            throw H.ioore(a, k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw H.ioore(a, great);
          if (J.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw H.ioore(a, great);
            t1 = J.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw H.ioore(a, less);
              t1 = a[less];
              if (k >= t2)
                throw H.ioore(a, k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw H.ioore(a, great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw H.ioore(a, great);
              t1 = a[great];
              if (k >= t2)
                throw H.ioore(a, k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    pivots_are_equal = false;
  }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw H.ioore(a, t1);
  t3 = a[t1];
  if (left >= t2)
    throw H.ioore(a, left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw H.ioore(a, t1);
  t3 = a[t1];
  if (right >= t2)
    throw H.ioore(a, right);
  a[right] = t3;
  a[t1] = el4;
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw H.ioore(a, less);
      if (!J.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw H.ioore(a, great);
      if (!J.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw H.ioore(a, k);
      ak = a[k];
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw H.ioore(a, less);
          t2 = a[less];
          if (k >= t1)
            throw H.ioore(a, k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw H.ioore(a, great);
          if (J.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw H.ioore(a, great);
            t1 = J.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw H.ioore(a, less);
              t1 = a[less];
              if (k >= t2)
                throw H.ioore(a, k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw H.ioore(a, great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw H.ioore(a, great);
              t1 = a[great];
              if (k >= t2)
                throw H.ioore(a, k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

"+_dualPivotQuicksort:4:0": 1,

Sort__dualPivotQuicksort$bailout: function(state0, a, compare, right, left) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0) === true) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0) === true) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0) === true) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new H.ListIterator(this, this.get$length(this), 0, null);
  },
  "+iterator": 1,
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(new P.ConcurrentModificationError(this));
    }
  },
  "+forEach:1:0": 1,
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  "+isEmpty": 1,
  get$first: function(_) {
    if (J.$eq(this.get$length(this), 0))
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, 0);
  },
  "+first": 1,
  get$last: function(_) {
    if (J.$eq(this.get$length(this), 0))
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, J.$sub$n(this.get$length(this), 1));
  },
  "+last": 1,
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (J.$eq(this.elementAt$1(this, i), element))
        return true;
      if ($length !== this.get$length(this))
        throw H.wrapException(new P.ConcurrentModificationError(this));
    }
    return false;
  },
  "+contains:1:0": 1,
  join$1: function(_, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(this);
    if (separator.length !== 0) {
      t1 = J.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = H.S(this.elementAt$1(this, 0));
      if (!t1.$eq($length, this.get$length(this)))
        throw H.wrapException(new P.ConcurrentModificationError(this));
      buffer = P.StringBuffer$(first);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw H.wrapException(new P.ConcurrentModificationError(this));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw H.wrapException(new P.ConcurrentModificationError(this));
      }
      return buffer._contents;
    }
  },
  "+join:1:0": 1,
  "*join": [10],
  where$1: function(_, test) {
    return P.IterableBase.prototype.where$1.call(this, this, test);
  },
  "+where:1:0": 1,
  map$1: function(_, f) {
    var t1 = new H.MappedListIterable(this, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  "+map:1:0": 1,
  fold$2: function(_, initialValue, combine) {
    var $length, value, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    value = initialValue;
    i = 0;
    for (; i < $length; ++i) {
      value = combine.call$2(value, this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(new P.ConcurrentModificationError(this));
    }
    return value;
  },
  "+fold:2:0": 1,
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+ListIterable": [],

SubListIterable: {"": "ListIterable;_iterable-,_start-,_endOrLength-",
  get$_endIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || J.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  "+_endIndex": 1,
  get$_startIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (J.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  "+_startIndex": 1,
  get$length: function(_) {
    var $length, t1, t2;
    $length = J.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  "+length": 1,
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = J.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if (J.$ge$n(t1, $length) === true)
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || J.$ge$n(t2, $length) === true)
          return J.$sub$n($length, t1);
        return J.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + H.S(t1)));
    }
    return J.elementAt$1$ax(this._iterable, realIndex);
  },
  "+elementAt:1:0": 1,
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = J.$add$ns(t1, index);
        if (J.$lt$n(index, 0) !== true) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = J.$ge$n(realIndex, t1) === true;
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + H.S(t1)));
        }
        return J.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
    var t1, t2, t3;
    t1 = this._start;
    t2 = J.getInterceptor$n(t1);
    if (t2.$lt(t1, 0) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(t1)));
    t3 = this._endOrLength;
    if (t3 != null) {
      if (J.$lt$n(t3, 0) === true)
        throw H.wrapException(new P.RangeError("value " + H.S(t3)));
      if (t2.$gt(t1, t3) === true)
        throw H.wrapException(new P.RangeError("value " + H.S(t1) + " not in range 0.." + H.S(t3)));
    }
  },
  $asListIterable: null,
  $asIterable: null,
  static: {
SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
  var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
  return t1;
},

"+new SubListIterable:3:0": 1}

},

"+SubListIterable": [],

ListIterator: {"": "Object;_iterable-,_liblib$_length-,_index-,_liblib$_current-",
  get$current: function() {
    return this._liblib$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!J.$eq(this._liblib$_length, $length))
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  },
  "+moveNext:0:0": 1
},

"+ListIterator": [35],

MappedIterable: {"": "IterableBase;_iterable-,_f-",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  "+iterator": 1,
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  "+length": 1,
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  "+isEmpty": 1,
  get$first: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$first(t1));
  },
  "+first": 1,
  get$last: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$last(t1));
  },
  "+last": 1,
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  }
},

"+MappedIterable": [],

MappedIterator: {"": "Iterator;_liblib$_current-,_iterator-,_f-",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  "+moveNext:0:0": 1,
  get$current: function() {
    return this._liblib$_current;
  },
  "+current": 1,
  $asIterator: function($S, $T) {
    return [$T];
  }
},

"+MappedIterator": [],

MappedListIterable: {"": "ListIterable;_liblib$_source-,_f-",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._liblib$_source);
  },
  "+length": 1,
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._liblib$_source, index));
  },
  "+elementAt:1:0": 1,
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  }
},

"+MappedListIterable": [],

WhereIterable: {"": "IterableBase;_iterable-,_f-",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  "+iterator": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+WhereIterable": [],

WhereIterator: {"": "Iterator;_iterator-,_f-",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  "+moveNext:0:0": 1,
  get$current: function() {
    return this._iterator.get$current();
  },
  "+current": 1,
  $asIterator: null
},

"+WhereIterator": [],

ExpandIterable: {"": "IterableBase;_iterable-,_f-",
  get$iterator: function(_) {
    return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
  },
  "+iterator": 1,
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  }
},

"+ExpandIterable": [],

ExpandIterator: {"": "Object;_iterator-,_f-,_currentExpansion-,_liblib$_current-",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._liblib$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    if (this._currentExpansion == null)
      return false;
    for (var t1 = this._iterator; this._currentExpansion.moveNext$0() !== true;) {
      this._liblib$_current = null;
      if (t1.moveNext$0() === true) {
        this._currentExpansion = null;
        this._currentExpansion = J.get$iterator$ax(this._f$1(t1.get$current()));
      } else
        return false;
    }
    this._liblib$_current = this._currentExpansion.get$current();
    return true;
  },
  "+moveNext:0:0": 1
},

"+ExpandIterator": [35],

EmptyIterator: {"": "Object;",
  moveNext$0: function() {
    return false;
  },
  "+moveNext:0:0": 1,
  get$current: function() {
    return;
  },
  "+current": 1
},

"+EmptyIterator": [35],

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
  },
  "+length=": 1,
  add$1: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
  },
  "+add:1:0": 1,
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
  },
  "+addAll:1:0": 1,
  remove$1: function(receiver, element) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, H.FixedLengthListMixin.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(receiver) {
    throw H.wrapException(new P.UnsupportedError("Cannot clear a fixed-length list"));
  },
  "+clear:0:0": 1,
  removeAt$1: function(receiver, index) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
  },
  "+removeAt:1:0": 1,
  removeLast$0: function(receiver) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
  },
  "+removeLast:0:0": 1
},

"+FixedLengthListMixin": [],

ReversedListIterable: {"": "ListIterable;_liblib$_source-",
  get$length: function(_) {
    return J.get$length$asx(this._liblib$_source);
  },
  "+length": 1,
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = this._liblib$_source;
    t2 = J.getInterceptor$asx(t1);
    t3 = t2.get$length(t1);
    if (typeof index !== "number")
      throw H.iae(index);
    return t2.elementAt$1(t1, t3 - 1 - index);
  },
  "+elementAt:1:0": 1,
  $asListIterable: null,
  $asIterable: null
},

"+ReversedListIterable": [],

Symbol0: {"": "Object;_name<-",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isSymbol0 && J.$eq(this._name, other._name);
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    var t1 = J.get$hashCode$(this._name);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return 536870911 & 664597 * t1;
  },
  "+hashCode": 1,
  toString$0: function(_) {
    return "Symbol(\"" + H.S(this._name) + "\")";
  },
  "+toString:0:0": 1,
  $isSymbol0: true,
  $isSymbol: true,
  static: {
"": "Symbol_validationPattern-",
}

},

"+Symbol": [36]}],
["dart._js_names", "dart:_js_names", , H, {
computeMangledNames: function(jsMangledNames, isGlobal) {
  var keys, result, t1, t2, key, value, t3;
  keys = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(jsMangledNames, Object.prototype.hasOwnProperty);
  result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  for (t1 = J.get$iterator$ax(keys), t2 = !isGlobal; t1.moveNext$0();) {
    key = t1.get$current();
    value = jsMangledNames[key];
    result.$indexSet(result, key, value);
    if (t2) {
      t3 = J.getInterceptor$s(key);
      if (t3.startsWith$1(key, "get$") === true)
        result.$indexSet(result, "set$" + H.S(t3.substring$1(key, 4)), value + "=");
    }
  }
  return result;
},

"+computeMangledNames:2:0": 1,

unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
},

"+unmangleGlobalNameIfPreservedAnyways:1:0": 1}],
["dart.async", "dart:async", , P, {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

"+_attachStackTrace:2:0": 1,

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

"+getAttachedStackTrace:1:0": 1,

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._liblib1$_head !== t1._liblib1$_tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.Duration_0.get$inMilliseconds();
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

"+_asyncRunCallback:0:0": 1,

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

"+_scheduleAsyncCallback:1:0": 1,

runAsync: function(callback) {
  var t1;
  if (J.$eq($.Zone__current, C._CustomizedZone_WYN)) {
    $.Zone__current.scheduleMicrotask$1(callback);
    return;
  }
  t1 = $.Zone__current;
  t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
},

"+runAsync:1:0": 1,

Future_Future$sync: function(computation, $T) {
  var result, T0, error, stackTrace, t1, exception;
  try {
    result = computation.call$0();
    t1 = P._Future$immediate(result, T0);
    return t1;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    error = t1;
    stackTrace = new H._StackTrace(exception, null);
    return P._Future$immediateError(error, stackTrace, T0);
  }

},

"+new Future$sync:1:0": 1,

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._liblib$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    future.catchError$1(t2).then$1(new P.Future_wait_closure(t1, pos));
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

"+wait:1:0": 1,

Future_forEach: function(input, f) {
  var doneSignal = P._Future$(null);
  new P.Future_forEach_nextElement(f, doneSignal, J.get$iterator$ax(input)).call$1(null);
  return doneSignal;
},

"+forEach:2:0": 1,

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._liblib5$_previous = t1;
    t1._liblib5$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._liblib5$_previous = t1;
    t1._liblib5$_next = t1;
  }
  return t1;
},

"+new StreamController$broadcast:0:3:onCancel:onListen:sync": 1,

"*broadcast": [0, 0, 1],

_runGuarded: function(notificationHandler) {
  var e, s, exception, t1;
  if (notificationHandler == null)
    return;
  try {
    notificationHandler.call$0();
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    $.Zone__current.handleUncaughtError$1(P._asyncError(e, s));
  }

},

"+_runGuarded:1:0": 1,

_nullDataHandler: function(value) {
},

"+_nullDataHandler:1:0": 1,

_nullErrorHandler: function(error) {
  $.Zone__current.handleUncaughtError$1(error);
},

"+_nullErrorHandler:1:0": 1,

_nullDoneHandler: function() {
},

"+_nullDoneHandler:0:0": 1,

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if (P.getAttachedStackTrace(error) != null)
    return error;
  P._attachStackTrace(error, stackTrace);
  return error;
},

"+_asyncError:2:0": 1,

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$1(P._asyncError(e, s));
  }

},

"+_runUserCode:3:0": 1,

_cancelAndError: function(subscription, future) {
  return new P._cancelAndError_closure(subscription, future);
},

"+_cancelAndError:2:0": 1,

Timer_Timer: function(duration, callback) {
  var t1;
  if (J.$eq($.Zone__current, C._CustomizedZone_WYN))
    return $.Zone__current.createTimer$2(duration, callback);
  t1 = $.Zone__current;
  return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
},

"+new Timer:2:0": 1,

_createTimer: function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  return H.TimerImpl$(J.$lt$n(milliseconds, 0) === true ? 0 : milliseconds, callback);
},

"+_createTimer:2:0": 1,

_createPeriodicTimer: function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  return H.TimerImpl$periodic(J.$lt$n(milliseconds, 0) === true ? 0 : milliseconds, callback);
},

"+_createPeriodicTimer:2:0": 1,

_rootHandleUncaughtError: function($self, $parent, zone, error) {
  P._scheduleAsyncCallback(new P._rootHandleUncaughtError_closure(error));
},

"+_rootHandleUncaughtError:4:0": 1,

_rootRun: function($self, $parent, zone, f) {
  var old, t1;
  if (J.$eq($.Zone__current, zone))
    return f.call$0();
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

"+_rootRun:4:0": 1,

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1;
  if (J.$eq($.Zone__current, zone))
    return f.call$1(arg);
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

"+_rootRunUnary:5:0": 1,

_rootRegisterCallback: function($self, $parent, zone, f) {
  return f;
},

"+_rootRegisterCallback:4:0": 1,

_rootRegisterUnaryCallback: function($self, $parent, zone, f) {
  return f;
},

"+_rootRegisterUnaryCallback:4:0": 1,

_rootScheduleMicrotask: function($self, $parent, zone, f) {
  P._scheduleAsyncCallback(f);
},

"+_rootScheduleMicrotask:4:0": 1,

_rootCreateTimer: function($self, $parent, zone, duration, callback) {
  return P._createTimer(duration, callback);
},

"+_rootCreateTimer:5:0": 1,

_rootCreatePeriodicTimer: function($self, $parent, zone, duration, callback) {
  return P._createPeriodicTimer(duration, callback);
},

"+_rootCreatePeriodicTimer:5:0": 1,

_rootFork: function($self, $parent, zone, specification, zoneValues) {
  var t1, copiedMap;
  if (specification == null)
    specification = C._ZoneSpecification_eLJ;
  else {
    t1 = J.getInterceptor(specification);
    if (typeof specification !== "object" || specification === null || !t1.$is_ZoneSpecification)
      throw H.wrapException(new P.ArgumentError("ZoneSpecifications must be instantiated with the provided constructor."));
  }
  copiedMap = P.HashMap_HashMap(null, null, null, null, null);
  if (zoneValues != null)
    J.forEach$1$ax(zoneValues, new P._rootFork_closure(copiedMap));
  return new P._CustomizedZone(zone, specification, copiedMap);
},

"+_rootFork:5:0": 1,

_BroadcastStream: {"": "_ControllerStream;_liblib5$_controller-", $as_ControllerStream: null, $asStream: null},

"+_BroadcastStream": [],

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState@-,_liblib5$_next@-,_liblib5$_previous@-,_liblib5$_controller-,_onData-,_onError-,_onDone-,_zone-,_state-,_pending-",
  get$_liblib5$_controller: function() {
    return this._liblib5$_controller;
  },
  "+_controller": 1,
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  "+_expectsEvent:1:0": 1,
  _toggleEventId$0: function() {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$xor();
    this._eventState = (t1 ^ 1) >>> 0;
  },
  "+_toggleEventId:0:0": 1,
  get$_isFiring: function() {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$and();
    return (t1 & 2) !== 0;
  },
  "+_isFiring": 1,
  _setRemoveAfterFiring$0: function() {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$or();
    this._eventState = (t1 | 4) >>> 0;
  },
  "+_setRemoveAfterFiring:0:0": 1,
  get$_removeAfterFiring: function() {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$and();
    return (t1 & 4) !== 0;
  },
  "+_removeAfterFiring": 1,
  _onPause$0: function() {
  },
  "+_onPause:0:0": 1,
  get$_onPause: function() {
    return new P.Bound__onPause__BroadcastSubscription(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  "+_onResume:0:0": 1,
  get$_onResume: function() {
    return new P.Bound__onResume__BroadcastSubscription(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  $asStreamSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID-,_BroadcastSubscription__STATE_FIRING-,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING-",
}

},

"+_BroadcastSubscription": [37],

_BroadcastStreamController: {"": "Object;_liblib5$_next@-,_liblib5$_previous@-",
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  "+_ensureDoneFuture:0:0": 1,
  _addListener$1: function(subscription) {
    subscription._liblib5$_previous = this._liblib5$_previous;
    subscription._liblib5$_next = this;
    this._liblib5$_previous.set$_liblib5$_next(subscription);
    this._liblib5$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  "+_addListener:1:0": 1,
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription.get$_liblib5$_previous();
    next = subscription.get$_liblib5$_next();
    previous.set$_liblib5$_next(next);
    next.set$_liblib5$_previous(previous);
    subscription.set$_liblib5$_previous(subscription);
    subscription.set$_liblib5$_next(subscription);
  },
  "+_removeListener:1:0": 1,
  _subscribe$4: function(onData, onError, onDone, cancelOnError) {
    var t1, t2, t3, t4, t5, t6, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = t2.registerUnaryCallback$1(onData);
    t4 = $.Zone__current.registerUnaryCallback$1(onError);
    t5 = $.Zone__current.registerCallback$1(onDone);
    t6 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, t3, t4, t5, t2, t6, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
    subscription._liblib5$_previous = subscription;
    subscription._liblib5$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._liblib5$_next;
    t2 = this._liblib5$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  "+_subscribe:4:0": 1,
  _recordCancel$1: function(subscription) {
    if (subscription.get$_liblib5$_next() === subscription)
      return;
    if (subscription.get$_isFiring())
      subscription._setRemoveAfterFiring$0();
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._liblib5$_next === this)
        this._callOnCancel$0();
    }
  },
  "+_recordCancel:1:0": 1,
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  "+_addEventError:0:0": 1,
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  "+add:1:0": 1,
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P._BroadcastStreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    this._sendError$1(error);
  },
  "+addError:2:0": 1,
  "*addError": [0],
  get$addError: function() {
    return new P.Bound_addError__BroadcastStreamController(this, P._BroadcastStreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  "+close:0:0": 1,
  _liblib5$_add$1: function(data) {
    this._sendData$1(data);
  },
  "+_add:1:0": 1,
  _addError$1: function(error) {
    this._sendError$1(error);
  },
  "+_addError:1:0": 1,
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  "+_close:0:0": 1,
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._liblib5$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._liblib5$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link.get$_eventState();
        if (t1 == null)
          throw t1.$or();
        link.set$_eventState((t1 | 2) >>> 0);
        action.call$1(link);
        link._toggleEventId$0();
        link0 = link.get$_liblib5$_next();
        if (link.get$_removeAfterFiring())
          this._removeListener$1(link);
        t1 = link.get$_eventState();
        if (t1 == null)
          throw t1.$and();
        link.set$_eventState((t1 & 4294967293) >>> 0);
        link = link0;
      } else
        link = link.get$_liblib5$_next();
    this._state = (this._state & 4294967293) >>> 0;
    if (this._liblib5$_next === this)
      this._callOnCancel$0();
  },
  "+_forEachListener:1:0": 1,
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  },
  "+_callOnCancel:0:0": 1
},

"+_BroadcastStreamController": [38, 39, 37, 40, 41],

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen-,_onCancel-,_state-,_liblib5$_next-,_liblib5$_previous-,_addStreamState-,_doneFuture-",
  _sendData$1: function(data) {
    if (this._liblib5$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  "+_sendData:1:0": 1,
  _sendError$1: function(error) {
    if (this._liblib5$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error));
  },
  "+_sendError:1:0": 1,
  _sendDone$0: function() {
    if (this._liblib5$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  "+_sendDone:0:0": 1,
  $as_BroadcastStreamController: null
},

"+_SyncBroadcastStreamController": [],

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0-,data_1-",
  call$1: function(subscription) {
    subscription._liblib5$_add$1(this.data_1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_SyncBroadcastStreamController__sendData_closure": [],

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0-,error_1-",
  call$1: function(subscription) {
    subscription._addError$1(this.error_1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_SyncBroadcastStreamController__sendError_closure": [],

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0-",
  call$1: function(subscription) {
    subscription._close$0();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_SyncBroadcastStreamController__sendDone_closure": [],

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen-,_onCancel-,_state-,_liblib5$_next-,_liblib5$_previous-,_addStreamState-,_doneFuture-",
  _sendData$1: function(data) {
    var link;
    for (link = this._liblib5$_next; link !== this; link = link.get$_liblib5$_next())
      link._addPending$1(new P._DelayedData(data, null));
  },
  "+_sendData:1:0": 1,
  _sendError$1: function(error) {
    var link;
    for (link = this._liblib5$_next; link !== this; link = link.get$_liblib5$_next())
      link._addPending$1(new P._DelayedError(error, null));
  },
  "+_sendError:1:0": 1,
  _sendDone$0: function() {
    var link = this._liblib5$_next;
    if (link !== this)
      for (; link !== this; link = link.get$_liblib5$_next())
        link._addPending$1(C.C__DelayedDone);
    else
      this._doneFuture._asyncComplete$1(null);
  },
  "+_sendDone:0:0": 1,
  $as_BroadcastStreamController: null
},

"+_AsyncBroadcastStreamController": [],

Future: {"": "Object;", $isFuture: true},

"+Future": [],

Future_wait_handleError: {"": "Closure;box_0-",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, null);
    }
    return;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Future_wait_handleError": [],

Future_wait_closure: {"": "Closure;box_0-,pos_1-",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Future_wait_closure": [],

Future_forEach_nextElement: {"": "Closure;f_0-,doneSignal_1-,iterator_2-",
  call$1: function(_) {
    var t1, t2;
    t1 = this.iterator_2;
    t2 = this.doneSignal_1;
    if (t1.moveNext$0() === true)
      P.Future_Future$sync(new P.Future_forEach_nextElement_closure(this.f_0, t1), null).then$2$onError(this, t2.get$_completeError());
    else
      t2._complete$1(null);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Future_forEach_nextElement": [],

Future_forEach_nextElement_closure: {"": "Closure;f_3-,iterator_4-",
  call$0: function() {
    return this.f_3.call$1(this.iterator_4.get$current());
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Future_forEach_nextElement_closure": [],

_Completer: {"": "Object;"},

"+_Completer": [42],

_AsyncCompleter: {"": "_Completer;future-", $as_Completer: null},

"+_AsyncCompleter": [],

_Future: {"": "Object;_state-,_zone<-,_resultOrListeners-,_nextListener@-,_onValueCallback-,_errorTestCallback-,_onErrorCallback-,_whenCompleteActionCallback-",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  "+_isComplete": 1,
  get$_hasError: function() {
    return this._state === 8;
  },
  "+_hasError": 1,
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  "+_isChained=": 1,
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  "+_onValue": 1,
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_errorTest: function() {
    return this._state === 2 ? null : this._errorTestCallback;
  },
  "+_errorTest": 1,
  get$_onError: function() {
    return this._state === 2 ? null : this._onErrorCallback;
  },
  "+_onError": 1,
  _onError$1: function(arg0) {
    return this.get$_onError().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  "+_whenCompleteAction": 1,
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  "+then:1:1:onError": 1,
  "*then": [0],
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  "+then:1:0": 1,
  catchError$2$test: function(f, test) {
    var result = P._Future$_catchError(f, test, null);
    this._addListener$1(result);
    return result;
  },
  "+catchError:1:1:test": 1,
  "*catchError": [0],
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  "+catchError:1:0": 1,
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  "+whenComplete:1:0": 1,
  get$_liblib5$_value: function() {
    return this._resultOrListeners;
  },
  "+_value": 1,
  get$_error: function() {
    return this._resultOrListeners;
  },
  "+_error": 1,
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  "+_setValue:1:0": 1,
  _setError$1: function(error) {
    this._state = 8;
    this._resultOrListeners = error;
  },
  "+_setError:1:0": 1,
  _addListener$1: function(listener) {
    if (this._state >= 4)
      this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
    else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  "+_addListener:1:0": 1,
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  "+_removeListeners:0:0": 1,
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  "+_complete:1:0": 1,
  _completeError$2: function(error, stackTrace) {
    var listeners;
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    listeners = this._state === 2 ? null : this._removeListeners$0();
    this._setError$1(error);
    P._Future__propagateToListeners(this, listeners);
  },
  "+_completeError:2:0": 1,
  "*_completeError": [0],
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  "+_completeError:1:0": 1,
  get$_completeError: function() {
    return new P.Bound__completeError__Future(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    var t1, t2;
    t1 = J.getInterceptor(value);
    t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
    if (t2)
      ;
    if (t2)
      t1 = !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
  },
  "+_asyncComplete:1:0": 1,
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  "+_asyncCompleteError:2:0": 1,
  "*_asyncCompleteError": [0],
  _Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  _Future$immediateError$2: function(error, stackTrace, $T) {
    this._asyncCompleteError$2(error, stackTrace);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE-,_Future__PENDING_COMPLETE-,_Future__CHAINED-,_Future__VALUE-,_Future__ERROR-",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

"+new _Future:0:0": 1,

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._Future$immediate$1(value, $T);
  return t1;
},

"+new _Future$immediate:1:0": 1,

_Future$immediateError: function(error, stackTrace, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._Future$immediateError$2(error, stackTrace, $T);
  return t1;
},

"+new _Future$immediateError:2:0": 1,

"*immediateError": [0],

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1 = new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(onValueCallback), null, $.Zone__current.registerUnaryCallback$1(onErrorCallback), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

"+new _Future$_then:2:0": 1,

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = t1.registerUnaryCallback$1(onErrorCallback);
  t2 = new P._Future(0, t1, null, null, null, $.Zone__current.registerUnaryCallback$1(errorTestCallback), t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

"+new _Future$_catchError:2:0": 1,

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1 = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(whenCompleteActionCallback));
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

"+new _Future$_whenComplete:1:0": 1,

_Future__chainFutures: function(source, target) {
  var t1;
  target.set$_isChained(true);
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

"+_chainFutures:2:0": 1,

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners.set$_nextListener(null);
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

"+_propagateMultipleListeners:2:0": 1,

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (t1.source_4.get$_isComplete() !== true)
      return;
    hasError = t1.source_4.get$_hasError();
    t3 = hasError === true;
    if (t3 && listeners == null) {
      t1.source_4.get$_zone().handleUncaughtError$1(t1.source_4.get$_error());
      return;
    }
    if (listeners == null)
      return;
    if (listeners.get$_nextListener() != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (t3 && t1.source_4.get$_zone().inSameErrorZone$1(listeners.get$_zone()) !== true) {
      t1.source_4.get$_zone().handleUncaughtError$1(t1.source_4.get$_error());
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners.get$_zone();
    if (t3 == null ? t4 != null : t3 !== t4) {
      listeners.get$_zone().run$1(new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    listeners.get$_zone().run$1(new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners.set$_isChained(true);
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      listeners._setValue$1(t2.listenerValueOrError_2);
    } else {
      listeners0 = listeners._removeListeners$0();
      listeners._setError$1(t2.listenerValueOrError_2);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
},

"+_propagateToListeners:2:0": 1}

},

"+_Future": [43],

_Future__addListener_closure: {"": "Closure;this_0-,listener_1-",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Future__addListener_closure": [],

_Future__chainFutures_closure: {"": "Closure;target_0-",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_Future__chainFutures_closure": [],

_Future__chainFutures_closure0: {"": "Closure;target_1-",
  call$1: function(error) {
    this.target_1._completeError$1(error);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_Future__chainFutures_closure": [],

_Future__asyncComplete_closure: {"": "Closure;this_0-,value_1-",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Future__asyncComplete_closure": [],

_Future__asyncCompleteError_closure: {"": "Closure;this_0-,error_1-,stackTrace_2-",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Future__asyncCompleteError_closure": [],

_Future__propagateToListeners_closure: {"": "Closure;box_2-,listener_3-",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Future__propagateToListeners_closure": [],

_Future__propagateToListeners_closure0: {"": "Closure;box_2-,box_1-,hasError_4-,listener_5-",
  call$0: function() {
    var t1, value, error, test, matchesTest, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (this.hasError_4 !== true) {
        value = t2.source_4.get$_liblib5$_value();
        t2 = this.listener_5;
        t3 = this.box_1;
        if (t2.get$_onValue() != null) {
          t3.listenerValueOrError_2 = t2._onValue$1(value);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = value;
          t3.listenerHasValue_1 = true;
        }
      } else {
        error = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2.get$_errorTest();
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(error);
        t3 = matchesTest === true && t2.get$_onError() != null;
        t4 = this.box_1;
        if (t3) {
          t4.listenerValueOrError_2 = t2._onError$1(error);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = error;
          t4.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if (t2.get$_whenCompleteAction() != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = this.box_1;
      t1.listenerValueOrError_2 = P._asyncError(e, s);
      t1.listenerHasValue_1 = false;
    }

  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Future__propagateToListeners_closure": [],

_Future__propagateToListeners__closure: {"": "Closure;box_2-,listener_6-",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_Future__propagateToListeners__closure": [],

_Future__propagateToListeners__closure0: {"": "Closure;box_0-,listener_7-",
  call$1: function(error) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$1(error);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_Future__propagateToListeners__closure": [],

Stream: {"": "Object;",
  where$1: function(_, test) {
    var t1 = new P._WhereStream(test, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    return t1;
  },
  "+where:1:0": 1,
  map$1: function(_, convert) {
    var t1 = new P._MapStream(convert, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    return t1;
  },
  "+map:1:0": 1,
  join$1: function(_, separator) {
    var t1, result, buffer;
    t1 = {};
    result = P._Future$(J.JSString);
    buffer = P.StringBuffer$("");
    t1.subscription_0 = null;
    t1.first_1 = true;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
    return result;
  },
  "+join:1:0": 1,
  "*join": [10],
  contains$1: function(_, needle) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
    return future;
  },
  "+contains:1:0": 1,
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  "+forEach:1:0": 1,
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
    return future;
  },
  "+isEmpty": 1,
  toList$0: function(_) {
    var result, future;
    result = [];
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  },
  "+toList:0:0": 1,
  get$first: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
    return future;
  },
  "+first": 1,
  get$last: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
    return future;
  },
  "+last": 1,
  $isStream: true
},

"+Stream": [],

Stream_join_closure: {"": "Closure;box_0-,this_1-,separator_2-,result_3-,buffer_4-",
  call$1: function(element) {
    var e, s, t1, exception, t2;
    t1 = this.box_0;
    if (!t1.first_1)
      this.buffer_4.write$1(this.separator_2);
    t1.first_1 = false;
    try {
      this.buffer_4.write$1(element);
    } catch (exception) {
      t2 = H.unwrapException(exception);
      e = t2;
      s = new H._StackTrace(exception, null);
      t1.subscription_0.cancel$0();
      this.result_3._completeError$1(P._asyncError(e, s));
    }

  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_join_closure": [],

Stream_join_closure1: {"": "Closure;result_5-",
  call$1: function(e) {
    this.result_5._completeError$1(e);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_join_closure": [],

Stream_join_closure0: {"": "Closure;result_6-,buffer_7-",
  call$0: function() {
    this.result_6._complete$1(this.buffer_7._contents);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_join_closure": [],

Stream_contains_closure: {"": "Closure;box_0-,this_1-,needle_2-,future_3-",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndError(t1.subscription_0, t2));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_contains_closure": [],

Stream_contains__closure: {"": "Closure;needle_4-,element_5-",
  call$0: function() {
    return J.$eq(this.element_5, this.needle_4);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_contains__closure": [],

Stream_contains__closure0: {"": "Closure;box_0-,future_6-",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_6._complete$1(true);
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_contains__closure": [],

Stream_contains_closure0: {"": "Closure;future_7-",
  call$0: function() {
    this.future_7._complete$1(false);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_contains_closure": [],

Stream_forEach_closure: {"": "Closure;box_0-,this_1-,action_2-,future_3-",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndError(this.box_0.subscription_0, this.future_3));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_forEach_closure": [],

Stream_forEach__closure: {"": "Closure;action_4-,element_5-",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_forEach__closure": [],

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_forEach__closure": [],

Stream_forEach_closure0: {"": "Closure;future_6-",
  call$0: function() {
    this.future_6._complete$1(null);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_forEach_closure": [],

Stream_length_closure: {"": "Closure;box_0-",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_length_closure": [],

Stream_length_closure0: {"": "Closure;box_0-,future_1-",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_length_closure": [],

Stream_isEmpty_closure: {"": "Closure;box_0-,future_1-",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._complete$1(false);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_isEmpty_closure": [],

Stream_isEmpty_closure0: {"": "Closure;future_2-",
  call$0: function() {
    this.future_2._complete$1(true);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_isEmpty_closure": [],

Stream_toList_closure: {"": "Closure;this_0-,result_1-",
  call$1: function(data) {
    this.result_1.push(data);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_toList_closure": [],

Stream_toList_closure0: {"": "Closure;result_2-,future_3-",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_toList_closure": [],

Stream_first_closure: {"": "Closure;box_0-,this_1-,future_2-",
  call$1: function(value) {
    this.box_0.subscription_0.cancel$0();
    this.future_2._complete$1(value);
    return;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_first_closure": [],

Stream_first_closure0: {"": "Closure;future_3-",
  call$0: function() {
    this.future_3._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_first_closure": [],

Stream_last_closure: {"": "Closure;box_0-,this_1-",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Stream_last_closure": [],

Stream_last_closure0: {"": "Closure;box_0-,future_2-",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_2._complete$1(t1.result_0);
      return;
    }
    this.future_2._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Stream_last_closure": [],

StreamSubscription: {"": "Object;", $isStreamSubscription: true},

"+StreamSubscription": [],

EventSink: {"": "Object;"},

"+EventSink": [],

_ControllerStream: {"": "_StreamImpl;",
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return this._liblib5$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
  },
  "+_createSubscription:4:0": 1,
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._liblib5$_controller) ^ 892482866) >>> 0;
  },
  "+hashCode": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._liblib5$_controller === this._liblib5$_controller;
  },
  "+==:1:0": 1,
  $is_ControllerStream: true,
  $as_StreamImpl: null,
  $asStream: null
},

"+_ControllerStream": [],

_ControllerSubscription: {"": "_BufferingStreamSubscription;_liblib5$_controller<-",
  _onCancel$0: function() {
    this.get$_liblib5$_controller()._recordCancel$1(this);
  },
  "+_onCancel:0:0": 1,
  _onPause$0: function() {
    this.get$_liblib5$_controller();
  },
  "+_onPause:0:0": 1,
  get$_onPause: function() {
    return new P.Bound__onPause__ControllerSubscription(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_liblib5$_controller();
  },
  "+_onResume:0:0": 1,
  get$_onResume: function() {
    return new P.Bound__onResume__ControllerSubscription(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null,
  $asStreamSubscription: null
},

"+_ControllerSubscription": [],

_EventSink: {"": "Object;"},

"+_EventSink": [],

_BufferingStreamSubscription: {"": "Object;_onData-,_onError<-,_onDone-,_zone<-,_state-,_pending-",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 64 | 4) >>> 0;
    if (t1 < 64 && this._pending != null) {
      t2 = this._pending;
      t2.cancelSchedule$0;
      if (t2._state === 1)
        t2._state = 3;
    }
    if ((t1 & 4) === 0 && (this._state & 16) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  "+pause:1:0": 1,
  "*pause": [0],
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  "+pause:0:0": 1,
  resume$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 64) {
      this._state = t1 - 64;
      t1 = this._state;
      if (t1 < 64)
        if ((t1 & 32) !== 0 && this._pending.lastPendingEvent != null)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 16) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
    }
  },
  "+resume:0:0": 1,
  cancel$0: function() {
    if ((this._state & 8) !== 0)
      return;
    this._cancel$0();
    var t1 = this._state;
    if ((t1 & 16) === 0) {
      this._state = (t1 | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  "+cancel:0:0": 1,
  get$_mayResumeInput: function() {
    if (this._state < 64) {
      var t1 = this._pending;
      t1 = t1 == null || t1.lastPendingEvent == null;
    } else
      t1 = false;
    return t1;
  },
  "+_mayResumeInput": 1,
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 32) !== 0) {
      var t1 = this._pending;
      t1.cancelSchedule$0;
      if (t1._state === 1)
        t1._state = 3;
    }
  },
  "+_cancel:0:0": 1,
  _liblib5$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  "+_add:1:0": 1,
  _addError$1: function(error) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendError$1(error);
    else
      this._addPending$1(new P._DelayedError(error, null));
  },
  "+_addError:1:0": 1,
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 16)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  "+_close:0:0": 1,
  _onPause$0: function() {
  },
  "+_onPause:0:0": 1,
  get$_onPause: function() {
    return new P.Bound__onPause__BufferingStreamSubscription(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  "+_onResume:0:0": 1,
  get$_onResume: function() {
    return new P.Bound__onResume__BufferingStreamSubscription(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  "+_onCancel:0:0": 1,
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 32) === 0) {
      this._state = (t1 | 32) >>> 0;
      if (this._state < 64)
        this._pending.schedule$1(this);
    }
  },
  "+_addPending:1:0": 1,
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    this._zone.runUnaryGuarded$2(this._onData, data);
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  "+_sendData:1:0": 1,
  _sendError$1: function(error) {
    var t1, t2;
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    t2 = this._zone;
    if (t2.inSameErrorZone$1($.Zone__current) !== true)
      $.Zone__current.handleUncaughtError$1(error);
    else
      t2.runUnaryGuarded$2(this._onError, error);
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 1) !== 0)
      this._cancel$0();
    this._checkState$1((t1 & 4) !== 0);
  },
  "+_sendError:1:0": 1,
  _sendDone$0: function() {
    this._state = (this._state | 26) >>> 0;
    this._zone.runGuarded$1(this._onDone);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  "+_sendDone:0:0": 1,
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  "+_guardCallback:1:0": 1,
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    t1 = this._state;
    if ((t1 & 32) !== 0 && this._pending.lastPendingEvent == null) {
      this._state = (t1 & 4294967263) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 32) !== 0 && t1 < 64)
      this._pending.schedule$1(this);
  },
  "+_checkState:1:0": 1,
  _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
  },
  $isStreamSubscription: true,
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR-,_BufferingStreamSubscription__STATE_CLOSED-,_BufferingStreamSubscription__STATE_INPUT_PAUSED-,_BufferingStreamSubscription__STATE_CANCELED-,_BufferingStreamSubscription__STATE_IN_CALLBACK-,_BufferingStreamSubscription__STATE_HAS_PENDING-,_BufferingStreamSubscription__STATE_PAUSE_COUNT-,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT-",
_BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
  var t1, t2, t3, t4, t5;
  t1 = $.Zone__current;
  t2 = t1.registerUnaryCallback$1(onData);
  t3 = $.Zone__current.registerUnaryCallback$1(onError);
  t4 = $.Zone__current.registerCallback$1(onDone);
  t5 = cancelOnError ? 1 : 0;
  t5 = new P._BufferingStreamSubscription(t2, t3, t4, t1, t5, null);
  H.setRuntimeTypeInfo(t5, [$T]);
  t5._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
  return t5;
},

"+new _BufferingStreamSubscription:4:0": 1}

},

"+_BufferingStreamSubscription": [38, 39, 44],

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    if (onError == null)
      onError = P._nullErrorHandler$closure;
    if (onDone == null)
      onDone = P._nullDoneHandler$closure;
    return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
  },
  "+listen:1:3:cancelOnError:onDone:onError": 1,
  "*listen": [0, 0, 0],
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  "+listen:3:0:onDone:onError": 1,
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  "+listen:1:0": 1,
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_StreamImpl", 0));
  },
  "+_createSubscription:4:0": 1,
  $asStream: null
},

"+_StreamImpl": [],

_DelayedEvent: {"": "Object;next@-",
  next$0: function() {
    return this.next.call$0();
  }
},

"+_DelayedEvent": [],

_DelayedData: {"": "_DelayedEvent;value>-,next-",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  },
  "+perform:1:0": 1
},

"+_DelayedData": [],

_DelayedError: {"": "_DelayedEvent;error-,next-",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  },
  "+perform:1:0": 1
},

"+_DelayedError": [],

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  "+perform:1:0": 1,
  get$next: function() {
    return;
  },
  "+next": 1,
  next$0: function() {
    return this.get$next().call$0();
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  },
  "+next=": 1
},

"+_DelayedDone": [45],

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.runAsync(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  "+schedule:1:0": 1
},

"+_PendingEvents": [],

_PendingEvents_schedule_closure: {"": "Closure;this_0-,dispatch_1-",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_PendingEvents_schedule_closure": [],

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent-,lastPendingEvent-,_state-",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  "+isEmpty": 1,
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  "+add:1:0": 1,
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  "+handleNext:1:0": 1,
  clear$0: function(_) {
    if (this._state === 1)
      this._state = 3;
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  },
  "+clear:0:0": 1
},

"+_StreamImplEvents": [],

_cancelAndError_closure: {"": "Closure;subscription_0-,future_1-",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._completeError$1(error);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_cancelAndError_closure": [],

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    if (onError == null)
      onError = P._nullErrorHandler$closure;
    if (onDone == null)
      onDone = P._nullDoneHandler$closure;
    return P._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
  },
  "+listen:1:3:cancelOnError:onDone:onError": 1,
  "*listen": [0, 0, 0],
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  "+listen:3:0:onDone:onError": 1,
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  "+listen:1:0": 1,
  _handleData$2: function(data, sink) {
    sink._liblib5$_add$1(data);
  },
  "+_handleData:2:0": 1,
  $asStream: function($S, $T) {
    return [$T];
  }
},

"+_ForwardingStream": [],

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_liblib5$_stream-,_subscription-,_onData-,_onError-,_onDone-,_zone-,_state-,_pending-",
  _liblib5$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._liblib5$_add$1.call(this, data);
  },
  "+_add:1:0": 1,
  _addError$1: function(error) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  "+_addError:1:0": 1,
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  "+_onPause:0:0": 1,
  get$_onPause: function() {
    return new P.Bound__onPause__ForwardingStreamSubscription(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  "+_onResume:0:0": 1,
  get$_onResume: function() {
    return new P.Bound__onResume__ForwardingStreamSubscription(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  "+_onCancel:0:0": 1,
  _handleData$1: function(data) {
    this._liblib5$_stream._handleData$2(data, this);
  },
  "+_handleData:1:0": 1,
  get$_handleData: function() {
    return new P.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._addError$1(error);
  },
  "+_handleError:1:0": 1,
  get$_handleError: function() {
    return new P.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleError$1, null, "_handleError$1");
  },
  _handleDone$0: function() {
    this._close$0();
  },
  "+_handleDone:0:0": 1,
  get$_handleDone: function() {
    return new P.Bound__handleDone__ForwardingStreamSubscription(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._liblib5$_stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function($S, $T) {
    return [$T];
  },
  $asStreamSubscription: function($S, $T) {
    return [$T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
  var t1, t2, t3, t4, t5;
  t1 = $.Zone__current;
  t2 = t1.registerUnaryCallback$1(onData);
  t3 = $.Zone__current.registerUnaryCallback$1(onError);
  t4 = $.Zone__current.registerCallback$1(onDone);
  t5 = cancelOnError ? 1 : 0;
  t5 = new P._ForwardingStreamSubscription(_stream, null, t2, t3, t4, t1, t5, null);
  H.setRuntimeTypeInfo(t5, [$S, $T]);
  t5._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
  t5._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
  return t5;
},

"+new _ForwardingStreamSubscription:5:0": 1}

},

"+_ForwardingStreamSubscription": [],

_WhereStream: {"": "_ForwardingStream;_test-,_source-",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$1(P._asyncError(e, s));
      return;
    }

    if (satisfies === true)
      sink._liblib5$_add$1(inputEvent);
  },
  "+_handleData:2:0": 1,
  $as_ForwardingStream: function($T) {
    return [$T, $T];
  },
  $asStream: null
},

"+_WhereStream": [],

_MapStream: {"": "_ForwardingStream;_transform-,_source-",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$1(P._asyncError(e, s));
      return;
    }

    sink._liblib5$_add$1(outputEvent);
  },
  "+_handleData:2:0": 1,
  $as_ForwardingStream: null,
  $asStream: function($S, $T) {
    return [$T];
  }
},

"+_MapStream": [],

Timer: {"": "Object;"},

"+Timer": [],

ZoneSpecification: {"": "Object;"},

"+ZoneSpecification": [],

_ZoneSpecification: {"": "Object;handleUncaughtError<-,run<-,runUnary<-,registerCallback<-,registerUnaryCallback<-,scheduleMicrotask<-,createTimer<-,createPeriodicTimer-,fork-",
  handleUncaughtError$1: function(arg0) {
    return this.handleUncaughtError.call$1(arg0);
  },
  run$1: function(arg0) {
    return this.run.call$1(arg0);
  },
  registerCallback$1: function(arg0) {
    return this.registerCallback.call$1(arg0);
  },
  registerUnaryCallback$1: function(arg0) {
    return this.registerUnaryCallback.call$1(arg0);
  },
  scheduleMicrotask$1: function(arg0) {
    return this.scheduleMicrotask.call$1(arg0);
  },
  createTimer$2: function(arg0, arg1) {
    return this.createTimer.call$2(arg0, arg1);
  },
  $is_ZoneSpecification: true
},

"+_ZoneSpecification": [46],

ZoneDelegate: {"": "Object;"},

"+ZoneDelegate": [],

Zone: {"": "Object;"},

"+Zone": [],

_ZoneDelegate: {"": "Object;_degelationTarget-",
  get$_zone: function() {
    return this._degelationTarget;
  },
  "+_zone": 1,
  handleUncaughtError$2: function(zone, e) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification().get$handleUncaughtError(), t2 = J.getInterceptor$x($parent), t1 == null;)
      $parent = t2.get$parent($parent);
    return t1.call$4($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, e);
  },
  "+handleUncaughtError:2:0": 1,
  get$handleUncaughtError: function() {
    return new P.BoundClosure$2(this, P._ZoneDelegate.prototype.handleUncaughtError$2, null, "handleUncaughtError$2");
  },
  run$2: function(zone, f) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification().get$run(), t2 = J.getInterceptor$x($parent), t1 == null;)
      $parent = t2.get$parent($parent);
    return t1.call$4($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, f);
  },
  "+run:2:0": 1,
  get$run: function() {
    return new P.BoundClosure$2(this, P._ZoneDelegate.prototype.run$2, null, "run$2");
  },
  runUnary$3: function(zone, f, arg) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification().get$runUnary(), t2 = J.getInterceptor$x($parent), t1 == null;)
      $parent = t2.get$parent($parent);
    return t1.call$5($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, f, arg);
  },
  "+runUnary:3:0": 1,
  get$runUnary: function() {
    return new P.BoundClosure$3(this, P._ZoneDelegate.prototype.runUnary$3, null, "runUnary$3");
  },
  registerCallback$2: function(zone, f) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification().get$registerCallback(), t2 = J.getInterceptor$x($parent), t1 == null;)
      $parent = t2.get$parent($parent);
    return t1.call$4($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, f);
  },
  "+registerCallback:2:0": 1,
  get$registerCallback: function() {
    return new P.BoundClosure$2(this, P._ZoneDelegate.prototype.registerCallback$2, null, "registerCallback$2");
  },
  registerUnaryCallback$2: function(zone, f) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification().get$registerUnaryCallback(), t2 = J.getInterceptor$x($parent), t1 == null;)
      $parent = t2.get$parent($parent);
    return t1.call$4($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, f);
  },
  "+registerUnaryCallback:2:0": 1,
  get$registerUnaryCallback: function() {
    return new P.BoundClosure$2(this, P._ZoneDelegate.prototype.registerUnaryCallback$2, null, "registerUnaryCallback$2");
  },
  scheduleMicrotask$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$scheduleMicrotask() == null;)
      $parent = t1.get$parent($parent);
    t1 = t1.get$parent($parent);
    $parent.get$_specification().get$scheduleMicrotask().call$4($parent, new P._ZoneDelegate(t1), zone, f);
  },
  "+scheduleMicrotask:2:0": 1,
  get$scheduleMicrotask: function() {
    return new P.BoundClosure$2(this, P._ZoneDelegate.prototype.scheduleMicrotask$2, null, "scheduleMicrotask$2");
  },
  createTimer$3: function(zone, duration, f) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification().get$createTimer(), t2 = J.getInterceptor$x($parent), t1 == null;)
      $parent = t2.get$parent($parent);
    return t1.call$5($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, duration, f);
  },
  "+createTimer:3:0": 1,
  get$createTimer: function() {
    return new P.BoundClosure$3(this, P._ZoneDelegate.prototype.createTimer$3, null, "createTimer$3");
  }
},

"+_ZoneDelegate": [47],

_CustomizedZone: {"": "Object;parent>-,_specification<-,_liblib5$_map-",
  get$_errorZone: function() {
    if (this._specification.handleUncaughtError != null)
      return this;
    return this.parent.get$_errorZone();
  },
  "+_errorZone": 1,
  inSameErrorZone$1: function(otherZone) {
    return J.$eq(this.get$_errorZone(), otherZone.get$_errorZone());
  },
  "+inSameErrorZone:1:0": 1,
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = new P._ZoneDelegate(this).run$2(this, f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return new P._ZoneDelegate(this).handleUncaughtError$2(this, P._asyncError(e, s));
    }

  },
  "+runGuarded:1:0": 1,
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = new P._ZoneDelegate(this).runUnary$3(this, f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return new P._ZoneDelegate(this).handleUncaughtError$2(this, P._asyncError(e, s));
    }

  },
  "+runUnaryGuarded:2:0": 1,
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = new P._ZoneDelegate(this).registerCallback$2(this, f);
    if (runGuarded)
      return new P._CustomizedZone_bindCallback_closure(this, registered);
    else
      return new P._CustomizedZone_bindCallback_closure0(this, registered);
  },
  "+bindCallback:1:1:runGuarded": 1,
  "*bindCallback": [0],
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = new P._ZoneDelegate(this).registerUnaryCallback$2(this, f);
    if (runGuarded)
      return new P._CustomizedZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._CustomizedZone_bindUnaryCallback_closure0(this, registered);
  },
  "+bindUnaryCallback:1:1:runGuarded": 1,
  "*bindUnaryCallback": [0],
  $index: function(_, key) {
    var t1, result;
    t1 = this._liblib5$_map;
    result = t1.$index(t1, key);
    if (result != null || t1.containsKey$1(key) === true)
      return result;
    t1 = this.parent;
    if (t1 != null)
      return J.$index$asx(t1, key);
    return;
  },
  "+[]:1:0": 1,
  handleUncaughtError$1: function(error) {
    return new P._ZoneDelegate(this).handleUncaughtError$2(this, error);
  },
  "+handleUncaughtError:1:0": 1,
  get$handleUncaughtError: function() {
    return new P.BoundClosure$1(this, P._CustomizedZone.prototype.handleUncaughtError$1, null, "handleUncaughtError$1");
  },
  run$1: function(f) {
    return new P._ZoneDelegate(this).run$2(this, f);
  },
  "+run:1:0": 1,
  get$run: function() {
    return new P.BoundClosure$1(this, P._CustomizedZone.prototype.run$1, null, "run$1");
  },
  runUnary$2: function(f, arg) {
    return new P._ZoneDelegate(this).runUnary$3(this, f, arg);
  },
  "+runUnary:2:0": 1,
  get$runUnary: function() {
    return new P.BoundClosure$2(this, P._CustomizedZone.prototype.runUnary$2, null, "runUnary$2");
  },
  registerCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerCallback$2(this, f);
  },
  "+registerCallback:1:0": 1,
  get$registerCallback: function() {
    return new P.BoundClosure$1(this, P._CustomizedZone.prototype.registerCallback$1, null, "registerCallback$1");
  },
  registerUnaryCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerUnaryCallback$2(this, f);
  },
  "+registerUnaryCallback:1:0": 1,
  get$registerUnaryCallback: function() {
    return new P.BoundClosure$1(this, P._CustomizedZone.prototype.registerUnaryCallback$1, null, "registerUnaryCallback$1");
  },
  scheduleMicrotask$1: function(f) {
    new P._ZoneDelegate(this).scheduleMicrotask$2(this, f);
  },
  "+scheduleMicrotask:1:0": 1,
  get$scheduleMicrotask: function() {
    return new P.BoundClosure$1(this, P._CustomizedZone.prototype.scheduleMicrotask$1, null, "scheduleMicrotask$1");
  },
  createTimer$2: function(duration, f) {
    return new P._ZoneDelegate(this).createTimer$3(this, duration, f);
  },
  "+createTimer:2:0": 1,
  get$createTimer: function() {
    return new P.BoundClosure$2(this, P._CustomizedZone.prototype.createTimer$2, null, "createTimer$2");
  }
},

"+_CustomizedZone": [48],

_CustomizedZone_bindCallback_closure: {"": "Closure;this_0-,registered_1-",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_CustomizedZone_bindCallback_closure": [],

_CustomizedZone_bindCallback_closure0: {"": "Closure;this_2-,registered_3-",
  call$0: function() {
    var t1 = this.this_2;
    return new P._ZoneDelegate(t1).run$2(t1, this.registered_3);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_CustomizedZone_bindCallback_closure": [],

_CustomizedZone_bindUnaryCallback_closure: {"": "Closure;this_0-,registered_1-",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_CustomizedZone_bindUnaryCallback_closure": [],

_CustomizedZone_bindUnaryCallback_closure0: {"": "Closure;this_2-,registered_3-",
  call$1: function(arg) {
    var t1 = this.this_2;
    return new P._ZoneDelegate(t1).runUnary$3(t1, this.registered_3, arg);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_CustomizedZone_bindUnaryCallback_closure": [],

_rootHandleUncaughtError_closure: {"": "Closure;error_0-",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    H.Primitives_printString("Uncaught Error: " + H.S(t1));
    trace = P.getAttachedStackTrace(t1);
    P._attachStackTrace(t1, null);
    if (trace != null)
      H.Primitives_printString("Stack Trace:\n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_rootHandleUncaughtError_closure": [],

_rootFork_closure: {"": "Closure;copiedMap_0-",
  call$2: function(key, value) {
    var t1;
    if (key == null)
      throw H.wrapException(new P.ArgumentError("ZoneValue key must not be null"));
    t1 = this.copiedMap_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_rootFork_closure": []}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

"+_defaultEquals:2:0": 1,

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

"+_defaultHashCode:1:0": 1,

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

"+new HashMap:0:3:equals:hashCode:isValidKey": 1,

"*": [0, 0, 0],

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (hashCode == null) {
    if (equals == null) {
      t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    hashCode = P._defaultHashCode$closure;
  } else {
    if ((P.identityHashCode$closure == null ? hashCode == null : P.identityHashCode$closure === hashCode) && (P.identical$closure == null ? equals == null : P.identical$closure === equals)) {
      t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    if (equals == null)
      equals = P._defaultEquals$closure;
  }
  return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

"+new LinkedHashMap:0:3:equals:hashCode:isValidKey": 1,

"*": [0, 0, 0],

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

"+mapToString:1:0": 1,

_HashMap: {"": "Object;_liblib1$_length-,_strings-,_nums-,_rest-,_liblib1$_keys-",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this._liblib1$_length !== 0;
  },
  "+isNotEmpty": 1,
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  "+keys": 1,
  get$values: function(_) {
    var t1, t2;
    t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    t2 = new H.MappedIterable(t1, new P._HashMap_values_closure(this));
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  "+values": 1,
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  "+containsKey:1:0": 1,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P._HashMap_addAll_closure(this));
  },
  "+addAll:1:0": 1,
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._liblib1$_length = this._liblib1$_length + 1;
        this._liblib1$_keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._liblib1$_keys = null;
        }
      }
    }
  },
  "+[]=:2:0": 1,
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._liblib1$_keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P._HashMap.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._liblib1$_keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
    }
  },
  "+clear:0:0": 1,
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._liblib1$_keys)
        throw H.wrapException(new P.ConcurrentModificationError(this));
    }
  },
  "+forEach:1:0": 1,
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._liblib1$_keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._liblib1$_keys = result;
    return result;
  },
  "+_computeKeys:0:0": 1,
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._liblib1$_length = this._liblib1$_length + 1;
      this._liblib1$_keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  "+_addHashTableEntry:3:0": 1,
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._liblib1$_keys = null;
      return value;
    } else
      return;
  },
  "+_removeHashTableEntry:2:0": 1,
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  "+_computeHashCode:1:0": 1,
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  "+_findBucketIndex:2:0": 1,
  $isMap: true,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

"+_getTableEntry:2:0": 1,

_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

"+_setTableEntry:3:0": 1,

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
},

"+_newHashTable:0:0": 1}

},

"+_HashMap": [49],

_HashMap_values_closure: {"": "Closure;this_0-",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_HashMap_values_closure": [],

_HashMap_addAll_closure: {"": "Closure;this_0-",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_HashMap_addAll_closure": [],

HashMapKeyIterable: {"": "IterableBase;_map-",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  "+isEmpty": 1,
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  "+iterator": 1,
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  "+contains:1:0": 1,
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._liblib1$_keys)
        throw H.wrapException(new P.ConcurrentModificationError(t1));
    }
  },
  "+forEach:1:0": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+HashMapKeyIterable": [],

HashMapKeyIterator: {"": "Object;_map-,_liblib1$_keys-,_offset-,_liblib1$_current-",
  get$current: function() {
    return this._liblib1$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._liblib1$_keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._liblib1$_keys)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  },
  "+moveNext:0:0": 1
},

"+HashMapKeyIterator": [35],

_LinkedHashMap: {"": "Object;_liblib1$_length-,_strings-,_nums-,_rest-,_first-,_last-,_modifications-",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this._liblib1$_length !== 0;
  },
  "+isNotEmpty": 1,
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  "+keys": 1,
  get$values: function(_) {
    var t1, t2;
    t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    t2 = new H.MappedIterable(t1, new P._LinkedHashMap_values_closure(this));
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  "+values": 1,
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  "+containsKey:1:0": 1,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
  },
  "+addAll:1:0": 1,
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  "+[]=:2:0": 1,
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P._LinkedHashMap.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  "+clear:0:0": 1,
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(this));
      cell = cell.get$_liblib1$_next();
    }
  },
  "+forEach:1:0": 1,
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  "+_addHashTableEntry:3:0": 1,
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  "+_removeHashTableEntry:2:0": 1,
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._liblib1$_previous = last;
      last.set$_liblib1$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  "+_newLinkedCell:2:0": 1,
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_liblib1$_previous();
    next = cell.get$_liblib1$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_liblib1$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_liblib1$_previous(previous);
    this._liblib1$_length = this._liblib1$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  "+_unlinkCell:1:0": 1,
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  "+_computeHashCode:1:0": 1,
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  "+_findBucketIndex:2:0": 1,
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 1,
  $isLinkedHashMap: true,
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
},

"+_newHashTable:0:0": 1}

},

"+_LinkedHashMap": [50],

_LinkedHashMap_values_closure: {"": "Closure;this_0-",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_LinkedHashMap_values_closure": [],

_LinkedHashMap_addAll_closure: {"": "Closure;this_0-",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_LinkedHashMap_addAll_closure": [],

_LinkedIdentityHashMap: {"": "_LinkedHashMap;_liblib1$_length-,_strings-,_nums-,_rest-,_first-,_last-,_modifications-",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  "+_computeHashCode:1:0": 1,
  _findBucketIndex$2: function(bucket, key) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i].get$_key();
      if (t1 == null ? key == null : t1 === key)
        return i;
    }
    return -1;
  },
  "+_findBucketIndex:2:0": 1,
  $as_LinkedHashMap: null,
  $asLinkedHashMap: null,
  $asMap: null
},

"+_LinkedIdentityHashMap": [],

_LinkedCustomHashMap: {"": "_LinkedHashMap;_equals-,_hashCode-,_validKey-,_liblib1$_length-,_strings-,_nums-,_rest-,_first-,_last-,_modifications-",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.$index.call(this, this, key);
  },
  "+[]:1:0": 1,
  containsKey$1: function(key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._LinkedHashMap.prototype.containsKey$1.call(this, key);
  },
  "+containsKey:1:0": 1,
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.remove$1.call(this, this, key);
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P._LinkedCustomHashMap.prototype.remove$1, _receiver, "remove$1");
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  "+_computeHashCode:1:0": 1,
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (this._equals$2(bucket[i].get$_key(), key) === true)
        return i;
    return -1;
  },
  "+_findBucketIndex:2:0": 1,
  $as_LinkedHashMap: null,
  $asLinkedHashMap: null,
  $asMap: null,
  static: {
_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._LinkedCustomHashMap_closure($K);
  t1 = new P._LinkedCustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

"+new _LinkedCustomHashMap:3:0": 1}

},

"+_LinkedCustomHashMap": [],

_LinkedCustomHashMap_closure: {"": "Closure;K_0-",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_LinkedCustomHashMap_closure": [],

LinkedHashMapCell: {"": "Object;_key<-,_value@-,_liblib1$_next@-,_liblib1$_previous@-"},

"+LinkedHashMapCell": [],

LinkedHashMapKeyIterable: {"": "IterableBase;_map-",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  "+isEmpty": 1,
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  "+iterator": 1,
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  "+contains:1:0": 1,
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(t1));
      cell = cell.get$_liblib1$_next();
    }
  },
  "+forEach:1:0": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+LinkedHashMapKeyIterable": [],

LinkedHashMapKeyIterator: {"": "Object;_map-,_modifications-,_cell-,_liblib1$_current-",
  get$current: function() {
    return this._liblib1$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_key();
        this._cell = this._cell.get$_liblib1$_next();
        return true;
      }
    }
  },
  "+moveNext:0:0": 1
},

"+LinkedHashMapKeyIterator": [35],

_LinkedHashSet: {"": "_HashSetBase;_liblib1$_length-,_strings-,_nums-,_rest-,_first-,_last-,_modifications-",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  "+iterator": 1,
  get$length: function(_) {
    return this._liblib1$_length;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this._liblib1$_length !== 0;
  },
  "+isNotEmpty": 1,
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  "+contains:1:0": 1,
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_liblib1$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(this));
      cell = cell.get$_liblib1$_next();
    }
  },
  "+forEach:1:0": 1,
  get$first: function(_) {
    var t1 = this._first;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_liblib1$_element();
  },
  "+first": 1,
  get$last: function(_) {
    var t1 = this._last;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_liblib1$_element();
  },
  "+last": 1,
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  "+add:1:0": 1,
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  "+addAll:1:0": 1,
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P._LinkedHashSet.prototype.remove$1, _receiver, "remove$1");
  },
  removeAll$1: function(objectsToRemove) {
    var t1;
    for (t1 = J.get$iterator$ax(objectsToRemove); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  "+removeAll:1:0": 1,
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  "+clear:0:0": 1,
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = this._newLinkedCell$1(element);
  },
  "+_addHashTableEntry:2:0": 1,
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  "+_removeHashTableEntry:2:0": 1,
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._liblib1$_previous = last;
      last.set$_liblib1$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  "+_newLinkedCell:1:0": 1,
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_liblib1$_previous();
    next = cell.get$_liblib1$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_liblib1$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_liblib1$_previous(previous);
    this._liblib1$_length = this._liblib1$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  "+_unlinkCell:1:0": 1,
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  "+_computeHashCode:1:0": 1,
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_liblib1$_element(), element))
        return i;
    return -1;
  },
  "+_findBucketIndex:2:0": 1,
  $as_HashSetBase: null,
  $asIterable: null,
  $isIterable: true
},

"+_LinkedHashSet": [51],

LinkedHashSetCell: {"": "Object;_liblib1$_element<-,_liblib1$_next@-,_liblib1$_previous@-"},

"+LinkedHashSetCell": [],

LinkedHashSetIterator: {"": "Object;_set-,_modifications-,_cell-,_liblib1$_current-",
  get$current: function() {
    return this._liblib1$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_liblib1$_element();
        this._cell = this._cell.get$_liblib1$_next();
        return true;
      }
    }
  },
  "+moveNext:0:0": 1
},

"+LinkedHashSetIterator": [35],

_HashSetBase: {"": "IterableBase;",
  toList$1$growable: function(_, growable) {
    var result, t1, i, element, i0;
    result = P.List_List(null, H.getRuntimeTypeArgument(this, "_HashSetBase", 0));
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "_HashSetBase", 0)]);
    C.JSArray_methods.set$length(result, this.get$length(this));
    for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
      element = t1._liblib1$_current;
      i0 = i + 1;
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = element;
    }
    return result;
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  "+toString:0:0": 1,
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
},

"+_HashSetBase": [52],

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    var t1 = new H.MappedIterable(this, f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0), null]);
    return t1;
  },
  "+map:1:0": 1,
  where$1: function(_, f) {
    var t1 = new H.WhereIterable(this, f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    return t1;
  },
  "+where:1:0": 1,
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if (J.$eq(t1.get$current(), element))
        return true;
    return false;
  },
  "+contains:1:0": 1,
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  "+forEach:1:0": 1,
  fold$2: function(_, initialValue, combine) {
    var t1, value;
    for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0() === true;)
      value = combine.call$2(value, t1.get$current());
    return value;
  },
  "+fold:2:0": 1,
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = P.StringBuffer$("");
    if (separator === "")
      do {
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      buffer.write$1(H.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  "+join:1:0": 1,
  "*join": [10],
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  "+isNotEmpty": 1,
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw H.wrapException(new P.StateError("No elements"));
    return it.get$current();
  },
  "+first": 1,
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw H.wrapException(new P.StateError("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  },
  "+last": 1,
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw H.wrapException(new P.StateError("No elements"));
    result = it.get$current();
    if (it.moveNext$0() === true)
      throw H.wrapException(new P.StateError("More than one element"));
    return result;
  },
  "+single": 1,
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(new P.RangeError("value " + H.S(index)));
  },
  "+elementAt:1:0": 1,
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = J.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw H.wrapException(new P.RangeError("value " + H.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

"+IterableBase": [53],

LinkedHashSet: {"": "Object;", $isIterable: true, $asIterable: null, static: {
LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

"+new LinkedHashSet:0:3:equals:hashCode:isValidKey": 1,

"*": [0, 0, 0]}
},

"+LinkedHashSet": [54],

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

"+ListBase": [55],

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  "+iterator": 1,
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  "+elementAt:1:0": 1,
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.forEach$1$bailout(1, receiver, action);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw H.ioore(receiver, i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
  },
  "+forEach:1:0": 1,
  forEach$1$bailout: function(state0, receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  "+isNotEmpty": 1,
  get$first: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, 0);
  },
  "+first": 1,
  get$last: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, this.get$length(receiver) - 1);
  },
  "+last": 1,
  contains$1: function(receiver, element) {
    var $length, t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.contains$1$bailout(1, receiver, element);
    $length = receiver.length;
    for (t1 = $length !== $length, i = 0; i < $length; ++i) {
      if (receiver[i] === element)
        return true;
      if (t1)
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
    return false;
  },
  "+contains:1:0": 1,
  contains$1$bailout: function(state0, receiver, element) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      if (J.$eq(this.$index(receiver, i), element))
        return true;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
    return false;
  },
  join$1: function(receiver, separator) {
    var $length, first, buffer, i, str;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.join$1$bailout(1, receiver, separator);
    $length = receiver.length;
    if (separator.length !== 0) {
      if ($length === 0)
        return "";
      if (0 >= $length)
        throw H.ioore(receiver, 0);
      first = H.S(receiver[0]);
      if ($length !== receiver.length)
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
      buffer = P.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        if (i >= receiver.length)
          throw H.ioore(receiver, i);
        str = receiver[i];
        str = H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== receiver.length)
          throw H.wrapException(new P.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw H.ioore(receiver, i);
        str = receiver[i];
        str = H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== receiver.length)
          throw H.wrapException(new P.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    }
  },
  "+join:1:0": 1,
  "*join": [10],
  join$1$bailout: function(state0, receiver, separator) {
    var $length, first, buffer, i, str;
    $length = this.get$length(receiver);
    if (separator.length !== 0) {
      if ($length === 0)
        return "";
      first = H.S(this.$index(receiver, 0));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
      buffer = P.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(new P.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(new P.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    }
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  "+where:1:0": 1,
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  "+map:1:0": 1,
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, receiver, growable);
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, receiver.length);
    } else {
      result = P.List_List(receiver.length, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$1$growable$bailout: function(state0, receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (i = 0; i < this.get$length(receiver); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  "+add:1:0": 1,
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, t2 + 1);
      this.$indexSet(receiver, t2, element);
    }
  },
  "+addAll:1:0": 1,
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; i < this.get$length(receiver); ++i)
      if (J.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
        this.set$length(receiver, this.get$length(receiver) - 1);
        return true;
      }
    return false;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P.ListMixin.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  "+clear:0:0": 1,
  removeLast$0: function(receiver) {
    var result;
    if (this.get$length(receiver) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    result = this.$index(receiver, this.get$length(receiver) - 1);
    this.set$length(receiver, this.get$length(receiver) - 1);
    return result;
  },
  "+removeLast:0:0": 1,
  sort$1: function(receiver, compare) {
    if (compare == null)
      compare = P.Comparable_compare$closure;
    H.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, compare);
  },
  "+sort:1:0": 1,
  "*sort": [0],
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true) {
      t1 = this.get$length(receiver);
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
    }
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(receiver)) === true) {
      t1 = this.get$length(receiver);
      throw H.wrapException(new P.RangeError("value " + H.S(end) + " not in range " + H.S(start) + ".." + t1));
    }
  },
  "+_rangeCheck:2:0": 1,
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, receiver, start, end);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = J.$sub$n(end, start);
    result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    C.JSArray_methods.set$length(result, $length);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  sublist$2$bailout: function(state0, receiver, start, end) {
    var $length, result, t1, i, t2;
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = J.$sub$n(end, start);
    result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    C.JSArray_methods.set$length(result, $length);
    if (typeof $length !== "number")
      throw H.iae($length);
    t1 = J.getInterceptor$ns(start);
    i = 0;
    for (; i < $length; ++i) {
      t2 = this.$index(receiver, t1.$add(start, i));
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  },
  getRange$2: function(receiver, start, end) {
    this._rangeCheck$2(receiver, start, end);
    return H.SubListIterable$(receiver, start, end, null);
  },
  "+getRange:2:0": 1,
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var t1, $length, i;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, skipCount, receiver, iterable, start, end);
    if (typeof iterable !== "string" && (typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !H.isJsIndexable(iterable, iterable[init.dispatchPropertyName])))
      return this.setRange$4$bailout(1, skipCount, receiver, iterable, start, end);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, skipCount, receiver, iterable, start, end);
    if (start < 0 || start > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
    }
    if (end < start || end > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + end + " not in range " + H.S(start) + ".." + t1));
    }
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > iterable.length)
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = skipCount + i;
        if (t1 >>> 0 !== t1 || t1 >= iterable.length)
          throw H.ioore(iterable, t1);
        this.$indexSet(receiver, start + i, iterable[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = skipCount + i;
        if (t1 >>> 0 !== t1 || t1 >= iterable.length)
          throw H.ioore(iterable, t1);
        this.$indexSet(receiver, start + i, iterable[t1]);
      }
  },
  "+setRange:4:0": 1,
  "*setRange": [2],
  setRange$4$bailout: function(state0, skipCount, receiver, iterable, start, end) {
    var t1, $length, t2, i;
    t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
    }
    if (typeof start !== "number")
      throw H.iae(start);
    if (end < start || end > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + end + " not in range " + H.S(start) + ".." + t1));
    }
    $length = end - start;
    if ($length === 0)
      return;
    t1 = J.getInterceptor$n(skipCount);
    if (t1.$lt(skipCount, 0) === true)
      throw H.wrapException(new P.ArgumentError(skipCount));
    t2 = J.getInterceptor$asx(iterable);
    if (J.$gt$n(t1.$add(skipCount, $length), t2.get$length(iterable)) === true)
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (t1.$lt(skipCount, start) === true)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t2.$index(iterable, t1.$add(skipCount, i)));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t2.$index(iterable, t1.$add(skipCount, i)));
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.indexOf$2$bailout(1, element, receiver, startIndex);
    if (typeof startIndex !== "number")
      return this.indexOf$2$bailout(1, element, receiver, startIndex);
    t1 = receiver.length;
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < t1; ++i) {
      if (i >>> 0 !== i || i >= t1)
        throw H.ioore(receiver, i);
      if (receiver[i] === element)
        return i;
    }
    return -1;
  },
  "+indexOf:2:0": 1,
  "*indexOf": [2],
  indexOf$2$bailout: function(state0, element, receiver, startIndex) {
    var t1, i;
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$ge(startIndex, this.get$length(receiver)) === true)
      return -1;
    if (t1.$lt(startIndex, 0) === true)
      startIndex = 0;
    for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$lt(i, this.get$length(receiver)) === true; i = t1.$add(i, 1))
      if (J.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  "+indexOf:1:0": 1,
  removeAt$1: function(receiver, index) {
    var result = this.$index(receiver, index);
    this.setRange$4(receiver, index, this.get$length(receiver) - 1, receiver, J.$add$ns(index, 1));
    this.set$length(receiver, this.get$length(receiver) - 1);
    return result;
  },
  "+removeAt:1:0": 1,
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = P.StringBuffer$("");
    try {
      $.get$ListMixin__toStringList().push(receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  "+toString:0:0": 1,
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

"+ListMixin": [12],

Maps_mapToString_closure: {"": "Closure;box_0-,result_1-",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Maps_mapToString_closure": [],

ListQueue: {"": "IterableBase;_table-,_liblib1$_head-,_liblib1$_tail-,_modificationCount-",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  "+iterator": 1,
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._liblib1$_head; i !== this._liblib1$_tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(new P.ConcurrentModificationError(this));
    }
  },
  "+forEach:1:0": 1,
  get$isEmpty: function(_) {
    return this._liblib1$_head === this._liblib1$_tail;
  },
  "+isEmpty": 1,
  get$length: function(_) {
    return (this._liblib1$_tail - this._liblib1$_head & this._table.length - 1) >>> 0;
  },
  "+length": 1,
  get$first: function(_) {
    var t1, t2;
    t1 = this._liblib1$_head;
    if (t1 === this._liblib1$_tail)
      throw H.wrapException(new P.StateError("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    return t2[t1];
  },
  "+first": 1,
  get$last: function(_) {
    var t1, t2, t3;
    t1 = this._liblib1$_head;
    t2 = this._liblib1$_tail;
    if (t1 === t2)
      throw H.wrapException(new P.StateError("No elements"));
    t1 = this._table;
    t3 = t1.length;
    t2 = (t2 - 1 & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  "+last": 1,
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = P.List_List(null, H.getRuntimeTypeArgument(this, "ListQueue", 0));
      H.setRuntimeTypeInfo(list, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
      C.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListQueue", 0));
      H.setRuntimeTypeInfo(list, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  add$1: function(_, element) {
    this._add$1(element);
  },
  "+add:1:0": 1,
  addAll$1: function(_, elements) {
    var t1, addCount, $length, t2, t3, endSpace, preSpace;
    t1 = J.getInterceptor(elements);
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || !!t1.$isList)) {
      addCount = t1.get$length(elements);
      $length = this.get$length(this);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(t2, $length, t1, elements, 0);
        this._liblib1$_tail = this._liblib1$_tail + addCount;
      } else {
        t1 = this._liblib1$_tail;
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + addCount, elements, 0);
          this._liblib1$_tail = this._liblib1$_tail + addCount;
        } else {
          preSpace = addCount - endSpace;
          H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + endSpace, elements, 0);
          t1 = this._table;
          H.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
          this._liblib1$_tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = t1.get$iterator(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  "+addAll:1:0": 1,
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._liblib1$_head; i !== this._liblib1$_tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t1[i], object)) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P.ListQueue.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._liblib1$_head;
    t1 = this._liblib1$_tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = null;
      }
      this._liblib1$_tail = 0;
      this._liblib1$_head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  "+clear:0:0": 1,
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  "+toString:0:0": 1,
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._liblib1$_head === this._liblib1$_tail)
      throw H.wrapException(new P.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._liblib1$_head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._liblib1$_head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  "+removeFirst:0:0": 1,
  removeLast$0: function(_) {
    var t1, t2;
    if (this._liblib1$_head === this._liblib1$_tail)
      throw H.wrapException(new P.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._liblib1$_tail = (this._liblib1$_tail - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._liblib1$_tail;
    if (t2 < 0 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  "+removeLast:0:0": 1,
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._liblib1$_tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._liblib1$_tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._liblib1$_head === this._liblib1$_tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  "+_add:1:0": 1,
  _remove$1: function(offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._liblib1$_head;
    t4 = this._liblib1$_tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw H.ioore(t1, prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw H.ioore(t1, i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = null;
      this._liblib1$_head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._liblib1$_tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._liblib1$_tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(t2, nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      return offset;
    }
  },
  "+_remove:1:0": 1,
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._liblib1$_head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._liblib1$_head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._liblib1$_head = 0;
    this._liblib1$_tail = this._table.length;
    this._table = newTable;
  },
  "+_grow:0:0": 1,
  _writeToList$1: function(target) {
    var t1, t2, t3, $length, firstPartSize;
    t1 = this._liblib1$_head;
    t2 = this._liblib1$_tail;
    t3 = this._table;
    if (t1 <= t2) {
      $length = t2 - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
      return $length;
    } else {
      firstPartSize = t3.length - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
      t1 = this._liblib1$_tail;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
      return this._liblib1$_tail + firstPartSize;
    }
  },
  "+_writeToList:1:0": 1,
  _preGrow$1: function(newElementCount) {
    var newTable = P.List_List(P.ListQueue__nextPowerOf2(newElementCount), H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    this._liblib1$_tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._liblib1$_head = 0;
  },
  "+_preGrow:1:0": 1,
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY-",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
},

"+new ListQueue:1:0": 1,

"*": [0],

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  if (number == null)
    throw number.$shl();
  number = (number << 2 >>> 0) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
},

"+_nextPowerOf2:1:0": 1}

},

"+ListQueue": [56],

_ListQueueIterator: {"": "Object;_queue-,_end-,_modificationCount-,_liblib1$_position-,_liblib1$_current-",
  get$current: function() {
    return this._liblib1$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(new P.ConcurrentModificationError(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  "+moveNext:0:0": 1,
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._liblib1$_tail, queue._modificationCount, queue._liblib1$_head, null);
},

"+new _ListQueueIterator:1:0": 1}

},

"+_ListQueueIterator": [35],

_SplayTreeNode: {"": "Object;key>-,left*-,right*-",
  right$0: function($receiver) {
    return this.right.call$0();
  },
  $is_SplayTreeNode: true
},

"+_SplayTreeNode": [],

_SplayTreeMapNode: {"": "_SplayTreeNode;value*-,key-,left-,right-",
  $as_SplayTreeNode: function($K, $V) {
    return [$K];
  }
},

"+_SplayTreeMapNode": [],

_SplayTree: {"": "Object;",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, t2, tmp, current0;
    current = this._root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      t1 = J.getInterceptor$x(current);
      comp = this._compare$2(t1.get$key(current), key);
      t2 = J.getInterceptor$n(comp);
      if (t2.$gt(comp, 0) === true) {
        if (t1.get$left(current) == null)
          break;
        comp = this._compare$2(J.get$key$x(t1.get$left(current)), key);
        if (J.$gt$n(comp, 0) === true) {
          tmp = t1.get$left(current);
          t2 = J.getInterceptor$x(tmp);
          t1.set$left(current, t2.get$right(tmp));
          t2.set$right(tmp, current);
          if (t2.get$left(tmp) == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        J.set$left$x(right, current);
        current0 = J.get$left$x(current);
        right = current;
        current = current0;
      } else {
        if (t2.$lt(comp, 0) === true) {
          if (t1.get$right(current) == null)
            break;
          comp = this._compare$2(J.get$key$x(t1.get$right(current)), key);
          if (J.$lt$n(comp, 0) === true) {
            tmp = t1.get$right(current);
            t2 = J.getInterceptor$x(tmp);
            t1.set$right(current, t2.get$left(tmp));
            t2.set$left(tmp, current);
            if (t2.get$right(tmp) == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          J.set$right$x(left0, current);
          current0 = J.get$right$x(current);
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    t1 = J.getInterceptor$x(current);
    J.set$right$x(left0, t1.get$left(current));
    J.set$left$x(right, t1.get$right(current));
    t1.set$left(current, left.right);
    t1.set$right(current, left.left);
    this._root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  "+_splay:1:0": 1,
  _remove$1: function(key) {
    var result, t1, t2, right;
    if (this._root == null)
      return;
    if (!J.$eq(this._splay$1(key), 0))
      return;
    result = this._root;
    this._count = this._count - 1;
    t1 = J.get$left$x(this._root);
    t2 = this._root;
    if (t1 == null)
      this._root = J.get$right$x(t2);
    else {
      right = J.get$right$x(t2);
      this._root = J.get$left$x(this._root);
      this._splay$1(key);
      J.set$right$x(this._root, right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  "+_remove:1:0": 1,
  _addNewRoot$2: function(node, comp) {
    var t1, t2;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    if (this._root == null) {
      this._root = node;
      return;
    }
    t1 = J.$lt$n(comp, 0);
    t2 = this._root;
    if (t1 === true) {
      node.left = t2;
      node.right = J.get$right$x(this._root);
      J.set$right$x(this._root, null);
    } else {
      node.right = t2;
      node.left = J.get$left$x(this._root);
      J.set$left$x(this._root, null);
    }
    this._root = node;
  },
  "+_addNewRoot:2:0": 1
},

"+_SplayTree": [],

SplayTreeMap: {"": "_SplayTree;_comparator-,_validKey-,_root-,_dummy-,_count-,_modificationCount-,_splayCount-",
  _comparator$2: function(arg0, arg1) {
    return this._comparator.call$2(arg0, arg1);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  _compare$2: function(key1, key2) {
    return this._comparator$2(key1, key2);
  },
  "+_compare:2:0": 1,
  $index: function(_, key) {
    if (key == null)
      throw H.wrapException(new P.ArgumentError(key));
    if (this._validKey$1(key) !== true)
      return;
    if (this._root != null)
      if (J.$eq(this._splay$1(key), 0))
        return J.get$value$x(this._root);
    return;
  },
  "+[]:1:0": 1,
  remove$1: function(_, key) {
    var mapRoot;
    if (this._validKey$1(key) !== true)
      return;
    mapRoot = this._remove$1(key);
    if (mapRoot != null)
      return J.get$value$x(mapRoot);
    return;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P.SplayTreeMap.prototype.remove$1, _receiver, "remove$1");
  },
  $indexSet: function(_, key, value) {
    var comp, t1;
    if (key == null)
      throw H.wrapException(new P.ArgumentError(key));
    comp = this._splay$1(key);
    if (J.$eq(comp, 0)) {
      J.set$value$x(this._root, value);
      return;
    }
    t1 = new P._SplayTreeMapNode(value, key, null, null);
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._addNewRoot$2(t1, comp);
  },
  "+[]=:2:0": 1,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P.SplayTreeMap_addAll_closure(this));
  },
  "+addAll:1:0": 1,
  get$isEmpty: function(_) {
    return this._root == null;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this._root != null;
  },
  "+isNotEmpty": 1,
  forEach$1: function(_, f) {
    var nodes, node, t1;
    nodes = new P._SplayTreeNodeIterator(this, [], this._modificationCount, this._splayCount, null);
    nodes._SplayTreeIterator$1(this);
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      t1 = J.getInterceptor$x(node);
      f.call$2(t1.get$key(node), t1.get$value(node));
    }
  },
  "+forEach:1:0": 1,
  get$length: function(_) {
    return this._count;
  },
  "+length": 1,
  clear$0: function(_) {
    this._root = null;
    this._count = 0;
    this._modificationCount = this._modificationCount + 1;
  },
  "+clear:0:0": 1,
  containsKey$1: function(key) {
    return this._validKey$1(key) === true && J.$eq(this._splay$1(key), 0);
  },
  "+containsKey:1:0": 1,
  get$keys: function() {
    var t1 = new P._SplayTreeKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "SplayTreeMap", 0)]);
    return t1;
  },
  "+keys": 1,
  get$values: function(_) {
    var t1 = new P._SplayTreeValueIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "SplayTreeMap", 0), H.getRuntimeTypeArgument(this, "SplayTreeMap", 1)]);
    return t1;
  },
  "+values": 1,
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 1,
  $isSplayTreeMap: true,
  $as_SplayTree: function($K, $V) {
    return [$K];
  },
  $asMap: null,
  $isMap: true,
  static: {
SplayTreeMap$: function(compare, isValidKey, $K, $V) {
  var t1, t2, t3;
  t1 = P.Comparable_compare$closure;
  t2 = new P.SplayTreeMap_closure($K);
  t3 = new P._SplayTreeNode(null, null, null);
  H.setRuntimeTypeInfo(t3, [$K]);
  t3 = new P.SplayTreeMap(t1, t2, null, t3, 0, 0, 0);
  H.setRuntimeTypeInfo(t3, [$K, $V]);
  return t3;
},

"+new SplayTreeMap:2:0": 1,

"*": [0, 0]}

},

"+SplayTreeMap": [24],

SplayTreeMap_closure: {"": "Closure;K_0-",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+SplayTreeMap_closure": [],

SplayTreeMap_addAll_closure: {"": "Closure;this_0-",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+SplayTreeMap_addAll_closure": [],

_SplayTreeIterator: {"": "Object;",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  "+current": 1,
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      t1.push(node);
      node = J.get$left$x(node);
    }
  },
  "+_findLeftMostDescendent:1:0": 1,
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    C.JSArray_methods.set$length(this._workList, 0);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1._root);
    else {
      t1._splay$1(J.get$key$x(currentNode));
      this._findLeftMostDescendent$1(J.get$right$x(t1._root));
    }
  },
  "+_rebuildWorkList:1:0": 1,
  moveNext$0: function() {
    var t1, t2;
    t1 = this._tree;
    if (this._modificationCount !== t1._modificationCount)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    t2 = this._workList;
    if (t2.length === 0) {
      this._currentNode = null;
      return false;
    }
    if (t1._splayCount !== this._splayCount)
      this._rebuildWorkList$1(this._currentNode);
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    this._currentNode = t2.pop();
    this._findLeftMostDescendent$1(J.get$right$x(this._currentNode));
    return true;
  },
  "+moveNext:0:0": 1,
  _SplayTreeIterator$1: function(tree) {
    this._findLeftMostDescendent$1(tree._root);
  }
},

"+_SplayTreeIterator": [35],

_SplayTreeKeyIterable: {"": "IterableBase;_tree-",
  get$length: function(_) {
    return this._tree._count;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  "+isEmpty": 1,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._tree;
    t2 = new P._SplayTreeKeyIterator(t1, [], t1._modificationCount, t1._splayCount, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_SplayTreeKeyIterable", 0)]);
    t2._SplayTreeIterator$1(t1);
    return t2;
  },
  "+iterator": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+_SplayTreeKeyIterable": [],

_SplayTreeValueIterable: {"": "IterableBase;_map-",
  get$length: function(_) {
    return this._map._count;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  "+isEmpty": 1,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = new P._SplayTreeValueIterator(t1, [], t1._modificationCount, t1._splayCount, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_SplayTreeValueIterable", 0), H.getRuntimeTypeArgument(this, "_SplayTreeValueIterable", 1)]);
    t2._SplayTreeIterator$1(t1);
    return t2;
  },
  "+iterator": 1,
  $asIterableBase: function($K, $V) {
    return [$V];
  },
  $asIterable: function($K, $V) {
    return [$V];
  }
},

"+_SplayTreeValueIterable": [],

_SplayTreeKeyIterator: {"": "_SplayTreeIterator;_tree-,_workList-,_modificationCount-,_splayCount-,_currentNode-",
  _getValue$1: function(node) {
    return J.get$key$x(node);
  },
  "+_getValue:1:0": 1,
  $as_SplayTreeIterator: null
},

"+_SplayTreeKeyIterator": [],

_SplayTreeValueIterator: {"": "_SplayTreeIterator;_tree-,_workList-,_modificationCount-,_splayCount-,_currentNode-",
  _getValue$1: function(node) {
    return J.get$value$x(node);
  },
  "+_getValue:1:0": 1,
  $as_SplayTreeIterator: function($K, $V) {
    return [$V];
  }
},

"+_SplayTreeValueIterator": [],

_SplayTreeNodeIterator: {"": "_SplayTreeIterator;_tree-,_workList-,_modificationCount-,_splayCount-,_currentNode-",
  _getValue$1: function(node) {
    return node;
  },
  "+_getValue:1:0": 1
},

"+_SplayTreeNodeIterator": []}],
["dart.convert", "dart:convert", , P, {
_convertJsonToDart: function(json, reviver) {
  var revive = new P._convertJsonToDart_closure();
  return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
},

"+_convertJsonToDart:2:0": 1,

_parseJson: function(source, reviver) {
  var parsed, e, t1, exception;
  t1 = source;
  if (typeof t1 !== "string")
    throw H.wrapException(new P.ArgumentError(source));
  parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    throw H.wrapException(new P.FormatException(String(e)));
  }

  return P._convertJsonToDart(parsed, reviver);
},

"+_parseJson:2:0": 1,

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_convertJsonToDart_closure": [],

_convertJsonToDart_walk: {"": "Closure;revive_0-",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_convertJsonToDart_walk": [],

Codec: {"": "Object;"},

"+Codec": [],

Converter: {"": "Object;"},

"+Converter": [57],

Encoding: {"": "Codec;"},

"+Encoding": [],

JsonUnsupportedObjectError: {"": "Error;unsupportedObject-,cause-",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  },
  "+toString:0:0": 1
},

"+JsonUnsupportedObjectError": [],

JsonCyclicError: {"": "JsonUnsupportedObjectError;unsupportedObject-,cause-",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  },
  "+toString:0:0": 1
},

"+JsonCyclicError": [],

JsonCodec: {"": "Codec;",
  get$encoder: function() {
    return new P.JsonEncoder();
  },
  "+encoder": 1
},

"+JsonCodec": [],

JsonEncoder: {"": "Converter;",
  convert$1: function(o) {
    return P._JsonStringifier_stringify(o);
  },
  "+convert:1:0": 1
},

"+JsonEncoder": [],

JsonDecoder: {"": "Converter;_reviver-"},

"+JsonDecoder": [],

Utf8Codec: {"": "Encoding;_allowMalformed-",
  get$name: function(_) {
    return "utf-8";
  },
  "+name": 1,
  get$encoder: function() {
    return new P.Utf8Encoder();
  },
  "+encoder": 1
},

"+Utf8Codec": [],

Utf8Encoder: {"": "Converter;",
  convert$1: function(string) {
    var t1, t2, encoder;
    t1 = J.getInterceptor$asx(string);
    t2 = P.List_List(J.$mul$n(t1.get$length(string), 3), J.JSInt);
    H.setRuntimeTypeInfo(t2, [J.JSInt]);
    encoder = new P._Utf8Encoder(0, 0, t2);
    if (encoder._fillBuffer$3(string, 0, t1.get$length(string)) !== t1.get$length(string))
      encoder._writeSurrogate$2(t1.codeUnitAt$1(string, J.$sub$n(t1.get$length(string), 1)), 0);
    return C.JSArray_methods.sublist$2(encoder._buffer, 0, encoder._bufferIndex);
  },
  "+convert:1:0": 1
},

"+Utf8Encoder": [],

_Utf8Encoder: {"": "Object;_carry-,_bufferIndex-,_buffer-",
  _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
    var t1, t2, t3, rune, t4;
    if (typeof leadingSurrogate !== "number")
      return this._writeSurrogate$2$bailout(1, nextCodeUnit, leadingSurrogate);
    if (typeof nextCodeUnit !== "number")
      return this._writeSurrogate$2$bailout(1, nextCodeUnit, leadingSurrogate);
    t1 = this._buffer;
    t2 = t1.length;
    t3 = this._bufferIndex;
    if ((nextCodeUnit & 64512) === 56320) {
      rune = (65536 | (leadingSurrogate & 1023) << 10 | nextCodeUnit & 1023) >>> 0;
      this._bufferIndex = t3 + 1;
      t4 = C.JSInt_methods.$shr(rune, 18);
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = (240 | t4) >>> 0;
      t4 = this._bufferIndex;
      this._bufferIndex = t4 + 1;
      t3 = C.JSInt_methods.$shr(rune, 12);
      if (t4 < 0 || t4 >= t2)
        throw H.ioore(t1, t4);
      t1[t4] = (128 | t3 & 63) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      t4 = C.JSInt_methods.$shr(rune, 6);
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t4 & 63) >>> 0;
      t4 = this._bufferIndex;
      this._bufferIndex = t4 + 1;
      if (t4 < 0 || t4 >= t2)
        throw H.ioore(t1, t4);
      t1[t4] = (128 | rune & 63) >>> 0;
      return true;
    } else {
      this._bufferIndex = t3 + 1;
      t4 = C.JSNumber_methods.$shr(leadingSurrogate, 12);
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = (224 | t4) >>> 0;
      t4 = this._bufferIndex;
      this._bufferIndex = t4 + 1;
      t3 = C.JSNumber_methods.$shr(leadingSurrogate, 6);
      if (t4 < 0 || t4 >= t2)
        throw H.ioore(t1, t4);
      t1[t4] = (128 | t3 & 63) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | leadingSurrogate & 63) >>> 0;
      return false;
    }
  },
  "+_writeSurrogate:2:0": 1,
  _writeSurrogate$2$bailout: function(state0, nextCodeUnit, leadingSurrogate) {
    var t1, t2, t3, rune, t4, t5;
    t1 = J.getInterceptor$n(nextCodeUnit);
    t2 = J.getInterceptor$n(leadingSurrogate);
    t3 = this._buffer;
    if (J.$eq(t1.$and(nextCodeUnit, 64512), 56320)) {
      t2 = J.$shl$n(t2.$and(leadingSurrogate, 1023), 10);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t1 = t1.$and(nextCodeUnit, 1023);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      rune = (65536 | t2 | t1) >>> 0;
      t1 = this._bufferIndex;
      this._bufferIndex = t1 + 1;
      t2 = C.JSInt_methods.$shr(rune, 18);
      t4 = t3.length;
      if (t1 < 0 || t1 >= t4)
        throw H.ioore(t3, t1);
      t3[t1] = (240 | t2) >>> 0;
      t2 = this._bufferIndex;
      this._bufferIndex = t2 + 1;
      t1 = C.JSInt_methods.$shr(rune, 12);
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t3, t2);
      t3[t2] = (128 | t1 & 63) >>> 0;
      t1 = this._bufferIndex;
      this._bufferIndex = t1 + 1;
      t2 = C.JSInt_methods.$shr(rune, 6);
      if (t1 < 0 || t1 >= t4)
        throw H.ioore(t3, t1);
      t3[t1] = (128 | t2 & 63) >>> 0;
      t2 = this._bufferIndex;
      this._bufferIndex = t2 + 1;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t3, t2);
      t3[t2] = (128 | rune & 63) >>> 0;
      return true;
    } else {
      t1 = this._bufferIndex;
      this._bufferIndex = t1 + 1;
      t4 = t2.$shr(leadingSurrogate, 12);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      t5 = t3.length;
      if (t1 < 0 || t1 >= t5)
        throw H.ioore(t3, t1);
      t3[t1] = (224 | t4) >>> 0;
      t4 = this._bufferIndex;
      this._bufferIndex = t4 + 1;
      t1 = J.$and$n(t2.$shr(leadingSurrogate, 6), 63);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (t4 < 0 || t4 >= t5)
        throw H.ioore(t3, t4);
      t3[t4] = (128 | t1) >>> 0;
      t1 = this._bufferIndex;
      this._bufferIndex = t1 + 1;
      t2 = t2.$and(leadingSurrogate, 63);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (t1 < 0 || t1 >= t5)
        throw H.ioore(t3, t1);
      t3[t1] = (128 | t2) >>> 0;
      return false;
    }
  },
  _fillBuffer$3: function(str, start, end) {
    var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5, t6;
    if (start !== end && J.$eq(J.$and$n(J.codeUnitAt$1$s(str, J.$sub$n(end, 1)), 64512), 55296))
      end = J.$sub$n(end, 1);
    if (typeof end !== "number")
      throw H.iae(end);
    t1 = this._buffer;
    t2 = t1.length;
    t3 = J.getInterceptor$s(str);
    stringIndex = start;
    for (; stringIndex < end; ++stringIndex) {
      codeUnit = t3.codeUnitAt$1(str, stringIndex);
      t4 = J.getInterceptor$n(codeUnit);
      if (t4.$le(codeUnit, 127) === true) {
        t4 = this._bufferIndex;
        if (t4 >= t2)
          break;
        this._bufferIndex = t4 + 1;
        if (t4 < 0)
          throw H.ioore(t1, t4);
        t1[t4] = codeUnit;
      } else if (J.$eq(t4.$and(codeUnit, 64512), 55296)) {
        if (this._bufferIndex + 3 >= t2)
          break;
        stringIndex0 = stringIndex + 1;
        if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
          stringIndex = stringIndex0;
      } else if (t4.$le(codeUnit, 2047) === true) {
        t5 = this._bufferIndex;
        t6 = t5 + 1;
        if (t6 >= t2)
          break;
        this._bufferIndex = t6;
        t6 = t4.$shr(codeUnit, 6);
        if (typeof t6 !== "number")
          throw H.iae(t6);
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (192 | t6) >>> 0;
        t6 = this._bufferIndex;
        this._bufferIndex = t6 + 1;
        t4 = t4.$and(codeUnit, 63);
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (t6 < 0 || t6 >= t2)
          throw H.ioore(t1, t6);
        t1[t6] = (128 | t4) >>> 0;
      } else {
        t5 = this._bufferIndex;
        if (t5 + 2 >= t2)
          break;
        this._bufferIndex = t5 + 1;
        t6 = t4.$shr(codeUnit, 12);
        if (typeof t6 !== "number")
          throw H.iae(t6);
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (224 | t6) >>> 0;
        t6 = this._bufferIndex;
        this._bufferIndex = t6 + 1;
        t5 = J.$and$n(t4.$shr(codeUnit, 6), 63);
        if (typeof t5 !== "number")
          throw H.iae(t5);
        if (t6 < 0 || t6 >= t2)
          throw H.ioore(t1, t6);
        t1[t6] = (128 | t5) >>> 0;
        t5 = this._bufferIndex;
        this._bufferIndex = t5 + 1;
        t4 = t4.$and(codeUnit, 63);
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | t4) >>> 0;
      }
    }
    return stringIndex;
  },
  "+_fillBuffer:3:0": 1,
  static: {
"": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE-",
}

},

"+_Utf8Encoder": []}],
["dart.core", "dart:core", , P, {
Function__toMangledNames: function(namedArguments) {
  return;
},

"+_toMangledNames:1:0": 1,

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

"+compare:2:0": 1,

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

"+safeToString:1:0": 1,

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

"+identical:2:0": 1,

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

"+identityHashCode:1:0": 1,

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

"+new List:1:0": 1,

"*": [0],

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if (typeof $length !== "number")
    return P.List_List$filled$bailout(1, $length, fill);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  if ($length !== 0 && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

"+new List$filled:2:0": 1,

List_List$filled$bailout: function(state0, $length, fill) {
  var result, t1, i;
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  if (!J.$eq($length, 0) && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = P.List_List(null, $E);
  list.$builtinTypeInfo = [$E];
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  fixedList.$builtinTypeInfo = [$E];
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    t3 = list[i];
    if (i >= t2)
      throw H.ioore(fixedList, i);
    fixedList[i] = t3;
  }
  return fixedList;
},

"+new List$from:1:1:growable": 1,

"*from": [3],

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

"+new String$fromCharCodes:1:0": 1,

Function__toMangledNames_closure: {"": "Closure;result_0-",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, symbol.get$_name(), value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Function__toMangledNames_closure": [],

NoSuchMethodError_toString_closure: {"": "Closure;box_0-",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key.get$_name());
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1(P.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+NoSuchMethodError_toString_closure": [],

Comparable: {"": "Object;"},

"+Comparable": [],

DateTime: {"": "Object;millisecondsSinceEpoch<-,isUtc-",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  "+==:1:0": 1,
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  "+compareTo:1:0": 1,
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  "+hashCode": 1,
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  "+toString:0:0": 1,
  add$1: function(_, duration) {
    var t1 = duration.get$inMilliseconds();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + t1, this.isUtc);
  },
  "+add:1:0": 1,
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY-,DateTime_TUESDAY-,DateTime_WEDNESDAY-,DateTime_THURSDAY-,DateTime_FRIDAY-,DateTime_SATURDAY-,DateTime_SUNDAY-,DateTime_DAYS_PER_WEEK-,DateTime_JANUARY-,DateTime_FEBRUARY-,DateTime_MARCH-,DateTime_APRIL-,DateTime_MAY-,DateTime_JUNE-,DateTime_JULY-,DateTime_AUGUST-,DateTime_SEPTEMBER-,DateTime_OCTOBER-,DateTime_NOVEMBER-,DateTime_DECEMBER-,DateTime_MONTHS_PER_YEAR-,DateTime__MAX_MILLISECONDS_SINCE_EPOCH-",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

"+new DateTime$fromMillisecondsSinceEpoch:1:1:isUtc": 1,

"*fromMillisecondsSinceEpoch": [1],

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
},

"+new DateTime$_now:0:0": 1}

},

"+DateTime": [58],

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = J.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    t1 = J.getInterceptor$n(absN);
    if (t1.$ge(absN, 1000) === true)
      return H.S(n);
    if (t1.$ge(absN, 100) === true)
      return sign + "0" + H.S(absN);
    if (t1.$ge(absN, 10) === true)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+DateTime_toString_fourDigits": [],

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100) === true)
      return H.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+DateTime_toString_threeDigits": [],

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10) === true)
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+DateTime_toString_twoDigits": [],

Duration: {"": "Object;_duration<-",
  $add: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return P.Duration$(0, 0, this._duration + t1, 0, 0, 0);
  },
  "++:1:0": 1,
  $sub: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return P.Duration$(0, 0, this._duration - t1, 0, 0, 0);
  },
  "+-:1:0": 1,
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  "+*:1:0": 1,
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw H.wrapException(new P.IntegerDivisionByZeroException());
    return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  "+~/:1:0": 1,
  $lt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this._duration < t1;
  },
  "+<:1:0": 1,
  $gt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this._duration > t1;
  },
  "+>:1:0": 1,
  $le: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this._duration <= t1;
  },
  "+<=:1:0": 1,
  $ge: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this._duration >= t1;
  },
  "+>=:1:0": 1,
  get$inMilliseconds: function() {
    return C.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  "+inMilliseconds": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  "+hashCode": 1,
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  "+compareTo:1:0": 1,
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  "+toString:0:0": 1,
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND-,Duration_MILLISECONDS_PER_SECOND-,Duration_SECONDS_PER_MINUTE-,Duration_MINUTES_PER_HOUR-,Duration_HOURS_PER_DAY-,Duration_MICROSECONDS_PER_SECOND-,Duration_MICROSECONDS_PER_MINUTE-,Duration_MICROSECONDS_PER_HOUR-,Duration_MICROSECONDS_PER_DAY-,Duration_MILLISECONDS_PER_MINUTE-,Duration_MILLISECONDS_PER_HOUR-,Duration_MILLISECONDS_PER_DAY-,Duration_SECONDS_PER_HOUR-,Duration_SECONDS_PER_DAY-,Duration_MINUTES_PER_DAY-,Duration_ZERO-",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
},

"+new Duration:0:6:days:hours:microseconds:milliseconds:minutes:seconds": 1,

"*": [2, 2, 2, 2, 2, 2]}

},

"+Duration": [59],

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return H.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + H.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + H.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + H.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Duration_toString_sixDigits": [],

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10) === true)
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Duration_toString_twoDigits": [],

Error: {"": "Object;", $isError: true},

"+Error": [],

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  },
  "+toString:0:0": 1
},

"+NullThrownError": [],

ArgumentError: {"": "Error;message-",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  "+toString:0:0": 1
},

"+ArgumentError": [],

RangeError: {"": "ArgumentError;message-",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  "+toString:0:0": 1
},

"+RangeError": [],

NoSuchMethodError: {"": "Error;_liblib2$_receiver-,_memberName-,_liblib2$_arguments-,_namedArguments-,_existingArgumentNames-",
  toString$0: function(_) {
    var t1, t2, t3, t4, str;
    t1 = {};
    t1.sb_0 = P.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._liblib2$_arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
      return this.toString$0$bailout1(1, t1, t2);
    for (; t3 = t1.i_1, t3 < t2.length; t1.i_1 = t1.i_1 + 1) {
      if (t3 > 0) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 < 0 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      str = P.Error_safeToString(t2[t4]);
      str = typeof str === "string" ? str : H.S(str);
      t3._contents = t3._contents + str;
    }
    t2 = this._namedArguments;
    if (t2 != null)
      J.forEach$1$ax(t2, new P.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._liblib2$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
  },
  "+toString:0:0": 1,
  toString$0$bailout1: function(state0, t1, t2) {
    var t3, t4, t5, str;
    if (t2 != null) {
      t3 = J.getInterceptor$asx(t2);
      while (true) {
        t4 = t1.i_1;
        t5 = t3.get$length(t2);
        if (typeof t5 !== "number")
          throw H.iae(t5);
        if (!(t4 < t5))
          break;
        if (t1.i_1 > 0) {
          t4 = t1.sb_0;
          t4._contents = t4._contents + ", ";
        }
        t4 = t1.sb_0;
        str = P.Error_safeToString(t3.$index(t2, t1.i_1));
        str = typeof str === "string" ? str : H.S(str);
        t4._contents = t4._contents + str;
        t1.i_1 = t1.i_1 + 1;
      }
    }
    t2 = this._namedArguments;
    if (t2 != null)
      J.forEach$1$ax(t2, new P.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._liblib2$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
  }
},

"+NoSuchMethodError": [],

UnsupportedError: {"": "Error;message-",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  "+toString:0:0": 1
},

"+UnsupportedError": [],

UnimplementedError: {"": "Error;message-",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  },
  "+toString:0:0": 1,
  $isError: true
},

"+UnimplementedError": [60],

StateError: {"": "Error;message-",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  "+toString:0:0": 1
},

"+StateError": [],

ConcurrentModificationError: {"": "Error;modifiedObject-",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  "+toString:0:0": 1
},

"+ConcurrentModificationError": [],

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  "+toString:0:0": 1,
  $isError: true
},

"+StackOverflowError": [61],

CyclicInitializationError: {"": "Error;variableName-",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  "+toString:0:0": 1
},

"+CyclicInitializationError": [],

_ExceptionImplementation: {"": "Object;message-",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  },
  "+toString:0:0": 1,
  $isException: true
},

"+_ExceptionImplementation": [62],

FormatException: {"": "Object;message-",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  "+toString:0:0": 1,
  $isException: true
},

"+FormatException": [62],

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  "+toString:0:0": 1,
  $isException: true
},

"+IntegerDivisionByZeroException": [62],

Expando: {"": "Object;name>-",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  "+toString:0:0": 1,
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  "+[]:1:0": 1,
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  "+[]=:2:0": 1,
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  "+_getKey:0:0": 1,
  static: {
"": "Expando__KEY_PROPERTY_NAME-,Expando__EXPANDO_PROPERTY_NAME-,Expando__keyCount-",
}

},

"+Expando": [],

Function: {"": "Object;", $isFunction: true},

"+Function": [],

Iterator: {"": "Object;"},

"+Iterator": [],

Map: {"": "Object;", $isMap: true},

"+Map": [],

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  },
  "+toString:0:0": 1
},

"+Null": [],

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  "+hashCode": 1,
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  },
  "+toString:0:0": 1,
  noSuchMethod$1: function(_, invocation) {
    throw H.wrapException(new P.NoSuchMethodError(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  "+noSuchMethod:1:0": 1,
  $$dom_addEventListener$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
  },
  "+$dom_addEventListener:3:0": 1,
  $$dom_removeEventListener$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
  },
  "+$dom_removeEventListener:3:0": 1,
  $add: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  "++:1:0": 1,
  $and: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  "+&:1:0": 1,
  $div: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("/", "$div", 0, [$0], []));
  },
  "+/:1:0": 1,
  $ge: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  "+>=:1:0": 1,
  $gt: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  "+>:1:0": 1,
  $index: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  "+[]:1:0": 1,
  $indexSet: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  "+[]=:2:0": 1,
  $le: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  "+<=:1:0": 1,
  $lt: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  "+<:1:0": 1,
  $mod: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("%", "$mod", 0, [$0], []));
  },
  "+%:1:0": 1,
  $mul: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  "+*:1:0": 1,
  $negate: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("unary-", "$negate", 0, [], []));
  },
  "+unary-:0:0": 1,
  $or: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("|", "$or", 0, [$0], []));
  },
  "+|:1:0": 1,
  $shl: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  "+<<:1:0": 1,
  $shr: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  "+>>:1:0": 1,
  $sub: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  "+-:1:0": 1,
  $tdiv: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("~/", "$tdiv", 0, [$0], []));
  },
  "+~/:1:0": 1,
  $xor: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("^", "$xor", 0, [$0], []));
  },
  "+^:1:0": 1,
  _addError$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_addError", "_addError$1", 0, [$0], []));
  },
  "+_addError:1:0": 1,
  _addPending$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_addPending", "_addPending$1", 0, [$0], []));
  },
  "+_addPending:1:0": 1,
  _close$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_close", "_close$0", 0, [], []));
  },
  "+_close:0:0": 1,
  _complete$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_complete", "_complete$1", 0, [$0], []));
  },
  "+_complete:1:0": 1,
  _completeError$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_completeError", "_completeError$1", 0, [$0], []));
  },
  "+_completeError:1:0": 1,
  _expectsEvent$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_expectsEvent", "_expectsEvent$1", 0, [$0], []));
  },
  "+_expectsEvent:1:0": 1,
  _initCustomEvent$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_initCustomEvent", "_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
  },
  "+_initCustomEvent:4:0": 1,
  _liblib15$_callback$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_callback", "_liblib15$_callback$2", 0, [$0, $1], []));
  },
  "+_callback:2:0": 1,
  _liblib5$_add$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_add", "_liblib5$_add$1", 0, [$0], []));
  },
  "+_add:1:0": 1,
  _onError$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_onError", "_onError$1", 0, [$0], []));
  },
  "+_onError:1:0": 1,
  _onValue$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_onValue", "_onValue$1", 0, [$0], []));
  },
  "+_onValue:1:0": 1,
  _publish$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_publish", "_publish$1", 0, [$0], []));
  },
  "+_publish:1:0": 1,
  _removeChild$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_removeChild", "_removeChild$1", 0, [$0], []));
  },
  "+_removeChild:1:0": 1,
  _removeListeners$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_removeListeners", "_removeListeners$0", 0, [], []));
  },
  "+_removeListeners:0:0": 1,
  _replaceChild$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_replaceChild", "_replaceChild$2", 0, [$0, $1], []));
  },
  "+_replaceChild:2:0": 1,
  _setError$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_setError", "_setError$1", 0, [$0], []));
  },
  "+_setError:1:0": 1,
  _setRemoveAfterFiring$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_setRemoveAfterFiring", "_setRemoveAfterFiring$0", 0, [], []));
  },
  "+_setRemoveAfterFiring:0:0": 1,
  _setValue$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_setValue", "_setValue$1", 0, [$0], []));
  },
  "+_setValue:1:0": 1,
  _toggleEventId$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_toggleEventId", "_toggleEventId$0", 0, [], []));
  },
  "+_toggleEventId:0:0": 1,
  _whenCompleteAction$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_whenCompleteAction", "_whenCompleteAction$0", 0, [], []));
  },
  "+_whenCompleteAction:0:0": 1,
  abs$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("abs", "abs$0", 0, [], []));
  },
  "+abs:0:0": 1,
  add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  "+add:1:0": 1,
  add$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$2", 0, [$0, $1], []));
  },
  "+add:2:0": 1,
  add$3$id: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$3$id", 0, [$0, $1, $2], ["id"]));
  },
  "+add:3:0:id": 1,
  add$3$klass: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$3$klass", 0, [$0, $1, $2], ["klass"]));
  },
  "+add:3:0:klass": 1,
  add$4$id$klass: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$4$id$klass", 0, [$0, $1, $2, $3], ["id", "klass"]));
  },
  "+add:4:0:id:klass": 1,
  addAll$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  "+addAll:1:0": 1,
  addClass$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("addClass", "addClass$1", 0, [$0], []));
  },
  "+addClass:1:0": 1,
  addLeftNeighbor$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("addLeftNeighbor", "addLeftNeighbor$2", 0, [$0, $1], []));
  },
  "+addLeftNeighbor:2:0": 1,
  addPath$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("addPath", "addPath$3", 0, [$0, $1, $2], []));
  },
  "+addPath:3:0": 1,
  addPoint$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("addPoint", "addPoint$1", 0, [$0], []));
  },
  "+addPoint:1:0": 1,
  addRightNeighbor$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("addRightNeighbor", "addRightNeighbor$2", 0, [$0, $1], []));
  },
  "+addRightNeighbor:2:0": 1,
  adjustRank$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("adjustRank", "adjustRank$2", 0, [$0, $1], []));
  },
  "+adjustRank:2:0": 1,
  allMatches$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
  },
  "+allMatches:1:0": 1,
  allowsAttribute$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("allowsAttribute", "allowsAttribute$3", 0, [$0, $1, $2], []));
  },
  "+allowsAttribute:3:0": 1,
  allowsElement$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("allowsElement", "allowsElement$1", 0, [$0], []));
  },
  "+allowsElement:1:0": 1,
  allowsUri$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("allowsUri", "allowsUri$1", 0, [$0], []));
  },
  "+allowsUri:1:0": 1,
  append$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("append", "append$1", 0, [$0], []));
  },
  "+append:1:0": 1,
  appendHtml$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("appendHtml", "appendHtml$1", 0, [$0], []));
  },
  "+appendHtml:1:0": 1,
  appendText$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("appendText", "appendText$1", 0, [$0], []));
  },
  "+appendText:1:0": 1,
  apply$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("apply", "apply$1", 0, [$0], []));
  },
  "+apply:1:0": 1,
  assignIndices$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("assignIndices", "assignIndices$0", 0, [], []));
  },
  "+assignIndices:0:0": 1,
  bend$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bend", "bend$1", 0, [$0], []));
  },
  "+bend:1:0": 1,
  bind$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bind", "bind$3", 0, [$0, $1, $2], []));
  },
  "+bind:3:0": 1,
  bindCallback$2$runGuarded: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bindCallback", "bindCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
  },
  "+bindCallback:2:0:runGuarded": 1,
  bindClass$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bindClass", "bindClass$3", 0, [$0, $1, $2], []));
  },
  "+bindClass:3:0": 1,
  bindUnaryCallback$2$runGuarded: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bindUnaryCallback", "bindUnaryCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
  },
  "+bindUnaryCallback:2:0:runGuarded": 1,
  bottom$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bottom", "bottom$0", 0, [], []));
  },
  "+bottom:0:0": 1,
  call$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$0", 0, [], []));
  },
  "+call:0:0": 1,
  call$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1", 0, [$0], []));
  },
  "+call:1:0": 1,
  call$1$backtrack: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$backtrack", 0, [$0], ["backtrack"]));
  },
  "+call:1:0:backtrack": 1,
  call$1$nstates: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$nstates", 0, [$0], ["nstates"]));
  },
  "+call:1:0:nstates": 1,
  call$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
  },
  "+call:2:0": 1,
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  "+call:2:0:onError": 1,
  call$2$phaseName: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$phaseName", 0, [$0, $1], ["phaseName"]));
  },
  "+call:2:0:phaseName": 1,
  call$2$runGuarded: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
  },
  "+call:2:0:runGuarded": 1,
  call$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
  },
  "+call:3:0": 1,
  call$3$async: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$async", 0, [$0, $1, $2], ["async"]));
  },
  "+call:3:0:async": 1,
  call$3$id: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$id", 0, [$0, $1, $2], ["id"]));
  },
  "+call:3:0:id": 1,
  call$3$klass: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$klass", 0, [$0, $1, $2], ["klass"]));
  },
  "+call:3:0:klass": 1,
  call$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  "+call:3:0:onDone:onError": 1,
  call$3$treeSanitizer$validator: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$treeSanitizer$validator", 0, [$0, $1, $2], ["treeSanitizer", "validator"]));
  },
  "+call:3:0:treeSanitizer:validator": 1,
  call$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
  },
  "+call:4:0": 1,
  call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  "+call:4:0:cancelOnError:onDone:onError": 1,
  call$4$id$klass: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4$id$klass", 0, [$0, $1, $2, $3], ["id", "klass"]));
  },
  "+call:4:0:id:klass": 1,
  call$5: function($0, $1, $2, $3, $4) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$5", 0, [$0, $1, $2, $3, $4], []));
  },
  "+call:5:0": 1,
  callSync$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
  },
  "+callSync:1:0": 1,
  canRecognize$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("canRecognize", "canRecognize$1", 0, [$0], []));
  },
  "+canRecognize:1:0": 1,
  cancel$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  "+cancel:0:0": 1,
  catchError$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("catchError", "catchError$1", 0, [$0], []));
  },
  "+catchError:1:0": 1,
  ceil$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("ceil", "ceil$0", 0, [], []));
  },
  "+ceil:0:0": 1,
  cleanup$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
  },
  "+cleanup:0:0": 1,
  clear$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("clear", "clear$0", 0, [], []));
  },
  "+clear:0:0": 1,
  click$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("click", "click$0", 0, [], []));
  },
  "+click:0:0": 1,
  clone$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("clone", "clone$0", 0, [], []));
  },
  "+clone:0:0": 1,
  clone$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("clone", "clone$1", 0, [$0], []));
  },
  "+clone:1:0": 1,
  codeOf$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("codeOf", "codeOf$1", 0, [$0], []));
  },
  "+codeOf:1:0": 1,
  codeUnitAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
  },
  "+codeUnitAt:1:0": 1,
  compareAndNotify$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("compareAndNotify", "compareAndNotify$0", 0, [], []));
  },
  "+compareAndNotify:0:0": 1,
  compareTo$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
  },
  "+compareTo:1:0": 1,
  component$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("component", "component$1", 0, [$0], []));
  },
  "+component:1:0": 1,
  conditional$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("conditional", "conditional$3", 0, [$0, $1, $2], []));
  },
  "+conditional:3:0": 1,
  contains$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("contains", "contains$1", 0, [$0], []));
  },
  "+contains:1:0": 1,
  containsKey$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
  },
  "+containsKey:1:0": 1,
  containsPoint$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("containsPoint", "containsPoint$1", 0, [$0], []));
  },
  "+containsPoint:1:0": 1,
  containsProper$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("containsProper", "containsProper$1", 0, [$0], []));
  },
  "+containsProper:1:0": 1,
  contentBind$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("contentBind", "contentBind$2", 0, [$0, $1], []));
  },
  "+contentBind:2:0": 1,
  cosine$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cosine", "cosine$1", 0, [$0], []));
  },
  "+cosine:1:0": 1,
  count$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("count", "count$0", 0, [], []));
  },
  "+count:0:0": 1,
  create$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("create", "create$0", 0, [], []));
  },
  "+create:0:0": 1,
  createRange$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("createRange", "createRange$1", 0, [$0], []));
  },
  "+createRange:1:0": 1,
  createShadowRoot$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("createShadowRoot", "createShadowRoot$0", 0, [], []));
  },
  "+createShadowRoot:0:0": 1,
  createTimer$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("createTimer", "createTimer$2", 0, [$0, $1], []));
  },
  "+createTimer:2:0": 1,
  crossProduct$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("crossProduct", "crossProduct$1", 0, [$0], []));
  },
  "+crossProduct:1:0": 1,
  data$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("data", "data$1", 0, [$0], []));
  },
  "+data:1:0": 1,
  deserializeCloseToken$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("deserializeCloseToken", "deserializeCloseToken$1", 0, [$0], []));
  },
  "+deserializeCloseToken:1:0": 1,
  deserializeIsolateSink$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("deserializeIsolateSink", "deserializeIsolateSink$1", 0, [$0], []));
  },
  "+deserializeIsolateSink:1:0": 1,
  deserializeSendPort$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("deserializeSendPort", "deserializeSendPort$1", 0, [$0], []));
  },
  "+deserializeSendPort:1:0": 1,
  displayPhase$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("displayPhase", "displayPhase$2", 0, [$0, $1], []));
  },
  "+displayPhase:2:0": 1,
  doubleValue$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("doubleValue", "doubleValue$0", 0, [], []));
  },
  "+doubleValue:0:0": 1,
  edge$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("edge", "edge$1", 0, [$0], []));
  },
  "+edge:1:0": 1,
  endsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
  },
  "+endsWith:1:0": 1,
  eval$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("eval", "eval$1", 0, [$0], []));
  },
  "+eval:1:0": 1,
  firstMatch$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
  },
  "+firstMatch:1:0": 1,
  forEach$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  "+forEach:1:0": 1,
  fullReset$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("fullReset", "fullReset$0", 0, [], []));
  },
  "+fullReset:0:0": 1,
  generateShortestPath$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("generateShortestPath", "generateShortestPath$1", 0, [$0], []));
  },
  "+generateShortestPath:1:0": 1,
  get$$$_observers: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("$_observers", "get$$$_observers", 1, [], []));
  },
  "+$_observers": 1,
  get$$short: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("short", "get$$short", 1, [], []));
  },
  "+short": 1,
  get$Spinner: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("Spinner", "get$Spinner", 1, [], []));
  },
  "+Spinner": 1,
  get$_contents: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_contents", "get$_contents", 1, [], []));
  },
  "+_contents": 1,
  get$_duration: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_duration", "get$_duration", 1, [], []));
  },
  "+_duration": 1,
  get$_error: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_error", "get$_error", 1, [], []));
  },
  "+_error": 1,
  get$_errorTest: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_errorTest", "get$_errorTest", 1, [], []));
  },
  "+_errorTest": 1,
  get$_errorZone: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_errorZone", "get$_errorZone", 1, [], []));
  },
  "+_errorZone": 1,
  get$_eventState: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_eventState", "get$_eventState", 1, [], []));
  },
  "+_eventState": 1,
  get$_hasError: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_hasError", "get$_hasError", 1, [], []));
  },
  "+_hasError": 1,
  get$_isComplete: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_isComplete", "get$_isComplete", 1, [], []));
  },
  "+_isComplete": 1,
  get$_isFiring: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_isFiring", "get$_isFiring", 1, [], []));
  },
  "+_isFiring": 1,
  get$_key: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_key", "get$_key", 1, [], []));
  },
  "+_key": 1,
  get$_liblib1$_element: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_element", "get$_liblib1$_element", 1, [], []));
  },
  "+_element": 1,
  get$_liblib1$_next: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_next", "get$_liblib1$_next", 1, [], []));
  },
  "+_next": 1,
  get$_liblib1$_previous: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_previous", "get$_liblib1$_previous", 1, [], []));
  },
  "+_previous": 1,
  get$_liblib15$_callback: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_callback", "get$_liblib15$_callback", 1, [], []));
  },
  "+_callback": 1,
  get$_liblib15$_id: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_id", "get$_liblib15$_id", 1, [], []));
  },
  "+_id": 1,
  get$_liblib5$_next: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_next", "get$_liblib5$_next", 1, [], []));
  },
  "+_next": 1,
  get$_liblib5$_previous: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_previous", "get$_liblib5$_previous", 1, [], []));
  },
  "+_previous": 1,
  get$_liblib5$_value: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_value", "get$_liblib5$_value", 1, [], []));
  },
  "+_value": 1,
  get$_name: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_name", "get$_name", 1, [], []));
  },
  "+_name": 1,
  get$_namespaceUri: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_namespaceUri", "get$_namespaceUri", 1, [], []));
  },
  "+_namespaceUri": 1,
  get$_nextListener: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_nextListener", "get$_nextListener", 1, [], []));
  },
  "+_nextListener": 1,
  get$_onError: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_onError", "get$_onError", 1, [], []));
  },
  "+_onError": 1,
  get$_onValue: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_onValue", "get$_onValue", 1, [], []));
  },
  "+_onValue": 1,
  get$_removeAfterFiring: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_removeAfterFiring", "get$_removeAfterFiring", 1, [], []));
  },
  "+_removeAfterFiring": 1,
  get$_specification: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_specification", "get$_specification", 1, [], []));
  },
  "+_specification": 1,
  get$_value: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_value", "get$_value", 1, [], []));
  },
  "+_value": 1,
  get$_whenCompleteAction: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_whenCompleteAction", "get$_whenCompleteAction", 1, [], []));
  },
  "+_whenCompleteAction": 1,
  get$_zone: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_zone", "get$_zone", 1, [], []));
  },
  "+_zone": 1,
  get$args: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("args", "get$args", 1, [], []));
  },
  "+args": 1,
  get$attributes: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("attributes", "get$attributes", 1, [], []));
  },
  "+attributes": 1,
  get$blocks: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("blocks", "get$blocks", 1, [], []));
  },
  "+blocks": 1,
  get$bottom: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bottom", "get$bottom", 1, [], []));
  },
  "+bottom": 1,
  get$bottomLeft: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bottomLeft", "get$bottomLeft", 1, [], []));
  },
  "+bottomLeft": 1,
  get$bottomPadding: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bottomPadding", "get$bottomPadding", 1, [], []));
  },
  "+bottomPadding": 1,
  get$bottomRight: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bottomRight", "get$bottomRight", 1, [], []));
  },
  "+bottomRight": 1,
  get$cachedCosines: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cachedCosines", "get$cachedCosines", 1, [], []));
  },
  "+cachedCosines": 1,
  get$center: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("center", "get$center", 1, [], []));
  },
  "+center": 1,
  get$changes: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("changes", "get$changes", 1, [], []));
  },
  "+changes": 1,
  get$children: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("children", "get$children", 1, [], []));
  },
  "+children": 1,
  get$className: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("className", "get$className", 1, [], []));
  },
  "+className": 1,
  get$classes: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("classes", "get$classes", 1, [], []));
  },
  "+classes": 1,
  get$client: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("client", "get$client", 1, [], []));
  },
  "+client": 1,
  get$clientHeight: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("clientHeight", "get$clientHeight", 1, [], []));
  },
  "+clientHeight": 1,
  get$code: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("code", "get$code", 1, [], []));
  },
  "+code": 1,
  get$codeMode: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("codeMode", "get$codeMode", 1, [], []));
  },
  "+codeMode": 1,
  get$comment: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("comment", "get$comment", 1, [], []));
  },
  "+comment": 1,
  get$cost: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cost", "get$cost", 1, [], []));
  },
  "+cost": 1,
  get$count: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("count", "get$count", 1, [], []));
  },
  "+count": 1,
  get$createTimer: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("createTimer", "get$createTimer", 1, [], []));
  },
  "+createTimer": 1,
  get$current: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("current", "get$current", 1, [], []));
  },
  "+current": 1,
  get$cut: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cut", "get$cut", 1, [], []));
  },
  "+cut": 1,
  get$data: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("data", "get$data", 1, [], []));
  },
  "+data": 1,
  get$delta: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("delta", "get$delta", 1, [], []));
  },
  "+delta": 1,
  get$deopts: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("deopts", "get$deopts", 1, [], []));
  },
  "+deopts": 1,
  get$detail: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("detail", "get$detail", 1, [], []));
  },
  "+detail": 1,
  get$document: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("document", "get$document", 1, [], []));
  },
  "+document": 1,
  get$end: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("end", "get$end", 1, [], []));
  },
  "+end": 1,
  get$epilogue: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("epilogue", "get$epilogue", 1, [], []));
  },
  "+epilogue": 1,
  get$exclude: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("exclude", "get$exclude", 1, [], []));
  },
  "+exclude": 1,
  get$excludedObstacles: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("excludedObstacles", "get$excludedObstacles", 1, [], []));
  },
  "+excludedObstacles": 1,
  get$files: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("files", "get$files", 1, [], []));
  },
  "+files": 1,
  get$first: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("first", "get$first", 1, [], []));
  },
  "+first": 1,
  get$firstChild: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("firstChild", "get$firstChild", 1, [], []));
  },
  "+firstChild": 1,
  get$firstTimestamp: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("firstTimestamp", "get$firstTimestamp", 1, [], []));
  },
  "+firstTimestamp": 1,
  get$flag: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("flag", "get$flag", 1, [], []));
  },
  "+flag": 1,
  get$from: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("from", "get$from", 1, [], []));
  },
  "+from": 1,
  get$full: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("full", "get$full", 1, [], []));
  },
  "+full": 1,
  get$fullName: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("fullName", "get$fullName", 1, [], []));
  },
  "+fullName": 1,
  get$grownSegments: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("grownSegments", "get$grownSegments", 1, [], []));
  },
  "+grownSegments": 1,
  get$gutter: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("gutter", "get$gutter", 1, [], []));
  },
  "+gutter": 1,
  get$handleUncaughtError: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("handleUncaughtError", "get$handleUncaughtError", 1, [], []));
  },
  "+handleUncaughtError": 1,
  get$height: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("height", "get$height", 1, [], []));
  },
  "+height": 1,
  get$hir: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("hir", "get$hir", 1, [], []));
  },
  "+hir": 1,
  get$hostname: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("hostname", "get$hostname", 1, [], []));
  },
  "+hostname": 1,
  get$href: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("href", "get$href", 1, [], []));
  },
  "+href": 1,
  get$id: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("id", "get$id", 1, [], []));
  },
  "+id": 1,
  get$inMilliseconds: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("inMilliseconds", "get$inMilliseconds", 1, [], []));
  },
  "+inMilliseconds": 1,
  get$incoming: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("incoming", "get$incoming", 1, [], []));
  },
  "+incoming": 1,
  get$index: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("index", "get$index", 1, [], []));
  },
  "+index": 1,
  get$innerHtml: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("innerHtml", "get$innerHtml", 1, [], []));
  },
  "+innerHtml": 1,
  get$ir: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("ir", "get$ir", 1, [], []));
  },
  "+ir": 1,
  get$isDirty: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isDirty", "get$isDirty", 1, [], []));
  },
  "+isDirty": 1,
  get$isEmpty: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  "+isEmpty": 1,
  get$isFeedback: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isFeedback", "get$isFeedback", 1, [], []));
  },
  "+isFeedback": 1,
  get$isGetter: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isGetter", "get$isGetter", 1, [], []));
  },
  "+isGetter": 1,
  get$isInverted: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isInverted", "get$isInverted", 1, [], []));
  },
  "+isInverted": 1,
  get$isLazy: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isLazy", "get$isLazy", 1, [], []));
  },
  "+isLazy": 1,
  get$isMarked: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isMarked", "get$isMarked", 1, [], []));
  },
  "+isMarked": 1,
  get$isNotEmpty: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isNotEmpty", "get$isNotEmpty", 1, [], []));
  },
  "+isNotEmpty": 1,
  get$isPermanent: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isPermanent", "get$isPermanent", 1, [], []));
  },
  "+isPermanent": 1,
  get$isSetMember: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isSetMember", "get$isSetMember", 1, [], []));
  },
  "+isSetMember": 1,
  get$isSetter: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isSetter", "get$isSetter", 1, [], []));
  },
  "+isSetter": 1,
  get$isTight: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isTight", "get$isTight", 1, [], []));
  },
  "+isTight": 1,
  get$isolateStatics: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isolateStatics", "get$isolateStatics", 1, [], []));
  },
  "+isolateStatics": 1,
  get$iterator: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  "+iterator": 1,
  get$key: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("key", "get$key", 1, [], []));
  },
  "+key": 1,
  get$keys: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("keys", "get$keys", 1, [], []));
  },
  "+keys": 1,
  get$label: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("label", "get$label", 1, [], []));
  },
  "+label": 1,
  get$last: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("last", "get$last", 1, [], []));
  },
  "+last": 1,
  get$lastChild: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("lastChild", "get$lastChild", 1, [], []));
  },
  "+lastChild": 1,
  get$lastOffset: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("lastOffset", "get$lastOffset", 1, [], []));
  },
  "+lastOffset": 1,
  get$left: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("left", "get$left", 1, [], []));
  },
  "+left": 1,
  get$leftCount: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("leftCount", "get$leftCount", 1, [], []));
  },
  "+leftCount": 1,
  get$leftFreedom: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("leftFreedom", "get$leftFreedom", 1, [], []));
  },
  "+leftFreedom": 1,
  get$leftLinks: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("leftLinks", "get$leftLinks", 1, [], []));
  },
  "+leftLinks": 1,
  get$leftNeighbors: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("leftNeighbors", "get$leftNeighbors", 1, [], []));
  },
  "+leftNeighbors": 1,
  get$leftNonzero: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("leftNonzero", "get$leftNonzero", 1, [], []));
  },
  "+leftNonzero": 1,
  get$length: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("length", "get$length", 1, [], []));
  },
  "+length": 1,
  get$level: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("level", "get$level", 1, [], []));
  },
  "+level": 1,
  get$lir: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("lir", "get$lir", 1, [], []));
  },
  "+lir": 1,
  get$list: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("list", "get$list", 1, [], []));
  },
  "+list": 1,
  get$loadProfile: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("loadProfile", "get$loadProfile", 1, [], []));
  },
  "+loadProfile": 1,
  get$memberName: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("memberName", "get$memberName", 1, [], []));
  },
  "+memberName": 1,
  get$method: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("method", "get$method", 1, [], []));
  },
  "+method": 1,
  get$millisecondsSinceEpoch: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("millisecondsSinceEpoch", "get$millisecondsSinceEpoch", 1, [], []));
  },
  "+millisecondsSinceEpoch": 1,
  get$name: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("name", "get$name", 1, [], []));
  },
  "+name": 1,
  get$namedArguments: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("namedArguments", "get$namedArguments", 1, [], []));
  },
  "+namedArguments": 1,
  get$nearestObstacle: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nearestObstacle", "get$nearestObstacle", 1, [], []));
  },
  "+nearestObstacle": 1,
  get$nearestObstacleChecked: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nearestObstacleChecked", "get$nearestObstacleChecked", 1, [], []));
  },
  "+nearestObstacleChecked": 1,
  get$neighbors: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("neighbors", "get$neighbors", 1, [], []));
  },
  "+neighbors": 1,
  get$newUrl: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("newUrl", "get$newUrl", 1, [], []));
  },
  "+newUrl": 1,
  get$newValue: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("newValue", "get$newValue", 1, [], []));
  },
  "+newValue": 1,
  get$next: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("next", "get$next", 1, [], []));
  },
  "+next": 1,
  get$nextNode: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nextNode", "get$nextNode", 1, [], []));
  },
  "+nextNode": 1,
  get$node: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("node", "get$node", 1, [], []));
  },
  "+node": 1,
  get$nodeType: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nodeType", "get$nodeType", 1, [], []));
  },
  "+nodeType": 1,
  get$nodes: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  "+nodes": 1,
  get$obs: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("obs", "get$obs", 1, [], []));
  },
  "+obs": 1,
  get$offset: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("offset", "get$offset", 1, [], []));
  },
  "+offset": 1,
  get$offsetIncoming: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("offsetIncoming", "get$offsetIncoming", 1, [], []));
  },
  "+offsetIncoming": 1,
  get$offsetOutgoing: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("offsetOutgoing", "get$offsetOutgoing", 1, [], []));
  },
  "+offsetOutgoing": 1,
  get$oldUrl: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("oldUrl", "get$oldUrl", 1, [], []));
  },
  "+oldUrl": 1,
  get$oldValue: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("oldValue", "get$oldValue", 1, [], []));
  },
  "+oldValue": 1,
  get$onChange: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onChange", "get$onChange", 1, [], []));
  },
  "+onChange": 1,
  get$onClick: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onClick", "get$onClick", 1, [], []));
  },
  "+onClick": 1,
  get$onKeyUp: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onKeyUp", "get$onKeyUp", 1, [], []));
  },
  "+onKeyUp": 1,
  get$onMouseOut: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onMouseOut", "get$onMouseOut", 1, [], []));
  },
  "+onMouseOut": 1,
  get$onMouseOver: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onMouseOver", "get$onMouseOver", 1, [], []));
  },
  "+onMouseOver": 1,
  get$onResize: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onResize", "get$onResize", 1, [], []));
  },
  "+onResize": 1,
  get$onScroll: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("onScroll", "get$onScroll", 1, [], []));
  },
  "+onScroll": 1,
  get$op: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("op", "get$op", 1, [], []));
  },
  "+op": 1,
  get$outgoing: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("outgoing", "get$outgoing", 1, [], []));
  },
  "+outgoing": 1,
  get$padding: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("padding", "get$padding", 1, [], []));
  },
  "+padding": 1,
  get$parent: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("parent", "get$parent", 1, [], []));
  },
  "+parent": 1,
  get$parentNode: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("parentNode", "get$parentNode", 1, [], []));
  },
  "+parentNode": 1,
  get$paths: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("paths", "get$paths", 1, [], []));
  },
  "+paths": 1,
  get$phases: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("phases", "get$phases", 1, [], []));
  },
  "+phases": 1,
  get$points: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("points", "get$points", 1, [], []));
  },
  "+points": 1,
  get$port: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("port", "get$port", 1, [], []));
  },
  "+port": 1,
  get$positionOnObstacle: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("positionOnObstacle", "get$positionOnObstacle", 1, [], []));
  },
  "+positionOnObstacle": 1,
  get$positionalArguments: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("positionalArguments", "get$positionalArguments", 1, [], []));
  },
  "+positionalArguments": 1,
  get$predecessors: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("predecessors", "get$predecessors", 1, [], []));
  },
  "+predecessors": 1,
  get$previousNode: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("previousNode", "get$previousNode", 1, [], []));
  },
  "+previousNode": 1,
  get$prologue: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("prologue", "get$prologue", 1, [], []));
  },
  "+prologue": 1,
  get$protocol: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("protocol", "get$protocol", 1, [], []));
  },
  "+protocol": 1,
  get$rangeContentAsHtml: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rangeContentAsHtml", "get$rangeContentAsHtml", 1, [], []));
  },
  "+rangeContentAsHtml": 1,
  get$rangeContentAsHtmlFull: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rangeContentAsHtmlFull", "get$rangeContentAsHtmlFull", 1, [], []));
  },
  "+rangeContentAsHtmlFull": 1,
  get$rank: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rank", "get$rank", 1, [], []));
  },
  "+rank": 1,
  get$raw: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("raw", "get$raw", 1, [], []));
  },
  "+raw": 1,
  get$registerCallback: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("registerCallback", "get$registerCallback", 1, [], []));
  },
  "+registerCallback": 1,
  get$registerUnaryCallback: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("registerUnaryCallback", "get$registerUnaryCallback", 1, [], []));
  },
  "+registerUnaryCallback": 1,
  get$remove: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "get$remove", 1, [], []));
  },
  "+remove": 1,
  get$reopts: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("reopts", "get$reopts", 1, [], []));
  },
  "+reopts": 1,
  get$responseText: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("responseText", "get$responseText", 1, [], []));
  },
  "+responseText": 1,
  get$right: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("right", "get$right", 1, [], []));
  },
  "+right": 1,
  get$rightCount: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rightCount", "get$rightCount", 1, [], []));
  },
  "+rightCount": 1,
  get$rightFreedom: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rightFreedom", "get$rightFreedom", 1, [], []));
  },
  "+rightFreedom": 1,
  get$rightLinks: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rightLinks", "get$rightLinks", 1, [], []));
  },
  "+rightLinks": 1,
  get$rightNeighbors: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rightNeighbors", "get$rightNeighbors", 1, [], []));
  },
  "+rightNeighbors": 1,
  get$rightNonzero: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rightNonzero", "get$rightNonzero", 1, [], []));
  },
  "+rightNonzero": 1,
  get$run: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("run", "get$run", 1, [], []));
  },
  "+run": 1,
  get$runUnary: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("runUnary", "get$runUnary", 1, [], []));
  },
  "+runUnary": 1,
  get$scheduleMicrotask: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scheduleMicrotask", "get$scheduleMicrotask", 1, [], []));
  },
  "+scheduleMicrotask": 1,
  get$scrollLeft: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scrollLeft", "get$scrollLeft", 1, [], []));
  },
  "+scrollLeft": 1,
  get$scrollTop: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scrollTop", "get$scrollTop", 1, [], []));
  },
  "+scrollTop": 1,
  get$segments: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("segments", "get$segments", 1, [], []));
  },
  "+segments": 1,
  get$slack: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("slack", "get$slack", 1, [], []));
  },
  "+slack": 1,
  get$sortValue: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("sortValue", "get$sortValue", 1, [], []));
  },
  "+sortValue": 1,
  get$source: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("source", "get$source", 1, [], []));
  },
  "+source": 1,
  get$sourceOffset: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("sourceOffset", "get$sourceOffset", 1, [], []));
  },
  "+sourceOffset": 1,
  get$start: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("start", "get$start", 1, [], []));
  },
  "+start": 1,
  get$style: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("style", "get$style", 1, [], []));
  },
  "+style": 1,
  get$successors: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("successors", "get$successors", 1, [], []));
  },
  "+successors": 1,
  get$supportedCodeModes: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("supportedCodeModes", "get$supportedCodeModes", 1, [], []));
  },
  "+supportedCodeModes": 1,
  get$tagName: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("tagName", "get$tagName", 1, [], []));
  },
  "+tagName": 1,
  get$target: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("target", "get$target", 1, [], []));
  },
  "+target": 1,
  get$targetOffset: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("targetOffset", "get$targetOffset", 1, [], []));
  },
  "+targetOffset": 1,
  get$text: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("text", "get$text", 1, [], []));
  },
  "+text": 1,
  get$threshold: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("threshold", "get$threshold", 1, [], []));
  },
  "+threshold": 1,
  get$ticks: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("ticks", "get$ticks", 1, [], []));
  },
  "+ticks": 1,
  get$timestamp: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("timestamp", "get$timestamp", 1, [], []));
  },
  "+timestamp": 1,
  get$to: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("to", "get$to", 1, [], []));
  },
  "+to": 1,
  get$top: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("top", "get$top", 1, [], []));
  },
  "+top": 1,
  get$topLeft: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("topLeft", "get$topLeft", 1, [], []));
  },
  "+topLeft": 1,
  get$topPadding: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("topPadding", "get$topPadding", 1, [], []));
  },
  "+topPadding": 1,
  get$topRight: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("topRight", "get$topRight", 1, [], []));
  },
  "+topRight": 1,
  get$total: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("total", "get$total", 1, [], []));
  },
  "+total": 1,
  get$totalCount: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("totalCount", "get$totalCount", 1, [], []));
  },
  "+totalCount": 1,
  get$tree: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("tree", "get$tree", 1, [], []));
  },
  "+tree": 1,
  get$type: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("type", "get$type", 1, [], []));
  },
  "+type": 1,
  get$unweightedTotal: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("unweightedTotal", "get$unweightedTotal", 1, [], []));
  },
  "+unweightedTotal": 1,
  get$uriPolicy: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("uriPolicy", "get$uriPolicy", 1, [], []));
  },
  "+uriPolicy": 1,
  get$vNodes: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("vNodes", "get$vNodes", 1, [], []));
  },
  "+vNodes": 1,
  get$value: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("value", "get$value", 1, [], []));
  },
  "+value": 1,
  get$values: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("values", "get$values", 1, [], []));
  },
  "+values": 1,
  get$visibleObstacles: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visibleObstacles", "get$visibleObstacles", 1, [], []));
  },
  "+visibleObstacles": 1,
  get$weight: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("weight", "get$weight", 1, [], []));
  },
  "+weight": 1,
  get$weightedDivisor: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("weightedDivisor", "get$weightedDivisor", 1, [], []));
  },
  "+weightedDivisor": 1,
  get$weightedTotal: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("weightedTotal", "get$weightedTotal", 1, [], []));
  },
  "+weightedTotal": 1,
  get$width: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("width", "get$width", 1, [], []));
  },
  "+width": 1,
  get$window: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("window", "get$window", 1, [], []));
  },
  "+window": 1,
  get$workingData: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("workingData", "get$workingData", 1, [], []));
  },
  "+workingData": 1,
  get$workingInts: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("workingInts", "get$workingInts", 1, [], []));
  },
  "+workingInts": 1,
  get$x: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("x", "get$x", 1, [], []));
  },
  "+x": 1,
  get$xtag: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("xtag", "get$xtag", 1, [], []));
  },
  "+xtag": 1,
  get$y: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("y", "get$y", 1, [], []));
  },
  "+y": 1,
  getBendPoints$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getBendPoints", "getBendPoints$0", 0, [], []));
  },
  "+getBendPoints:0:0": 1,
  getBoundingClientRect$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getBoundingClientRect", "getBoundingClientRect$0", 0, [], []));
  },
  "+getBoundingClientRect:0:0": 1,
  getDeformedRectangle$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getDeformedRectangle", "getDeformedRectangle$1", 0, [$0], []));
  },
  "+getDeformedRectangle:1:0": 1,
  getDistance$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getDistance", "getDistance$1", 0, [$0], []));
  },
  "+getDistance:1:0": 1,
  getEndPoint$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getEndPoint", "getEndPoint$0", 0, [], []));
  },
  "+getEndPoint:0:0": 1,
  getIndexForRank$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getIndexForRank", "getIndexForRank$1", 0, [$0], []));
  },
  "+getIndexForRank:1:0": 1,
  getLength$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getLength", "getLength$0", 0, [], []));
  },
  "+getLength:0:0": 1,
  getNamespacedAttributes$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getNamespacedAttributes", "getNamespacedAttributes$1", 0, [$0], []));
  },
  "+getNamespacedAttributes:1:0": 1,
  getPoints$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getPoints", "getPoints$0", 0, [], []));
  },
  "+getPoints:0:0": 1,
  getPosition$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getPosition", "getPosition$1", 0, [$0], []));
  },
  "+getPosition:1:0": 1,
  getPropertyValue$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getPropertyValue", "getPropertyValue$1", 0, [$0], []));
  },
  "+getPropertyValue:1:0": 1,
  getPull$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getPull", "getPull$0", 0, [], []));
  },
  "+getPull:0:0": 1,
  getRange$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getRange", "getRange$2", 0, [$0, $1], []));
  },
  "+getRange:2:0": 1,
  getRightNeighbor$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getRightNeighbor", "getRightNeighbor$1", 0, [$0], []));
  },
  "+getRightNeighbor:1:0": 1,
  getSlope$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getSlope", "getSlope$0", 0, [], []));
  },
  "+getSlope:0:0": 1,
  getSourceIndex$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getSourceIndex", "getSourceIndex$1", 0, [$0], []));
  },
  "+getSourceIndex:1:0": 1,
  getStartPoint$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getStartPoint", "getStartPoint$0", 0, [], []));
  },
  "+getStartPoint:0:0": 1,
  getSubPath$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getSubPath", "getSubPath$1", 0, [$0], []));
  },
  "+getSubPath:1:0": 1,
  getTargetIndex$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getTargetIndex", "getTargetIndex$1", 0, [$0], []));
  },
  "+getTargetIndex:1:0": 1,
  getTransposed$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("getTransposed", "getTransposed$0", 0, [], []));
  },
  "+getTransposed:0:0": 1,
  group$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("group", "group$1", 0, [$0], []));
  },
  "+group:1:0": 1,
  grow$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("grow", "grow$0", 0, [], []));
  },
  "+grow:0:0": 1,
  growVertices$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("growVertices", "growVertices$0", 0, [], []));
  },
  "+growVertices:0:0": 1,
  handleUncaughtError$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("handleUncaughtError", "handleUncaughtError$1", 0, [$0], []));
  },
  "+handleUncaughtError:1:0": 1,
  hasNext$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("hasNext", "hasNext$0", 0, [], []));
  },
  "+hasNext:0:0": 1,
  height$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("height", "height$0", 0, [], []));
  },
  "+height:0:0": 1,
  href$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("href", "href$1", 0, [$0], []));
  },
  "+href:1:0": 1,
  inSameErrorZone$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("inSameErrorZone", "inSameErrorZone$1", 0, [$0], []));
  },
  "+inSameErrorZone:1:0": 1,
  indexOf$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
  },
  "+indexOf:1:0": 1,
  indexOf$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
  },
  "+indexOf:2:0": 1,
  info$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("info", "info$1", 0, [$0], []));
  },
  "+info:1:0": 1,
  initValues$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("initValues", "initValues$0", 0, [], []));
  },
  "+initValues:0:0": 1,
  insert$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("insert", "insert$0", 0, [], []));
  },
  "+insert:0:0": 1,
  insertAllBefore$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("insertAllBefore", "insertAllBefore$2", 0, [$0, $1], []));
  },
  "+insertAllBefore:2:0": 1,
  insertBefore$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("insertBefore", "insertBefore$2", 0, [$0, $1], []));
  },
  "+insertBefore:2:0": 1,
  insertRange$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("insertRange", "insertRange$3", 0, [$0, $1, $2], []));
  },
  "+insertRange:3:0": 1,
  intersects$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("intersects", "intersects$1", 0, [$0], []));
  },
  "+intersects:1:0": 1,
  intersects$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("intersects", "intersects$4", 0, [$0, $1, $2, $3], []));
  },
  "+intersects:4:0": 1,
  invert$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("invert", "invert$0", 0, [], []));
  },
  "+invert:0:0": 1,
  invertPriorVertices$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("invertPriorVertices", "invertPriorVertices$1", 0, [$0], []));
  },
  "+invertPriorVertices:1:0": 1,
  isCompletelyFlagged$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isCompletelyFlagged", "isCompletelyFlagged$0", 0, [], []));
  },
  "+isCompletelyFlagged:0:0": 1,
  iteratorNeighbors$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("iteratorNeighbors", "iteratorNeighbors$0", 0, [], []));
  },
  "+iteratorNeighbors:0:0": 1,
  jQuery$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("jQuery", "jQuery$1", 0, [$0], []));
  },
  "+jQuery:1:0": 1,
  join$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("join", "join$1", 0, [$0], []));
  },
  "+join:1:0": 1,
  line$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("line", "line$1", 0, [$0], []));
  },
  "+line:1:0": 1,
  listen$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$1", 0, [$0], []));
  },
  "+listen:1:0": 1,
  listen$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$2", 0, [$0, $1], []));
  },
  "+listen:2:0": 1,
  listen$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  "+listen:3:0:onDone:onError": 1,
  lookup$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
  },
  "+lookup:1:0": 1,
  lookup$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("lookup", "lookup$2", 0, [$0, $1], []));
  },
  "+lookup:2:0": 1,
  loop$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("loop", "loop$3", 0, [$0, $1, $2], []));
  },
  "+loop:3:0": 1,
  map$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("map", "map$1", 0, [$0], []));
  },
  "+map:1:0": 1,
  matchAsPrefix$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("matchAsPrefix", "matchAsPrefix$2", 0, [$0, $1], []));
  },
  "+matchAsPrefix:2:0": 1,
  matches$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("matches", "matches$1", 0, [$0], []));
  },
  "+matches:1:0": 1,
  matchesWithAncestors$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("matchesWithAncestors", "matchesWithAncestors$1", 0, [$0], []));
  },
  "+matchesWithAncestors:1:0": 1,
  modify$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("modify", "modify$1", 0, [$0], []));
  },
  "+modify:1:0": 1,
  moveNext$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("moveNext", "moveNext$0", 0, [], []));
  },
  "+moveNext:0:0": 1,
  next$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("next", "next$0", 0, [], []));
  },
  "+next:0:0": 1,
  offset$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("offset", "offset$0", 0, [], []));
  },
  "+offset:0:0": 1,
  opposite$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("opposite", "opposite$1", 0, [$0], []));
  },
  "+opposite:1:0": 1,
  parse$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("parse", "parse$1", 0, [$0], []));
  },
  "+parse:1:0": 1,
  perform$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("perform", "perform$1", 0, [$0], []));
  },
  "+perform:1:0": 1,
  popover$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("popover", "popover$1", 0, [$0], []));
  },
  "+popover:1:0": 1,
  process$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("process", "process$0", 0, [], []));
  },
  "+process:0:0": 1,
  processEdge$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("processEdge", "processEdge$1", 0, [$0], []));
  },
  "+processEdge:1:0": 1,
  query$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("query", "query$1", 0, [$0], []));
  },
  "+query:1:0": 1,
  queryAll$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("queryAll", "queryAll$1", 0, [$0], []));
  },
  "+queryAll:1:0": 1,
  readClasses$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("readClasses", "readClasses$0", 0, [], []));
  },
  "+readClasses:0:0": 1,
  reconnectSubPaths$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("reconnectSubPaths", "reconnectSubPaths$0", 0, [], []));
  },
  "+reconnectSubPaths:0:0": 1,
  refreshExcludedObstacles$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("refreshExcludedObstacles", "refreshExcludedObstacles$1", 0, [$0], []));
  },
  "+refreshExcludedObstacles:1:0": 1,
  refreshValues$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("refreshValues", "refreshValues$0", 0, [], []));
  },
  "+refreshValues:0:0": 1,
  registerCallback$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("registerCallback", "registerCallback$1", 0, [$0], []));
  },
  "+registerCallback:1:0": 1,
  registerUnaryCallback$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("registerUnaryCallback", "registerUnaryCallback$1", 0, [$0], []));
  },
  "+registerUnaryCallback:1:0": 1,
  remove$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  "+remove:0:0": 1,
  remove$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "remove$1", 0, [$0], []));
  },
  "+remove:1:0": 1,
  removeAll$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("removeAll", "removeAll$1", 0, [$0], []));
  },
  "+removeAll:1:0": 1,
  removeAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("removeAt", "removeAt$1", 0, [$0], []));
  },
  "+removeAt:1:0": 1,
  removeLast$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  "+removeLast:0:0": 1,
  removePoint$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("removePoint", "removePoint$1", 0, [$0], []));
  },
  "+removePoint:1:0": 1,
  replaceAll$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
  },
  "+replaceAll:2:0": 1,
  replaceAllMapped$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("replaceAllMapped", "replaceAllMapped$2", 0, [$0, $1], []));
  },
  "+replaceAllMapped:2:0": 1,
  replaceWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  "+replaceWith:1:0": 1,
  reset$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("reset", "reset$0", 0, [], []));
  },
  "+reset:0:0": 1,
  resetPartial$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("resetPartial", "resetPartial$0", 0, [], []));
  },
  "+resetPartial:0:0": 1,
  revert$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("revert", "revert$0", 0, [], []));
  },
  "+revert:0:0": 1,
  right$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("right", "right$0", 0, [], []));
  },
  "+right:0:0": 1,
  run$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("run", "run$1", 0, [$0], []));
  },
  "+run:1:0": 1,
  runGuarded$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("runGuarded", "runGuarded$1", 0, [$0], []));
  },
  "+runGuarded:1:0": 1,
  runUnaryGuarded$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("runUnaryGuarded", "runUnaryGuarded$2", 0, [$0, $1], []));
  },
  "+runUnaryGuarded:2:0": 1,
  scheduleMicrotask$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scheduleMicrotask", "scheduleMicrotask$1", 0, [$0], []));
  },
  "+scheduleMicrotask:1:0": 1,
  scrollIntoView$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scrollIntoView", "scrollIntoView$1", 0, [$0], []));
  },
  "+scrollIntoView:1:0": 1,
  scrollLeft$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scrollLeft", "scrollLeft$0", 0, [], []));
  },
  "+scrollLeft:0:0": 1,
  scrollTo$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scrollTo", "scrollTo$2", 0, [$0, $1], []));
  },
  "+scrollTo:2:0": 1,
  scrollTop$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("scrollTop", "scrollTop$0", 0, [], []));
  },
  "+scrollTop:0:0": 1,
  send$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  "+send:2:0": 1,
  set$$$_observers: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("$_observers=", "set$$$_observers", 2, [$0], []));
  },
  "+$_observers=": 1,
  set$_eventState: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_eventState=", "set$_eventState", 2, [$0], []));
  },
  "+_eventState=": 1,
  set$_innerHtml: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_innerHtml=", "set$_innerHtml", 2, [$0], []));
  },
  "+_innerHtml=": 1,
  set$_isChained: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_isChained=", "set$_isChained", 2, [$0], []));
  },
  "+_isChained=": 1,
  set$_liblib1$_next: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_next=", "set$_liblib1$_next", 2, [$0], []));
  },
  "+_next=": 1,
  set$_liblib1$_previous: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_previous=", "set$_liblib1$_previous", 2, [$0], []));
  },
  "+_previous=": 1,
  set$_liblib5$_next: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_next=", "set$_liblib5$_next", 2, [$0], []));
  },
  "+_next=": 1,
  set$_liblib5$_previous: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_previous=", "set$_liblib5$_previous", 2, [$0], []));
  },
  "+_previous=": 1,
  set$_nextListener: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_nextListener=", "set$_nextListener", 2, [$0], []));
  },
  "+_nextListener=": 1,
  set$_value: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("_value=", "set$_value", 2, [$0], []));
  },
  "+_value=": 1,
  set$attributes: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("attributes=", "set$attributes", 2, [$0], []));
  },
  "+attributes=": 1,
  set$bottomPadding: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("bottomPadding=", "set$bottomPadding", 2, [$0], []));
  },
  "+bottomPadding=": 1,
  set$className: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("className=", "set$className", 2, [$0], []));
  },
  "+className=": 1,
  set$code: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("code=", "set$code", 2, [$0], []));
  },
  "+code=": 1,
  set$codeMode: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("codeMode=", "set$codeMode", 2, [$0], []));
  },
  "+codeMode=": 1,
  set$cost: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cost=", "set$cost", 2, [$0], []));
  },
  "+cost=": 1,
  set$count: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("count=", "set$count", 2, [$0], []));
  },
  "+count=": 1,
  set$cssText: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cssText=", "set$cssText", 2, [$0], []));
  },
  "+cssText=": 1,
  set$cut: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("cut=", "set$cut", 2, [$0], []));
  },
  "+cut=": 1,
  set$display: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("display=", "set$display", 2, [$0], []));
  },
  "+display=": 1,
  set$end: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("end=", "set$end", 2, [$0], []));
  },
  "+end=": 1,
  set$exclude: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("exclude=", "set$exclude", 2, [$0], []));
  },
  "+exclude=": 1,
  set$firstTimestamp: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("firstTimestamp=", "set$firstTimestamp", 2, [$0], []));
  },
  "+firstTimestamp=": 1,
  set$flag: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("flag=", "set$flag", 2, [$0], []));
  },
  "+flag=": 1,
  set$height: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("height=", "set$height", 2, [$0], []));
  },
  "+height=": 1,
  set$href: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("href=", "set$href", 2, [$0], []));
  },
  "+href=": 1,
  set$index: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("index=", "set$index", 2, [$0], []));
  },
  "+index=": 1,
  set$isDirty: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isDirty=", "set$isDirty", 2, [$0], []));
  },
  "+isDirty=": 1,
  set$isFeedback: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isFeedback=", "set$isFeedback", 2, [$0], []));
  },
  "+isFeedback=": 1,
  set$isInverted: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isInverted=", "set$isInverted", 2, [$0], []));
  },
  "+isInverted=": 1,
  set$isMarked: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isMarked=", "set$isMarked", 2, [$0], []));
  },
  "+isMarked=": 1,
  set$isPermanent: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isPermanent=", "set$isPermanent", 2, [$0], []));
  },
  "+isPermanent=": 1,
  set$isSetMember: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("isSetMember=", "set$isSetMember", 2, [$0], []));
  },
  "+isSetMember=": 1,
  set$label: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("label=", "set$label", 2, [$0], []));
  },
  "+label=": 1,
  set$left: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("left=", "set$left", 2, [$0], []));
  },
  "+left=": 1,
  set$leftDirty: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("leftDirty=", "set$leftDirty", 2, [$0], []));
  },
  "+leftDirty=": 1,
  set$length: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  "+length=": 1,
  set$maxWidth: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("maxWidth=", "set$maxWidth", 2, [$0], []));
  },
  "+maxWidth=": 1,
  set$name: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("name=", "set$name", 2, [$0], []));
  },
  "+name=": 1,
  set$nearestObstacle: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nearestObstacle=", "set$nearestObstacle", 2, [$0], []));
  },
  "+nearestObstacle=": 1,
  set$nearestObstacleChecked: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("nearestObstacleChecked=", "set$nearestObstacleChecked", 2, [$0], []));
  },
  "+nearestObstacleChecked=": 1,
  set$neighbors: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("neighbors=", "set$neighbors", 2, [$0], []));
  },
  "+neighbors=": 1,
  set$next: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("next=", "set$next", 2, [$0], []));
  },
  "+next=": 1,
  set$padding: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("padding=", "set$padding", 2, [$0], []));
  },
  "+padding=": 1,
  set$rank: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rank=", "set$rank", 2, [$0], []));
  },
  "+rank=": 1,
  set$reopts: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("reopts=", "set$reopts", 2, [$0], []));
  },
  "+reopts=": 1,
  set$right: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("right=", "set$right", 2, [$0], []));
  },
  "+right=": 1,
  set$rightDirty: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("rightDirty=", "set$rightDirty", 2, [$0], []));
  },
  "+rightDirty=": 1,
  set$sortValue: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("sortValue=", "set$sortValue", 2, [$0], []));
  },
  "+sortValue=": 1,
  set$start: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("start=", "set$start", 2, [$0], []));
  },
  "+start=": 1,
  set$text: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("text=", "set$text", 2, [$0], []));
  },
  "+text=": 1,
  set$threshold: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("threshold=", "set$threshold", 2, [$0], []));
  },
  "+threshold=": 1,
  set$top: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("top=", "set$top", 2, [$0], []));
  },
  "+top=": 1,
  set$topPadding: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("topPadding=", "set$topPadding", 2, [$0], []));
  },
  "+topPadding=": 1,
  set$totalCount: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("totalCount=", "set$totalCount", 2, [$0], []));
  },
  "+totalCount=": 1,
  set$tree: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("tree=", "set$tree", 2, [$0], []));
  },
  "+tree=": 1,
  set$type: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  "+type=": 1,
  set$unweightedTotal: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("unweightedTotal=", "set$unweightedTotal", 2, [$0], []));
  },
  "+unweightedTotal=": 1,
  set$vNodes: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("vNodes=", "set$vNodes", 2, [$0], []));
  },
  "+vNodes=": 1,
  set$value: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("value=", "set$value", 2, [$0], []));
  },
  "+value=": 1,
  set$weightedTotal: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("weightedTotal=", "set$weightedTotal", 2, [$0], []));
  },
  "+weightedTotal=": 1,
  set$width: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("width=", "set$width", 2, [$0], []));
  },
  "+width=": 1,
  set$x: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("x=", "set$x", 2, [$0], []));
  },
  "+x=": 1,
  set$xtag: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("xtag=", "set$xtag", 2, [$0], []));
  },
  "+xtag=": 1,
  set$y: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("y=", "set$y", 2, [$0], []));
  },
  "+y=": 1,
  setDimensions$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("setDimensions", "setDimensions$2", 0, [$0, $1], []));
  },
  "+setDimensions:2:0": 1,
  setEndPoint$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("setEndPoint", "setEndPoint$1", 0, [$0], []));
  },
  "+setEndPoint:1:0": 1,
  setFlags$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("setFlags", "setFlags$1", 0, [$0], []));
  },
  "+setFlags:1:0": 1,
  setPoints$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("setPoints", "setPoints$1", 0, [$0], []));
  },
  "+setPoints:1:0": 1,
  setProperty$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("setProperty", "setProperty$3", 0, [$0, $1, $2], []));
  },
  "+setProperty:3:0": 1,
  setStartPoint$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("setStartPoint", "setStartPoint$1", 0, [$0], []));
  },
  "+setStartPoint:1:0": 1,
  show$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("show", "show$0", 0, [], []));
  },
  "+show:0:0": 1,
  shrink$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("shrink", "shrink$0", 0, [], []));
  },
  "+shrink:0:0": 1,
  shrinkVertices$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("shrinkVertices", "shrinkVertices$0", 0, [], []));
  },
  "+shrinkVertices:0:0": 1,
  sort$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("sort", "sort$1", 0, [$0], []));
  },
  "+sort:1:0": 1,
  spin$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("spin", "spin$1", 0, [$0], []));
  },
  "+spin:1:0": 1,
  split$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("split", "split$1", 0, [$0], []));
  },
  "+split:1:0": 1,
  startsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
  },
  "+startsWith:1:0": 1,
  stop$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("stop", "stop$0", 0, [], []));
  },
  "+stop:0:0": 1,
  sublist$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("sublist", "sublist$2", 0, [$0, $1], []));
  },
  "+sublist:2:0": 1,
  substring$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  "+substring:1:0": 1,
  substring$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  "+substring:2:0": 1,
  switchTo$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("switchTo", "switchTo$1", 0, [$0], []));
  },
  "+switchTo:1:0": 1,
  testAndSet$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("testAndSet", "testAndSet$1", 0, [$0], []));
  },
  "+testAndSet:1:0": 1,
  then$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("then", "then$1", 0, [$0], []));
  },
  "+then:1:0": 1,
  then$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
  },
  "+then:2:0:onError": 1,
  tip$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("tip", "tip$0", 0, [], []));
  },
  "+tip:0:0": 1,
  toDouble$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toDouble", "toDouble$0", 0, [], []));
  },
  "+toDouble:0:0": 1,
  toInt$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toInt", "toInt$0", 0, [], []));
  },
  "+toInt:0:0": 1,
  toJs$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toJs", "toJs$0", 0, [], []));
  },
  "+toJs:0:0": 1,
  toJson$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toJson", "toJson$0", 0, [], []));
  },
  "+toJson:0:0": 1,
  toList$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  "+toList:0:0": 1,
  toLowerCase$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  "+toLowerCase:0:0": 1,
  toSendPort$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
  },
  "+toSendPort:0:0": 1,
  toStringAsFixed$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toStringAsFixed", "toStringAsFixed$1", 0, [$0], []));
  },
  "+toStringAsFixed:1:0": 1,
  toUpperCase$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("toUpperCase", "toUpperCase$0", 0, [], []));
  },
  "+toUpperCase:0:0": 1,
  tooltip$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("tooltip", "tooltip$1", 0, [$0], []));
  },
  "+tooltip:1:0": 1,
  transpose$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("transpose", "transpose$0", 0, [], []));
  },
  "+transpose:0:0": 1,
  trim$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("trim", "trim$0", 0, [], []));
  },
  "+trim:0:0": 1,
  updateOffset$0: function() {
    return this.noSuchMethod$1(this, H.createInvocationMirror("updateOffset", "updateOffset$0", 0, [], []));
  },
  "+updateOffset:0:0": 1,
  visitCloseToken$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitCloseToken", "visitCloseToken$1", 0, [$0], []));
  },
  "+visitCloseToken:1:0": 1,
  visitIsolateSink$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitIsolateSink", "visitIsolateSink$1", 0, [$0], []));
  },
  "+visitIsolateSink:1:0": 1,
  visitList$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitList", "visitList$1", 0, [$0], []));
  },
  "+visitList:1:0": 1,
  visitMap$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitMap", "visitMap$1", 0, [$0], []));
  },
  "+visitMap:1:0": 1,
  visitPrimitive$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitPrimitive", "visitPrimitive$1", 0, [$0], []));
  },
  "+visitPrimitive:1:0": 1,
  visitSendPort$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitSendPort", "visitSendPort$1", 0, [$0], []));
  },
  "+visitSendPort:1:0": 1,
  visitSendPortSync$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("visitSendPortSync", "visitSendPortSync$1", 0, [$0], []));
  },
  "+visitSendPortSync:1:0": 1,
  warning$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("warning", "warning$1", 0, [$0], []));
  },
  "+warning:1:0": 1,
  where$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("where", "where$1", 0, [$0], []));
  },
  "+where:1:0": 1,
  width$0: function($receiver) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("width", "width$0", 0, [], []));
  },
  "+width:0:0": 1,
  write$1: function($0) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("write", "write$1", 0, [$0], []));
  },
  "+write:1:0": 1,
  writeAll$2: function($0, $1) {
    return this.noSuchMethod$1(this, H.createInvocationMirror("writeAll", "writeAll$2", 0, [$0, $1], []));
  },
  "+writeAll:2:0": 1,
  $isObject: true
},

"+Object": [],

Match: {"": "Object;", $isMatch: true},

"+Match": [],

StackTrace: {"": "Object;"},

"+StackTrace": [],

StringBuffer: {"": "Object;_contents<-",
  get$length: function(_) {
    return this._contents.length;
  },
  "+length": 1,
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this._contents.length !== 0;
  },
  "+isNotEmpty": 1,
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  "+write:1:0": 1,
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  "+writeAll:2:0": 1,
  "*writeAll": [10],
  clear$0: function(_) {
    this._contents = "";
  },
  "+clear:0:0": 1,
  toString$0: function(_) {
    return this._contents;
  },
  "+toString:0:0": 1,
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1($content);
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
},

"+new StringBuffer:1:0": 1,

"*": [0]}

},

"+StringBuffer": [63],

Symbol: {"": "Object;", $isSymbol: true},

"+Symbol": [],

Uri: {"": "Object;_liblib2$_host-,_liblib2$_port-,_path-,scheme-,userInfo-,query-,fragment-,_pathSegments-,_queryParameters-",
  get$host: function(_) {
    var t1, t2;
    t1 = this._liblib2$_host;
    if (t1 != null && J.startsWith$1$s(t1, "[") === true) {
      t2 = J.getInterceptor$asx(t1);
      return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
    }
    return t1;
  },
  "+host": 1,
  get$port: function(_) {
    var t1, t2;
    if (J.$eq(this._liblib2$_port, 0)) {
      t1 = this.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "http"))
        return 80;
      if (t2.$eq(t1, "https"))
        return 443;
    }
    return this._liblib2$_port;
  },
  "+port": 1,
  query$1: function($receiver, arg0) {
    return this.query.call$1(arg0);
  },
  _makePath$2: function(path, pathSegments) {
    var t1, result;
    t1 = path == null;
    if (t1 && true)
      return "";
    t1 = !t1;
    if (t1)
      ;
    result = t1 ? P.Uri__normalize(path) : J.join$1$ax(C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()), "/");
    if (!J.$eq(this.get$host(this), "") || J.$eq(this.scheme, "file")) {
      t1 = J.getInterceptor$asx(result);
      t1 = t1.get$isNotEmpty(result) === true && t1.startsWith$1(result, "/") !== true;
    } else
      t1 = false;
    if (t1)
      return "/" + H.S(result);
    return result;
  },
  "+_makePath:2:0": 1,
  _writeAuthority$1: function(ss) {
    var t1 = this.userInfo;
    if ("" !== t1) {
      ss.write$1(t1);
      ss.write$1("@");
    }
    t1 = this._liblib2$_host;
    ss.write$1(t1 == null ? "null" : t1);
    if (!J.$eq(this._liblib2$_port, 0)) {
      ss.write$1(":");
      ss.write$1(J.toString$0(this._liblib2$_port));
    }
  },
  "+_writeAuthority:1:0": 1,
  toString$0: function(_) {
    var sb, t1;
    sb = P.StringBuffer$("");
    t1 = this.scheme;
    if ("" !== t1) {
      sb.write$1(t1);
      sb.write$1(":");
    }
    if (!J.$eq(this.get$host(this), "") || J.$eq(t1, "file")) {
      sb.write$1("//");
      this._writeAuthority$1(sb);
    }
    sb.write$1(this._path);
    t1 = this.query;
    if ("" !== t1) {
      sb.write$1("?");
      sb.write$1(t1);
    }
    t1 = this.fragment;
    if ("" !== t1) {
      sb.write$1("#");
      sb.write$1(t1);
    }
    return sb._contents;
  },
  "+toString:0:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isUri)
      return false;
    return J.$eq(this.scheme, other.scheme) && J.$eq(this.userInfo, other.userInfo) && J.$eq(this.get$host(this), t1.get$host(other)) && J.$eq(this.get$port(this), t1.get$port(other)) && J.$eq(this._path, other._path) && J.$eq(this.query, other.query) && J.$eq(this.fragment, other.fragment);
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    var t1 = new P.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  "+hashCode": 1,
  Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
    var t1 = J.getInterceptor(scheme);
    if (t1.$eq(scheme, "http") && J.$eq(port, 80))
      this._liblib2$_port = 0;
    else if (t1.$eq(scheme, "https") && J.$eq(port, 443))
      this._liblib2$_port = 0;
    else
      this._liblib2$_port = port;
    this._path = this._makePath$2(path, pathSegments);
  },
  $isUri: true,
  static: {
"": "Uri__splitRe-,Uri__COMPONENT_SCHEME-,Uri__COMPONENT_USER_INFO-,Uri__COMPONENT_HOST-,Uri__COMPONENT_HOST_IPV6-,Uri__COMPONENT_PORT-,Uri__COMPONENT_PATH-,Uri__COMPONENT_QUERY_DATA-,Uri__COMPONENT_FRAGMENT-,Uri__DOUBLE_QUOTE-,Uri__PERCENT-,Uri__ASTERISK-,Uri__PLUS-,Uri__SLASH-,Uri__ZERO-,Uri__NINE-,Uri__COLON-,Uri__LESS-,Uri__GREATER-,Uri__QUESTION-,Uri__AT_SIGN-,Uri__UPPER_CASE_A-,Uri__UPPER_CASE_F-,Uri__UPPER_CASE_Z-,Uri__LEFT_BRACKET-,Uri__BACKSLASH-,Uri__RIGHT_BRACKET-,Uri__LOWER_CASE_A-,Uri__LOWER_CASE_F-,Uri__LOWER_CASE_Z-,Uri__BAR-,Uri__unreservedTable-,Uri__unreserved2396Table-,Uri__encodeFullTable-,Uri__schemeTable-,Uri__schemeLowerTable-,Uri__subDelimitersTable-,Uri__pathCharTable-,Uri__queryCharTable-",
Uri$_fromMatch: function(m) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = m._match;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  t2 = t1[1];
  t2 = P.Uri__makeScheme(t2 != null ? t2 : "");
  t3 = t1.length;
  if (2 >= t3)
    throw H.ioore(t1, 2);
  t4 = t1[2];
  t4 = t4 != null ? t4 : "";
  if (3 >= t3)
    throw H.ioore(t1, 3);
  t5 = t1[3];
  if (4 >= t3)
    throw H.ioore(t1, 4);
  t5 = P.Uri__eitherOf(t5, t1[4]);
  if (5 >= t1.length)
    throw H.ioore(t1, 5);
  t3 = P.Uri__parseIntOrZero(t1[5]);
  t6 = t1.length;
  if (6 >= t6)
    throw H.ioore(t1, 6);
  t7 = t1[6];
  t7 = t7 != null ? t7 : "";
  if (7 >= t6)
    throw H.ioore(t1, 7);
  t8 = t1[7];
  t8 = t8 != null ? t8 : "";
  if (8 >= t6)
    throw H.ioore(t1, 8);
  t1 = t1[8];
  t1 = t1 != null ? t1 : "";
  t6 = P.Uri__makeScheme(t2);
  t6 = new P.Uri(P.Uri__makeHost(t5), null, null, t6, t4, P.Uri__makeQuery(t8, null), P.Uri__makeFragment(t1), null, null);
  t6.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(t1, t5, t7, null, t3, t8, null, t2, t4);
  return t6;
},

"+new Uri$_fromMatch:1:0": 1,

Uri__makeHost: function(host) {
  var t1, i, t2;
  if (host == null || J.get$isEmpty$asx(host) === true)
    return host;
  t1 = J.getInterceptor$s(host);
  if (J.$eq(t1.codeUnitAt$1(host, 0), 91)) {
    if (!J.$eq(t1.codeUnitAt$1(host, J.$sub$n(t1.get$length(host), 1)), 93))
      throw H.wrapException(new P.FormatException("Missing end `]` to match `[` in host"));
    P.Uri_parseIPv6Address(t1.substring$2(host, 1, J.$sub$n(t1.get$length(host), 1)));
    return host;
  }
  i = 0;
  while (true) {
    t2 = t1.get$length(host);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    if (J.$eq(t1.codeUnitAt$1(host, i), 58)) {
      P.Uri_parseIPv6Address(host);
      return "[" + H.S(host) + "]";
    }
    ++i;
  }
  return host;
},

"+_makeHost:1:0": 1,

Uri__makeScheme: function(scheme) {
  var t1, t2, t3, $length, allLowercase, i, codeUnit, t4;
  t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
  t2 = new P.Uri__makeScheme_isSchemeCharacter();
  if (scheme == null)
    return "";
  t3 = J.getInterceptor$asx(scheme);
  $length = t3.get$length(scheme);
  if (typeof $length !== "number")
    throw H.iae($length);
  allLowercase = true;
  i = 0;
  for (; i < $length; ++i) {
    codeUnit = t3.codeUnitAt$1(scheme, i);
    if (i === 0) {
      t4 = J.getInterceptor$n(codeUnit);
      if (!(t4.$ge(codeUnit, 97) === true && t4.$le(codeUnit, 122) === true))
        t4 = t4.$ge(codeUnit, 65) === true && t4.$le(codeUnit, 90) === true;
      else
        t4 = true;
      t4 = !t4;
    } else
      t4 = false;
    if (t4)
      throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
    if (t1.call$1(codeUnit) !== true) {
      if (t2.call$1(codeUnit) === true)
        ;
      else
        throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
      allLowercase = false;
    }
  }
  return allLowercase ? scheme : t3.toLowerCase$0(scheme);
},

"+_makeScheme:1:0": 1,

Uri__makeQuery: function(query, queryParameters) {
  var t1, t2, result;
  t1 = {};
  t2 = query == null;
  if (t2 && true)
    return "";
  t2 = !t2;
  if (t2)
    ;
  if (t2)
    return P.Uri__normalize(query);
  result = P.StringBuffer$("");
  t1.first_0 = true;
  C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
  return result._contents;
},

"+_makeQuery:2:0": 1,

Uri__makeFragment: function(fragment) {
  if (fragment == null)
    return "";
  return P.Uri__normalize(fragment);
},

"+_makeFragment:1:0": 1,

Uri__normalize: function(component) {
  var t1, t2, t3, t4, t5, t6, $length, t7, t8, codeUnit1, codeUnit2, decodedCodeUnit, t9, charCodes;
  t1 = {};
  t2 = new P.Uri__normalize_isNormalizedHexDigit();
  t3 = new P.Uri__normalize_isUnreserved();
  t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
  t5 = new P.Uri__normalize_decodeHexDigitPair(component);
  t1.result_0 = null;
  t6 = J.getInterceptor$asx(component);
  $length = t6.get$length(component);
  t1.index_1 = 0;
  t1.prevIndex_2 = 0;
  t7 = new P.Uri__normalize_fillResult(t1, component);
  if (typeof $length !== "number")
    throw H.iae($length);
  for (; t8 = t1.index_1, t8 < $length;)
    if (J.$eq(t6.codeUnitAt$1(component, t8), 37)) {
      t8 = t1.index_1;
      if ($length < t8 + 2)
        throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(component)));
      codeUnit1 = t6.codeUnitAt$1(component, t8 + 1);
      codeUnit2 = t6.codeUnitAt$1(component, t1.index_1 + 2);
      decodedCodeUnit = t5.call$1(t1.index_1 + 1);
      if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
        t1.index_1 = t1.index_1 + 3;
      else {
        t7.call$0();
        t8 = t3.call$1(decodedCodeUnit);
        t9 = t1.result_0;
        if (t8 === true) {
          t9.writeCharCode$1;
          charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t8 = H.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t8;
        } else {
          t9.write$1;
          t9._contents = t9._contents + "%";
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 1);
          t8.writeCharCode$1;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 2);
          t8.writeCharCode$1;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
        }
        t1.index_1 = t1.index_1 + 3;
        t1.prevIndex_2 = t1.index_1;
      }
    } else
      t1.index_1 = t1.index_1 + 1;
  if (t1.result_0 != null && t1.prevIndex_2 !== t8)
    t7.call$0();
  t1 = t1.result_0;
  if (t1 == null)
    return component;
  return J.toString$0(t1);
},

"+_normalize:1:0": 1,

Uri__parseIntOrZero: function(val) {
  if (val != null && !J.$eq(val, ""))
    return H.Primitives_parseInt(val, null, null);
  else
    return 0;
},

"+_parseIntOrZero:1:0": 1,

Uri__eitherOf: function(val1, val2) {
  if (val1 != null)
    return val1;
  if (val2 != null)
    return val2;
  return "";
},

"+_eitherOf:2:0": 1,

Uri_parseIPv4Address: function(host) {
  var t1, bytes, t2;
  t1 = new P.Uri_parseIPv4Address_error();
  bytes = J.split$1$s(host, ".");
  t2 = J.getInterceptor$asx(bytes);
  if (!J.$eq(t2.get$length(bytes), 4))
    t1.call$1("IPv4 address should contain exactly 4 parts");
  return J.toList$0$ax(t2.map$1(bytes, new P.Uri_parseIPv4Address_closure(t1)));
},

"+parseIPv4Address:1:0": 1,

Uri_parseIPv6Address: function(host) {
  var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, atEnd, isLastWildcard, exception, $arguments, t2;
  error = new P.Uri_parseIPv6Address_error();
  parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
  if (J.$lt$n(J.get$length$asx(host), 2) === true)
    error.call$1("address is too short");
  parts = [];
  partStart = 0;
  wildcardSeen = false;
  i = 0;
  while (true) {
    t1 = J.get$length$asx(host);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (!(i < t1))
      break;
    if (J.$eq(J.codeUnitAt$1$s(host, i), 58)) {
      if (i === 0) {
        ++i;
        if (!J.$eq(J.codeUnitAt$1$s(host, i), 58))
          error.call$1("invalid start colon.");
        partStart = i;
      }
      if (i === partStart) {
        if (wildcardSeen)
          error.call$1("only one wildcard `::` is allowed");
        J.add$1$ax(parts, -1);
        wildcardSeen = true;
      } else
        J.add$1$ax(parts, parseHex.call$2(partStart, i));
      partStart = i + 1;
    }
    ++i;
  }
  if (J.$eq(J.get$length$asx(parts), 0))
    error.call$1("too few parts");
  atEnd = J.$eq(partStart, J.get$length$asx(host));
  isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
  if (atEnd && !isLastWildcard)
    error.call$1("expected a part after last `:`");
  if (!atEnd)
    try {
      J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
    } catch (exception) {
      H.unwrapException(exception);
      try {
        last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
        J.add$1$ax(parts, J.$or$n(J.$shl$n(J.$index$asx(last, 0), 8), J.$index$asx(last, 1)));
        J.add$1$ax(parts, J.$or$n(J.$shl$n(J.$index$asx(last, 2), 8), J.$index$asx(last, 3)));
      } catch (exception) {
        H.unwrapException(exception);
        error.call$1("invalid end of IPv6 address.");
      }

    }

  if (wildcardSeen) {
    t1 = J.get$length$asx(parts);
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 7)
      error.call$1("an address with a wildcard must have less than 7 parts");
  } else if (!J.$eq(J.get$length$asx(parts), 8))
    error.call$1("an address without a wildcard must contain exactly 8 parts");
  t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
  t1.$builtinTypeInfo = [null, null];
  $arguments = H.substitute(t1.$asIterableBase, H.getRuntimeTypeInfo(t1));
  t2 = $arguments == null ? null : $arguments[0];
  return P.List_List$from(t1, true, t2);
},

"+parseIPv6Address:1:0": 1,

Uri__uriEncode: function(canonicalTable, text, spaceToPlus) {
  var t1, result, t2, i, t3, ch, t4, t5, str, nextCh, charCodes;
  t1 = new P.Uri__uriEncode_byteToHex();
  result = P.StringBuffer$("");
  t2 = J.getInterceptor$asx(text);
  i = 0;
  while (true) {
    t3 = t2.get$length(text);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (!(i < t3))
      break;
    ch = t2.codeUnitAt$1(text, i);
    t3 = J.getInterceptor$n(ch);
    if (t3.$lt(ch, 128) === true) {
      t4 = t3.$shr(ch, 4);
      if (t4 >>> 0 !== t4 || t4 >= canonicalTable.length)
        throw H.ioore(canonicalTable, t4);
      t4 = canonicalTable[t4];
      t5 = t3.$and(ch, 15);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t5 = !J.$eq(J.$and$n(t4, C.JSInt_methods.$shl(1, t5)), 0);
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      str = t2.$index(text, i);
      str = typeof str === "string" ? str : H.S(str);
      result._contents = result._contents + str;
    } else if (spaceToPlus && J.$eq(t2.$index(text, i), " "))
      result._contents = result._contents + "+";
    else {
      if (t3.$ge(ch, 55296) === true && t3.$lt(ch, 56320) === true) {
        ++i;
        nextCh = J.$eq(t2.get$length(text), i) ? 0 : t2.codeUnitAt$1(text, i);
        t4 = J.getInterceptor$n(nextCh);
        if (t4.$ge(nextCh, 56320) === true && t4.$lt(nextCh, 57344) === true) {
          t3 = J.$shl$n(t3.$sub(ch, 55296), 10);
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t4 = t4.$sub(nextCh, 56320);
          if (typeof t4 !== "number")
            throw H.iae(t4);
          ch = 65536 + t3 + t4;
        } else
          throw H.wrapException(new P.ArgumentError("Malformed URI"));
      }
      charCodes = P.List_List$filled(1, ch, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t3 = C.JSArray_methods.get$iterator(C.Utf8Codec_false.get$encoder().convert$1(t3));
      for (; t3.moveNext$0();) {
        str = t1.call$1(t3._liblib$_current);
        str = typeof str === "string" ? str : H.S(str);
        result._contents = result._contents + str;
      }
    }
    ++i;
  }
  return result._contents;
},

"+_uriEncode:2:1:spaceToPlus": 1,

"*_uriEncode": [1]}

},

"+Uri": [],

Uri__makeScheme_isSchemeLowerCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128) === true) {
      t2 = t1.$shr(ch, 4);
      if (t2 >>> 0 !== t2 || t2 >= 8)
        throw H.ioore(C.List_6Pr, t2);
      t2 = C.List_6Pr[t2];
      t1 = t1.$and(ch, 15);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = (t2 & C.JSInt_methods.$shl(1, t1)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__makeScheme_isSchemeLowerCharacter": [],

Uri__makeScheme_isSchemeCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128) === true) {
      t2 = t1.$shr(ch, 4);
      if (t2 >>> 0 !== t2 || t2 >= 8)
        throw H.ioore(C.List_JYB, t2);
      t2 = C.List_JYB[t2];
      t1 = t1.$and(ch, 15);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = (t2 & C.JSInt_methods.$shl(1, t1)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__makeScheme_isSchemeCharacter": [],

Uri__makePath_closure: {"": "Closure;",
  call$1: function(s) {
    return P.Uri__uriEncode(C.List_qg4, s, false);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__makePath_closure": [],

Uri__makeQuery_closure: {"": "Closure;box_0-,result_1-",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1("&");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(P.Uri__uriEncode(C.List_nxB, key, true));
    if (value != null && J.get$isEmpty$asx(value) !== true) {
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, true));
    }
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Uri__makeQuery_closure": [],

Uri__normalize_isNormalizedHexDigit: {"": "Closure;",
  call$1: function(digit) {
    var t1;
    if (typeof digit !== "number")
      throw H.iae(digit);
    if (!(48 <= digit && digit <= 57))
      t1 = 65 <= digit && digit <= 70;
    else
      t1 = true;
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__normalize_isNormalizedHexDigit": [],

Uri__normalize_isLowerCaseHexDigit: {"": "Closure;",
  call$1: function(digit) {
    if (typeof digit !== "number")
      throw H.iae(digit);
    return 97 <= digit && digit <= 102;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__normalize_isLowerCaseHexDigit": [],

Uri__normalize_isUnreserved: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128) === true) {
      t2 = t1.$shr(ch, 4);
      if (t2 >>> 0 !== t2 || t2 >= 8)
        throw H.ioore(C.List_nxB, t2);
      t2 = C.List_nxB[t2];
      t1 = t1.$and(ch, 15);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = (t2 & C.JSInt_methods.$shl(1, t1)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__normalize_isUnreserved": [],

Uri__normalize_normalizeHexDigit: {"": "Closure;component_1-,isNormalizedHexDigit_2-,isLowerCaseHexDigit_3-",
  call$1: function(index) {
    var t1, codeUnit;
    t1 = this.component_1;
    codeUnit = J.codeUnitAt$1$s(t1, index);
    if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
      return J.$sub$n(codeUnit, 32);
    else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
      throw H.wrapException(new P.ArgumentError("Invalid URI component: " + H.S(t1)));
    else
      return codeUnit;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__normalize_normalizeHexDigit": [],

Uri__normalize_decodeHexDigitPair: {"": "Closure;component_4-",
  call$1: function(index) {
    var t1, t2, $byte, i, codeUnit;
    if (typeof index !== "number")
      return this.call$1$bailout(1, index);
    for (t1 = this.component_4, t2 = J.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t2.codeUnitAt$1(t1, index + i);
      if (typeof codeUnit !== "number")
        throw H.iae(codeUnit);
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(t1)));
      }
    }
    return $byte;
  },
  "+call:1:0": 1,
  call$1$bailout: function(state0, index) {
    var t1, t2, t3, $byte, i, codeUnit;
    for (t1 = this.component_4, t2 = J.getInterceptor$ns(index), t3 = J.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t3.codeUnitAt$1(t1, t2.$add(index, i));
      if (typeof codeUnit !== "number")
        throw H.iae(codeUnit);
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(t1)));
      }
    }
    return $byte;
  },
  $isFunction: true
},

"+Uri__normalize_decodeHexDigitPair": [],

Uri__normalize_fillResult: {"": "Closure;box_0-,component_5-",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.box_0;
    t2 = t1.result_0;
    t3 = t1.prevIndex_2;
    t4 = this.component_5;
    t5 = t1.index_1;
    if (t2 == null)
      t1.result_0 = P.StringBuffer$(J.substring$2$s(t4, t3, t5));
    else
      t2.write$1(J.substring$2$s(t4, t3, t5));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Uri__normalize_fillResult": [],

Uri_hashCode_combine: {"": "Closure;",
  call$2: function(part, current) {
    return J.$and$n(J.$add$ns(J.$mul$n(current, 31), J.get$hashCode$(part)), 1073741823);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Uri_hashCode_combine": [],

Uri_parseIPv4Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(new P.FormatException("Illegal IPv4 address, " + H.S(msg)));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri_parseIPv4Address_error": [],

Uri_parseIPv4Address_closure: {"": "Closure;error_0-",
  call$1: function(byteString) {
    var $byte, t1;
    $byte = H.Primitives_parseInt(byteString, null, null);
    t1 = J.getInterceptor$n($byte);
    if (t1.$lt($byte, 0) === true || t1.$gt($byte, 255) === true)
      this.error_0.call$1("each part must be in the range of `0..255`");
    return $byte;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri_parseIPv4Address_closure": [],

Uri_parseIPv6Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(new P.FormatException("Illegal IPv6 address, " + H.S(msg)));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri_parseIPv6Address_error": [],

Uri_parseIPv6Address_parseHex: {"": "Closure;host_0-,error_1-",
  call$2: function(start, end) {
    var value, t1;
    if (J.$gt$n(J.$sub$n(end, start), 4) === true)
      this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
    value = H.Primitives_parseInt(J.substring$2$s(this.host_0, start, end), 16, null);
    t1 = J.getInterceptor$n(value);
    if (t1.$lt(value, 0) === true || t1.$gt(value, 65535) === true)
      this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
    return value;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+Uri_parseIPv6Address_parseHex": [],

Uri_parseIPv6Address_closure: {"": "Closure;parts_2-",
  call$1: function(value) {
    var t1 = J.getInterceptor(value);
    if (t1.$eq(value, -1))
      return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
    else
      return [J.$and$n(t1.$shr(value, 8), 255), t1.$and(value, 255)];
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri_parseIPv6Address_closure": [],

Uri__uriEncode_byteToHex: {"": "Closure;",
  call$1: function(v) {
    var t1, t2;
    t1 = J.getInterceptor$n(v);
    t2 = t1.$shr(v, 4);
    if (t2 >>> 0 !== t2 || t2 >= 16)
      throw H.ioore("0123456789ABCDEF", t2);
    t2 = "%" + "0123456789ABCDEF"[t2];
    t1 = t1.$and(v, 15);
    if (t1 >>> 0 !== t1 || t1 >= 16)
      throw H.ioore("0123456789ABCDEF", t1);
    return t2 + "0123456789ABCDEF"[t1];
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Uri__uriEncode_byteToHex": []}],
["dart.dom.html", "dart:html", , W, {
_getNewIsolateId: function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
},

"+_getNewIsolateId:0:0": 1,

AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  if (href != null)
    J.set$href$x(e, href);
  return e;
},

"+new AnchorElement:0:1:href": 1,

"*": [0],

CustomEvent_CustomEvent: function(type, canBubble, cancelable, detail) {
  var e = document.createEvent("CustomEvent");
  J._initCustomEvent$4$x(e, type, canBubble, cancelable, P._convertDartToNative_PrepareForStructuredClone(detail));
  return e;
},

"+new CustomEvent:1:3:canBubble:cancelable:detail": 1,

"*": [3, 3, 0],

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.get$nodes;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

"+new Element$html:1:2:treeSanitizer:validator": 1,

"*html": [0, 0],

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

"+createElement_tag:2:0": 1,

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
},

"+getString:1:2:onProgress:withCredentials": 1,

"*getString": [0, 0],

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var t1, completer, xhr, t2;
  t1 = W.HttpRequest;
  completer = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  xhr = new XMLHttpRequest();
  C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
  t1 = new W._EventStream(xhr, C.EventStreamProvider_load._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._liblib6$_target, t1._eventType, W._EventStreamSubscription__wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  t2 = new W._EventStream(xhr, C.EventStreamProvider_error._eventType, false);
  H.setRuntimeTypeInfo(t2, [null]);
  t1 = new W._EventStreamSubscription(0, t2._liblib6$_target, t2._eventType, W._EventStreamSubscription__wrapZone(new W.HttpRequest_request_closure0(completer)), t2._useCapture);
  H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
  t1._tryResume$0();
  xhr.send();
  return completer.future;
},

"+request:1:7:method:mimeType:onProgress:requestHeaders:responseType:sendData:withCredentials": 1,

"*request": [0, 0, 0, 0, 0, 0, 0],

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

"+_isDartLocation:1:0": 1,

_dispatchEvent: function(receiver, message) {
  var $event = W.CustomEvent_CustomEvent(receiver, false, false, C.C_JsonCodec.get$encoder().convert$1(message));
  window.dispatchEvent($event);
},

"+_dispatchEvent:2:0": 1,

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

"+isPrimitive:1:0": 1,

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

"+isPrimitive:1:0": 1,

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return W._DOMWindowCrossFrame__createSafe(win);
},

"+_convertNativeToDart_Window:1:0": 1,

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

"+_convertNativeToDart_EventTarget:1:0": 1,

Console: {"": "Object;",
  count$1: function(arg) {
    return typeof console != "undefined" ? console.count(arg) : null;
  },
  "+count:1:0": 1,
  get$count: function() {
    return new P.BoundClosure$1(this, W.Console.prototype.count$1, null, "count$1");
  },
  group$1: function(arg) {
    return typeof console != "undefined" ? console.group(arg) : null;
  },
  "+group:1:0": 1,
  info$1: function(arg) {
    return typeof console != "undefined" ? console.info(arg) : null;
  },
  "+info:1:0": 1,
  static: {
"": "Console__safeConsole-",
}

},

"+Console": [],

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

Object_CssStyleDeclarationBase: {"": "Object+CssStyleDeclarationBase;"},

_CssStyleDeclarationSet: {"": "Object_CssStyleDeclarationBase;_elementIterable-,_elementCssStyleDeclarationSetIterable-",
  getPropertyValue$1: function(_, propertyName) {
    var t1 = this._elementCssStyleDeclarationSetIterable;
    if (J.$eq(t1.get$length(t1), 0))
      H.throwExpression(new P.StateError("No elements"));
    return J.getPropertyValue$1$x(t1.elementAt$1(t1, 0), propertyName);
  },
  "+getPropertyValue:1:0": 1,
  setProperty$3: function(_, propertyName, value, priority) {
    var t1 = this._elementCssStyleDeclarationSetIterable;
    t1.forEach$1(t1, new W._CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority));
  },
  "+setProperty:3:0": 1,
  "*setProperty": [0],
  _CssStyleDeclarationSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._CssStyleDeclarationSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssStyleDeclarationSetIterable = t1;
  },
  static: {
_CssStyleDeclarationSet$: function(_elementIterable) {
  var t1 = new W._CssStyleDeclarationSet(_elementIterable, null);
  t1._CssStyleDeclarationSet$1(_elementIterable);
  return t1;
},

"+new _CssStyleDeclarationSet:1:0": 1}

},

"+_CssStyleDeclarationSet": [],

_CssStyleDeclarationSet_closure: {"": "Closure;",
  call$1: function(e) {
    return J.get$style$x(e);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_CssStyleDeclarationSet_closure": [],

_CssStyleDeclarationSet_setProperty_closure: {"": "Closure;propertyName_0-,value_1-,priority_2-",
  call$1: function(e) {
    return J.setProperty$3$x(e, this.propertyName_0, this.value_1, this.priority_2);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_CssStyleDeclarationSet_setProperty_closure": [],

CssStyleDeclarationBase: {"": "Object;",
  get$bottom: function(receiver) {
    return this.getPropertyValue$1(receiver, "bottom");
  },
  "+bottom": 1,
  bottom$0: function($receiver) {
    return this.get$bottom($receiver).call$0();
  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  "+clear": 1,
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  "+display=": 1,
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  "+height": 1,
  height$0: function($receiver) {
    return this.get$height($receiver).call$0();
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  "+height=": 1,
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  "+left": 1,
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  "+left=": 1,
  set$maxWidth: function(receiver, value) {
    this.setProperty$3(receiver, "max-width", value, "");
  },
  "+maxWidth=": 1,
  get$padding: function(receiver) {
    return this.getPropertyValue$1(receiver, "padding");
  },
  "+padding": 1,
  set$padding: function(receiver, value) {
    this.setProperty$3(receiver, "padding", value, "");
  },
  "+padding=": 1,
  get$right: function(receiver) {
    return this.getPropertyValue$1(receiver, "right");
  },
  "+right": 1,
  right$0: function($receiver) {
    return this.get$right($receiver).call$0();
  },
  set$right: function(receiver, value) {
    this.setProperty$3(receiver, "right", value, "");
  },
  "+right=": 1,
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  "+top": 1,
  set$top: function(receiver, value) {
    this.setProperty$3(receiver, "top", value, "");
  },
  "+top=": 1,
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  "+width": 1,
  width$0: function($receiver) {
    return this.get$width($receiver).call$0();
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  },
  "+width=": 1
},

"+CssStyleDeclarationBase": [],

_ChildrenElementList: {"": "ListBase;_element-,_childElements-",
  contains$1: function(_, element) {
    return J.contains$1$asx(this._childElements, element);
  },
  "+contains:1:0": 1,
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  "+isEmpty": 1,
  get$length: function(_) {
    return this._childElements.length;
  },
  "+length": 1,
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  "+[]=:2:0": 1,
  set$length: function(_, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
  },
  "+length=": 1,
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  "+add:1:0": 1,
  get$iterator: function(_) {
    var t1 = this.toList$0(this);
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  "+iterator": 1,
  addAll$1: function(_, iterable) {
    var t1, t2;
    t1 = J.getInterceptor(iterable);
    for (t1 = J.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  "+addAll:1:0": 1,
  sort$1: function(_, compare) {
    throw H.wrapException(new P.UnsupportedError("Cannot sort element lists"));
  },
  "+sort:1:0": 1,
  "*sort": [0],
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnimplementedError(null));
  },
  "+setRange:4:0": 1,
  "*setRange": [2],
  remove$1: function(_, object) {
    var t1, t2;
    t1 = J.getInterceptor$x(object);
    if (typeof object === "object" && object !== null && !!t1.$isElement) {
      t2 = this._element;
      if (t1.get$parentNode(object) === t2) {
        t2.removeChild(object);
        return true;
      }
    }
    return false;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W._ChildrenElementList.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  "+clear:0:0": 1,
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    result = t1[index];
    this._element.removeChild(result);
    return result;
  },
  "+removeAt:1:0": 1,
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  "+removeLast:0:0": 1,
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  "+first": 1,
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  "+last": 1,
  $asList: function() {
    return [W.Element];
  },
  $asIterable: function() {
    return [W.Element];
  }
},

"+_ChildrenElementList": [],

_FrozenElementList: {"": "ListBase;_nodeList-,_elementList-",
  get$length: function(_) {
    return this._nodeList.length;
  },
  "+length": 1,
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(_, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
  },
  "+[]=:2:0": 1,
  set$length: function(_, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
  },
  "+length=": 1,
  sort$1: function(_, compare) {
    throw H.wrapException(new P.UnsupportedError("Cannot sort list"));
  },
  "+sort:1:0": 1,
  "*sort": [0],
  get$first: function(_) {
    return C.NodeList_methods.get$first(this._nodeList);
  },
  "+first": 1,
  get$last: function(_) {
    return C.NodeList_methods.get$last(this._nodeList);
  },
  "+last": 1,
  get$classes: function(_) {
    return W._MultiElementCssClassSet$(this._elementList);
  },
  "+classes": 1,
  get$style: function(_) {
    return W._CssStyleDeclarationSet$(this._elementList);
  },
  "+style": 1,
  get$onChange: function(_) {
    return W._ElementListEventStreamImpl$(this, C.EventStreamProvider_change._eventType, false, null);
  },
  "+onChange": 1,
  get$onClick: function(_) {
    return W._ElementListEventStreamImpl$(this, C.EventStreamProvider_click._eventType, false, null);
  },
  "+onClick": 1,
  get$onKeyUp: function(_) {
    return W._ElementListEventStreamImpl$(this, C.EventStreamProvider_keyup._eventType, false, null);
  },
  "+onKeyUp": 1,
  get$onMouseOut: function(_) {
    return W._ElementListEventStreamImpl$(this, C.EventStreamProvider_mouseout._eventType, false, null);
  },
  "+onMouseOut": 1,
  get$onMouseOver: function(_) {
    return W._ElementListEventStreamImpl$(this, C.EventStreamProvider_mouseover._eventType, false, null);
  },
  "+onMouseOver": 1,
  get$onScroll: function(_) {
    return W._ElementListEventStreamImpl$(this, C.EventStreamProvider_scroll._eventType, false, null);
  },
  "+onScroll": 1,
  _FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
},

"+new _FrozenElementList$_wrap:1:0": 1}

},

"+_FrozenElementList": [64],

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_FrozenElementList$_wrap_closure": [],

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Element_Element$html_closure": [],

ScrollAlignment: {"": "Object;_liblib6$_value-",
  toString$0: function(_) {
    return "ScrollAlignment." + this._liblib6$_value;
  },
  "+toString:0:0": 1,
  static: {
"": "ScrollAlignment_TOP-,ScrollAlignment_CENTER-,ScrollAlignment_BOTTOM-",
}

},

"+ScrollAlignment": [],

Events: {"": "Object;_ptr-",
  $index: function(_, type) {
    var t1 = new W._EventStream(this._ptr, type, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+[]:1:0": 1
},

"+Events": [],

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isIterable: true},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isIterable: true},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return J.get$responseText$x(xhr);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+HttpRequest_getString_closure": [],

HttpRequest_request_closure1: {"": "Closure;xhr_0-",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+HttpRequest_request_closure": [],

HttpRequest_request_closure: {"": "Closure;completer_1-,xhr_2-",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (t2 == null)
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      t2 = t3.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    } else {
      t1 = t3.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(e, null);
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+HttpRequest_request_closure": [],

HttpRequest_request_closure0: {"": "Closure;completer_3-",
  call$1: function(e) {
    var t1 = this.completer_3.future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(e, null);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+HttpRequest_request_closure": [],

_ChildNodeListLazy: {"": "ListBase;_this-",
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  "+first": 1,
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  "+last": 1,
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  "+add:1:0": 1,
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = J.getInterceptor$ax(iterable);
    if (typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    }
    for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  "+addAll:1:0": 1,
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  "+removeLast:0:0": 1,
  removeAt$1: function(_, index) {
    var t1, t2, result;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    result = t2[index];
    t1.removeChild(result);
    return result;
  },
  "+removeAt:1:0": 1,
  remove$1: function(_, object) {
    var t1, t2;
    t1 = J.getInterceptor$x(object);
    if (typeof object !== "object" || object === null || !t1.$isNode)
      return false;
    t2 = this._this;
    if (t2 !== t1.get$parentNode(object))
      return false;
    t2.removeChild(object);
    return true;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W._ChildNodeListLazy.prototype.remove$1, _receiver, "remove$1");
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  "+clear:0:0": 1,
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  "+[]=:2:0": 1,
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  "+iterator": 1,
  sort$1: function(_, compare) {
    throw H.wrapException(new P.UnsupportedError("Cannot sort Node list"));
  },
  "+sort:1:0": 1,
  "*sort": [0],
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
  },
  "+setRange:4:0": 1,
  "*setRange": [2],
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  "+length": 1,
  set$length: function(_, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
  },
  "+length=": 1,
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 1,
  $is_ChildNodeListLazy: true,
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  }
},

"+_ChildNodeListLazy": [],

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isIterable: true},

closure2: {"": "Closure;",
  call$1: function(node) {
    throw H.wrapException(new P.UnsupportedError("The MDV package is not available. You can enable it with `import 'package:mdv/mdv.dart' as mdv;` and `mdv.initialize()`"));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+closure": [],

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isIterable: true},

_AttributeMap: {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      this.remove$1(this, t1._liblib$_current);
  },
  "+clear:0:0": 1,
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._liblib$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  "+forEach:1:0": 1,
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw H.ioore(attributes, i);
        keys.push(J.get$name$x(attributes[i]));
      }
    }
    return keys;
  },
  "+keys": 1,
  get$values: function(_) {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw H.ioore(attributes, i);
        values.push(J.get$value$x(attributes[i]));
      }
    }
    return values;
  },
  "+values": 1,
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this.get$length(this) !== 0;
  },
  "+isNotEmpty": 1,
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

"+_AttributeMap": [65],

_ElementAttributeMap: {"": "_AttributeMap;_element-",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  "+containsKey:1:0": 1,
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  "+[]=:2:0": 1,
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W._ElementAttributeMap.prototype.remove$1, _receiver, "remove$1");
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  "+length": 1,
  _matches$1: function(node) {
    return J.get$_namespaceUri$x(node) == null;
  },
  "+_matches:1:0": 1
},

"+_ElementAttributeMap": [],

_NamespacedAttributeMap: {"": "_AttributeMap;_namespace-,_element-",
  containsKey$1: function(key) {
    return this._element.hasAttributeNS(this._namespace, key);
  },
  "+containsKey:1:0": 1,
  $index: function(_, key) {
    return this._element.getAttributeNS(this._namespace, key);
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    this._element.setAttributeNS(this._namespace, key, value);
  },
  "+[]=:2:0": 1,
  remove$1: function(_, key) {
    var t1, t2, value;
    t1 = this._element;
    t2 = this._namespace;
    value = t1.getAttributeNS(t2, key);
    t1.removeAttributeNS(t2, key);
    return value;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W._NamespacedAttributeMap.prototype.remove$1, _receiver, "remove$1");
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  "+length": 1,
  _matches$1: function(node) {
    return J.get$_namespaceUri$x(node) === this._namespace;
  },
  "+_matches:1:0": 1
},

"+_NamespacedAttributeMap": [],

_MultiElementCssClassSet: {"": "CssClassSetImpl;_elementIterable-,_elementCssClassSetIterable-",
  readClasses$0: function() {
    var s, t1;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  "+readClasses:0:0": 1,
  writeClasses$1: function(s) {
    var classes, t1;
    classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
    for (t1 = this._elementIterable, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      J.set$className$x(t1._liblib$_current, classes);
  },
  "+writeClasses:1:0": 1,
  modify$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_modify_closure(f));
  },
  "+modify:1:0": 1,
  remove$1: function(_, value) {
    return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W._MultiElementCssClassSet.prototype.remove$1, _receiver, "remove$1");
  },
  _modifyWithReturnValue$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    return t1.fold$2(t1, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
  },
  "+_modifyWithReturnValue:1:0": 1,
  _MultiElementCssClassSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssClassSetIterable = t1;
  },
  static: {
_MultiElementCssClassSet$: function(_elementIterable) {
  var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
},

"+new _MultiElementCssClassSet:1:0": 1}

},

"+_MultiElementCssClassSet": [],

_MultiElementCssClassSet_closure: {"": "Closure;",
  call$1: function(e) {
    return new W._ElementCssClassSet(e);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_MultiElementCssClassSet_closure": [],

_MultiElementCssClassSet_readClasses_closure: {"": "Closure;s_0-",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_MultiElementCssClassSet_readClasses_closure": [],

_MultiElementCssClassSet_modify_closure: {"": "Closure;f_0-",
  call$1: function(e) {
    return e.modify$1(this.f_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_MultiElementCssClassSet_modify_closure": [],

_MultiElementCssClassSet_remove_closure: {"": "Closure;value_0-",
  call$1: function(e) {
    return J.remove$1$ax(e, this.value_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_MultiElementCssClassSet_remove_closure": [],

_MultiElementCssClassSet__modifyWithReturnValue_closure: {"": "Closure;f_0-",
  call$2: function(prevValue, element) {
    return this.f_0.call$1(element) === true || prevValue === true;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_MultiElementCssClassSet__modifyWithReturnValue_closure": [],

_ElementCssClassSet: {"": "CssClassSetImpl;_element-",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    for (t1 = J.get$iterator$ax(J.split$1$s(J.get$className$x(this._element), " ")); t1.moveNext$0() === true;) {
      trimmed = J.trim$0$s(t1.get$current());
      if (J.get$isEmpty$asx(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  "+readClasses:0:0": 1,
  writeClasses$1: function(s) {
    P.List_List$from(s, true, null);
    J.set$className$x(this._element, s.join$1(s, " "));
  },
  "+writeClasses:1:0": 1
},

"+_ElementCssClassSet": [],

_EventStream: {"": "Stream;_liblib6$_target-,_eventType-,_useCapture-",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._liblib6$_target, this._eventType, W._EventStreamSubscription__wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  "+listen:1:3:cancelOnError:onDone:onError": 1,
  "*listen": [0, 0, 0],
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  "+listen:3:0:onDone:onError": 1,
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  "+listen:1:0": 1,
  $asStream: null
},

"+_EventStream": [],

_ElementEventStreamImpl: {"": "_EventStream;_liblib6$_target-,_eventType-,_useCapture-",
  matches$1: function(_, selector) {
    var t1 = new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    return t1;
  },
  "+matches:1:0": 1,
  $as_EventStream: null,
  $asStream: null,
  $isStream: true
},

"+_ElementEventStreamImpl": [66],

_ElementEventStreamImpl_matches_closure: {"": "Closure;selector_0-",
  call$1: function($event) {
    return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_ElementEventStreamImpl_matches_closure": [],

_ElementListEventStreamImpl: {"": "Stream;_pool-,_stream-",
  matches$1: function(_, selector) {
    var t1 = new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    return t1;
  },
  "+matches:1:0": 1,
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return this._stream.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  "+listen:1:3:cancelOnError:onDone:onError": 1,
  "*listen": [0, 0, 0],
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  "+listen:3:0:onDone:onError": 1,
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  "+listen:1:0": 1,
  _ElementListEventStreamImpl$3: function(targetList, eventType, useCapture, $T) {
    var t1, t2, stream;
    for (t1 = targetList.get$iterator(targetList), t2 = this._pool; t1.moveNext$0();) {
      stream = new W._EventStream(t1._liblib$_current, eventType, useCapture);
      stream.$builtinTypeInfo = [null];
      t2.add$1(t2, stream);
    }
    t1 = t2._controller;
    t1.get$stream;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    this._stream = t2;
  },
  $asStream: null,
  $isStream: true,
  static: {
_ElementListEventStreamImpl$: function(targetList, eventType, useCapture, $T) {
  var t1 = new W._ElementListEventStreamImpl(W._StreamPool$broadcast(null), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._ElementListEventStreamImpl$3(targetList, eventType, useCapture, $T);
  return t1;
},

"+new _ElementListEventStreamImpl:3:0": 1}

},

"+_ElementListEventStreamImpl": [66],

_ElementListEventStreamImpl_matches_closure: {"": "Closure;selector_0-",
  call$1: function($event) {
    return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_ElementListEventStreamImpl_matches_closure": [],

_StreamPool: {"": "Object;_controller-,_subscriptions-",
  add$1: function(_, stream) {
    var t1, t2;
    t1 = this._subscriptions;
    if (t1.containsKey$1(stream))
      return;
    t2 = this._controller;
    t1.$indexSet(t1, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), t2.get$addError()));
  },
  "+add:1:0": 1,
  remove$1: function(_, stream) {
    var t1, subscription;
    t1 = this._subscriptions;
    subscription = t1.remove$1(t1, stream);
    if (subscription != null)
      subscription.cancel$0();
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W._StreamPool.prototype.remove$1, _receiver, "remove$1");
  },
  close$0: function(_) {
    var t1, t2, t3;
    for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = t2._iterable, t3 = t3.get$iterator(t3), t3 = new H.MappedIterator(null, t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "MappedIterable", 0), H.getRuntimeTypeArgument(t2, "MappedIterable", 1)]); t3.moveNext$0();)
      t3._liblib$_current.cancel$0();
    t1.clear$0(t1);
    t1 = this._controller;
    t1.close$0(t1);
  },
  "+close:0:0": 1,
  get$close: function(_receiver) {
    return new W.Bound_close__StreamPool(this, W._StreamPool.prototype.close$0, _receiver, "close$0");
  },
  _StreamPool$broadcast$0: function($T) {
    this._controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
  },
  static: {
_StreamPool$broadcast: function($T) {
  var t1 = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, $T], [P.StreamSubscription, $T]));
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._StreamPool$broadcast$0($T);
  return t1;
},

"+new _StreamPool$broadcast:0:0": 1}

},

"+_StreamPool": [],

_StreamPool_add_closure: {"": "Closure;this_0-,stream_1-",
  call$0: function() {
    var t1 = this.this_0;
    return t1.remove$1(t1, this.stream_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_StreamPool_add_closure": [],

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount-,_liblib6$_target-,_eventType-,_liblib6$_onData-,_useCapture-",
  cancel$0: function() {
    if (this._liblib6$_target == null)
      return;
    this._unlisten$0();
    this._liblib6$_target = null;
    this._liblib6$_onData = null;
  },
  "+cancel:0:0": 1,
  pause$1: function(_, resumeSignal) {
    if (this._liblib6$_target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  "+pause:1:0": 1,
  "*pause": [0],
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  "+pause:0:0": 1,
  resume$0: function() {
    if (this._liblib6$_target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  "+resume:0:0": 1,
  _tryResume$0: function() {
    var t1 = this._liblib6$_onData;
    if (t1 != null && this._pauseCount <= 0)
      J.$$dom_addEventListener$3$x(this._liblib6$_target, this._eventType, t1, this._useCapture);
  },
  "+_tryResume:0:0": 1,
  _unlisten$0: function() {
    var t1 = this._liblib6$_onData;
    if (t1 != null)
      J.$$dom_removeEventListener$3$x(this._liblib6$_target, this._eventType, t1, this._useCapture);
  },
  "+_unlisten:0:0": 1,
  $asStreamSubscription: null,
  static: {
_EventStreamSubscription__wrapZone: function(callback) {
  if (J.$eq($.Zone__current, C._CustomizedZone_WYN))
    return callback;
  return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
},

"+_wrapZone:1:0": 1}

},

"+_EventStreamSubscription": [],

EventStreamProvider: {"": "Object;_eventType-"},

"+EventStreamProvider": [],

_Html5NodeValidator: {"": "Object;uriPolicy<-",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, J.get$tagName$x(element));
  },
  "+allowsElement:1:0": 1,
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = J.get$tagName$x(element);
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, H.S(tagName) + "::" + H.S(attributeName));
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + H.S(attributeName));
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  "+allowsAttribute:3:0": 1,
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null); t1.moveNext$0();) {
        attr = t1._liblib$_current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null); t1.moveNext$0();) {
        attr = t1._liblib$_current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  static: {
"": "_Html5NodeValidator__allowedElements-,_Html5NodeValidator__standardAttributes-,_Html5NodeValidator__uriAttributes-,_Html5NodeValidator__attributeValidators-",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

"+new _Html5NodeValidator:0:1:uriPolicy": 1,

"*": [0],

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

"+_standardAttributeValidator:4:0": 1,

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
},

"+_uriAttributeValidator:4:0": 1}

},

"+_Html5NodeValidator": [67],

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  "+iterator": 1,
  add$1: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
  },
  "+add:1:0": 1,
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
  },
  "+addAll:1:0": 1,
  sort$1: function(receiver, compare) {
    throw H.wrapException(new P.UnsupportedError("Cannot sort immutable List."));
  },
  "+sort:1:0": 1,
  "*sort": [0],
  removeAt$1: function(receiver, pos) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
  },
  "+removeAt:1:0": 1,
  removeLast$0: function(receiver) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
  },
  "+removeLast:0:0": 1,
  remove$1: function(receiver, object) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, W.ImmutableListMixin.prototype.remove$1, _receiver, "remove$1");
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
  },
  "+setRange:4:0": 1,
  "*setRange": [2],
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

"+ImmutableListMixin": [12],

_JsSerializer: {"": "_Serializer0;_nextFreeRefId-,_liblib6$_visited-",
  visitSendPortSync$1: function(x) {
    if (!!x.$is_JsSendPortSync)
      return ["sendport", "nativejs", x._liblib6$_id];
    if (!!x.$is_LocalSendPortSync)
      return ["sendport", "dart", W.ReceivePortSync__isolateId(), x._receivePort._portId];
    if (!!x.$is_RemoteSendPortSync)
      return ["sendport", "dart", x._isolateId, x._portId];
    throw H.wrapException("Unknown port type " + H.S(x));
  },
  "+visitSendPortSync:1:0": 1,
  visitSendPort$1: function(x) {
    throw H.wrapException(new P.UnimplementedError("Asynchronous send port not yet implemented."));
  },
  "+visitSendPort:1:0": 1
},

"+_JsSerializer": [],

_JsDeserializer: {"": "_Deserializer0;_deserialized-",
  deserializeSendPort$1: function(x) {
    var t1, tag;
    t1 = J.getInterceptor$asx(x);
    tag = t1.$index(x, 1);
    switch (tag) {
      case "nativejs":
        return new W._JsSendPortSync(t1.$index(x, 2));
      case "dart":
        return W.ReceivePortSync__lookup(t1.$index(x, 2), t1.$index(x, 3));
      default:
        throw H.wrapException("Illegal SendPortSync type: " + H.S(tag));
    }
  },
  "+deserializeSendPort:1:0": 1,
  static: {
"": "_JsDeserializer__UNSPECIFIED-",
}

},

"+_JsDeserializer": [],

_JsSendPortSync: {"": "Object;_liblib6$_id-",
  callSync$1: function(message) {
    return new W._JsDeserializer(null).deserialize$1(ReceivePortSync.dispatchCall(this._liblib6$_id, new W._JsSerializer(0, new W._MessageTraverserVisitedMap()).traverse$1(message)));
  },
  "+callSync:1:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_JsSendPortSync && J.$eq(this._liblib6$_id, other._liblib6$_id);
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return this._liblib6$_id;
  },
  "+hashCode": 1,
  $is_JsSendPortSync: true,
  $isSendPortSync: true
},

"+_JsSendPortSync": [68],

_RemoteSendPortSync: {"": "Object;_isolateId-,_portId-",
  callSync$1: function(message) {
    var serialized = new W._JsSerializer(0, new W._MessageTraverserVisitedMap()).traverse$1(message);
    return new W._JsDeserializer(null).deserialize$1(W._RemoteSendPortSync__call(this._isolateId, this._portId, serialized));
  },
  "+callSync:1:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_RemoteSendPortSync)
      t1 = J.$eq(this._isolateId, other._isolateId) && J.$eq(this._portId, other._portId);
    else
      t1 = false;
    return t1;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    var t1 = this._portId;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return J.$shr$n(this._isolateId, 16 + t1);
  },
  "+hashCode": 1,
  $is_RemoteSendPortSync: true,
  $isSendPortSync: true,
  static: {
_RemoteSendPortSync__call: function(isolateId, portId, message) {
  var t1, target, source, t2;
  t1 = {};
  target = "dart-port-" + H.S(isolateId) + "-" + H.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  t2 = new W._EventStream(new W.Events(window)._ptr, source, false);
  H.setRuntimeTypeInfo(t2, [null]);
  t2.get$first(t2).then$1(new W._RemoteSendPortSync__call_closure(t1));
  W._dispatchEvent(target, [source, message]);
  return t1.result_0;
},

"+_call:3:0": 1}

},

"+_RemoteSendPortSync": [68],

_RemoteSendPortSync__call_closure: {"": "Closure;box_0-",
  call$1: function(e) {
    this.box_0.result_0 = P._parseJson(J.get$detail$x(e), new P.JsonDecoder(null)._reviver);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_RemoteSendPortSync__call_closure": [],

_LocalSendPortSync: {"": "Object;_receivePort-",
  callSync$1: function(message) {
    return new W._JsDeserializer(null).deserialize$1(new W._JsSerializer(0, new W._MessageTraverserVisitedMap()).traverse$1(this._receivePort._liblib6$_callback$1(new W._JsDeserializer(null).deserialize$1(new W._JsSerializer(0, new W._MessageTraverserVisitedMap()).traverse$1(message)))));
  },
  "+callSync:1:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_LocalSendPortSync && this._receivePort === other._receivePort;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this._receivePort);
  },
  "+hashCode": 1,
  $is_LocalSendPortSync: true,
  $isSendPortSync: true
},

"+_LocalSendPortSync": [68],

ReceivePortSync: {"": "Object;_portId-,_liblib6$_callback-,_portSubscription-",
  _liblib6$_callback$1: function(arg0) {
    return this._liblib6$_callback.call$1(arg0);
  },
  receive$1: function(callback) {
    var t1, t2, t3;
    this._liblib6$_callback = callback;
    if (this._portSubscription == null) {
      t1 = window;
      t2 = W.ReceivePortSync__isolateId();
      t3 = this._portId;
      t3 = new W._EventStream(new W.Events(t1)._ptr, "dart-port-" + H.S(t2) + "-" + H.S(t3), false);
      H.setRuntimeTypeInfo(t3, [null]);
      t2 = new W._EventStreamSubscription(0, t3._liblib6$_target, t3._eventType, W._EventStreamSubscription__wrapZone(new W.ReceivePortSync_receive_closure(this)), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      this._portSubscription = t2;
    }
  },
  "+receive:1:0": 1,
  toSendPort$0: function() {
    return new W._LocalSendPortSync(this);
  },
  "+toSendPort:0:0": 1,
  ReceivePortSync$0: function() {
    if ($.ReceivePortSync__portIdCount == null) {
      $.ReceivePortSync__portIdCount = 0;
      $.ReceivePortSync__portMap = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, W.ReceivePortSync);
    }
    var t1 = $.ReceivePortSync__portIdCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    $.ReceivePortSync__portIdCount = t1 + 1;
    this._portId = t1;
    t1 = $.ReceivePortSync__portMap;
    t1.$indexSet(t1, this._portId, this);
  },
  $isReceivePortSync: true,
  static: {
"": "ReceivePortSync__portMap-,ReceivePortSync__portIdCount-,ReceivePortSync__cachedIsolateId-",
ReceivePortSync$: function() {
  var t1 = new W.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
},

"+new ReceivePortSync:0:0": 1,

ReceivePortSync__isolateId: function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = W._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
},

"+_isolateId": 1,

ReceivePortSync__lookup: function(isolateId, portId) {
  var t1;
  if (J.$eq(isolateId, W.ReceivePortSync__isolateId())) {
    t1 = $.ReceivePortSync__portMap;
    return t1.$index(t1, portId).toSendPort$0();
  } else
    return new W._RemoteSendPortSync(isolateId, portId);
},

"+_lookup:2:0": 1}

},

"+ReceivePortSync": [],

ReceivePortSync_receive_closure: {"": "Closure;this_0-",
  call$1: function(e) {
    var data, t1;
    data = P._parseJson(J.get$detail$x(e), new P.JsonDecoder(null)._reviver);
    t1 = J.getInterceptor$asx(data);
    W._dispatchEvent(t1.$index(data, 0), new W._JsSerializer(0, new W._MessageTraverserVisitedMap()).traverse$1(this.this_0._liblib6$_callback$1(new W._JsDeserializer(null).deserialize$1(t1.$index(data, 1)))));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+ReceivePortSync_receive_closure": [],

NodeValidatorBuilder: {"": "Object;_validators-",
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  "+add:1:0": 1,
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  "+allowsElement:1:0": 1,
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  },
  "+allowsAttribute:3:0": 1
},

"+NodeValidatorBuilder": [67],

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0-",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+NodeValidatorBuilder_allowsElement_closure": [],

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0-,attributeName_1-,value_2-",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+NodeValidatorBuilder_allowsAttribute_closure": [],

_SimpleNodeValidator: {"": "Object;uriPolicy<-",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, J.get$tagName$x(element));
  },
  "+allowsElement:1:0": 1,
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = J.get$tagName$x(element);
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, H.S(tagName) + "::" + H.S(attributeName)))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + H.S(attributeName)))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, H.S(tagName) + "::" + H.S(attributeName)))
        return true;
      else if (t1.contains$1(t1, "*::" + H.S(attributeName)))
        return true;
      else if (t1.contains$1(t1, H.S(tagName) + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  },
  "+allowsAttribute:3:0": 1
},

"+_SimpleNodeValidator": [67],

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs-,allowedElements-,allowedAttributes-,allowedUriAttributes-,uriPolicy-",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (J.$eq(attributeName, "template") && J.$eq(value, ""))
      return true;
    if (J.$eq(J.$index$asx(J.get$attributes$x(element), "template"), "")) {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  "+allowsAttribute:3:0": 1,
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS-",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
},

"+new _TemplatingNodeValidator:0:0": 1}

},

"+_TemplatingNodeValidator": [],

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_TemplatingNodeValidator_closure": [],

Point0: {"": "Object;x>-,y>-",
  toString$0: function(_) {
    return "(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  "+toString:0:0": 1,
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint0)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P.JenkinsSmiHash_finish(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(0, t1), t2));
  },
  "+hashCode": 1,
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return new W.Point0(t1 + t3, t4 + t2);
  },
  "++:1:0": 1,
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return new W.Point0(t1 - t3, t4 - t2);
  },
  "+-:1:0": 1,
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof factor !== "number")
      throw H.iae(factor);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    return new W.Point0(t1 * factor, t2 * factor);
  },
  "+*:1:0": 1,
  ceil$0: function(_) {
    return new W.Point0(J.ceil$0$nx(this.x), J.ceil$0$nx(this.y));
  },
  "+ceil:0:0": 1,
  toInt$0: function(_) {
    return new W.Point0(J.toInt$0$nx(this.x), J.toInt$0$nx(this.y));
  },
  "+toInt:0:0": 1,
  $isPoint0: true
},

"+Point": [],

RectBase: {"": "Object;",
  get$right: function(_) {
    var t1, t2;
    t1 = this.get$left(this);
    t2 = this.get$width(this);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return t1 + t2;
  },
  "+right": 1,
  right$0: function($receiver) {
    return this.get$right($receiver).call$0();
  },
  get$bottom: function(_) {
    var t1, t2;
    t1 = this.get$top(this);
    t2 = this.get$height(this);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return t1 + t2;
  },
  "+bottom": 1,
  bottom$0: function($receiver) {
    return this.get$bottom($receiver).call$0();
  },
  toString$0: function(_) {
    return "(" + H.S(this.get$left(this)) + ", " + H.S(this.get$top(this)) + ", " + H.S(this.get$width(this)) + ", " + H.S(this.get$height(this)) + ")";
  },
  "+toString:0:0": 1,
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRect)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.get$top(this);
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.get$width(this);
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$height(this);
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.get$top(this));
    t3 = J.get$hashCode$(this.get$width(this));
    t4 = J.get$hashCode$(this.get$height(this));
    return P.JenkinsSmiHash_finish(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  "+hashCode": 1,
  intersects$1: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.get$left(this);
    t2 = J.getInterceptor$x(other);
    t3 = J.$add$ns(t2.get$left(other), t2.get$width(other));
    if (typeof t1 !== "number")
      throw t1.$le();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (t1 <= t3) {
      t1 = t2.get$left(other);
      t3 = this.get$left(this);
      t4 = this.get$width(this);
      if (typeof t3 !== "number")
        throw t3.$add();
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (J.$le$n(t1, t3 + t4) === true) {
        t1 = this.get$top(this);
        t3 = J.$add$ns(t2.get$top(other), t2.get$height(other));
        if (typeof t1 !== "number")
          throw t1.$le();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (t1 <= t3) {
          t1 = t2.get$top(other);
          t2 = this.get$top(this);
          t3 = this.get$height(this);
          if (typeof t2 !== "number")
            throw t2.$add();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t3 = J.$le$n(t1, t2 + t3) === true;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+intersects:1:0": 1,
  containsPoint$1: function(_, another) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$x(another);
    if (J.$ge$n(t1.get$x(another), this.get$left(this)) === true) {
      t2 = t1.get$x(another);
      t3 = this.get$left(this);
      t4 = this.get$width(this);
      if (typeof t3 !== "number")
        throw t3.$add();
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (J.$le$n(t2, t3 + t4) === true)
        if (J.$ge$n(t1.get$y(another), this.get$top(this)) === true) {
          t1 = t1.get$y(another);
          t2 = this.get$top(this);
          t3 = this.get$height(this);
          if (typeof t2 !== "number")
            throw t2.$add();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t3 = J.$le$n(t1, t2 + t3) === true;
          t1 = t3;
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+containsPoint:1:0": 1,
  ceil$0: function(_) {
    return new W.Rect(J.ceil$0$nx(this.get$left(this)), J.ceil$0$nx(this.get$top(this)), J.ceil$0$nx(this.get$width(this)), J.ceil$0$nx(this.get$height(this)));
  },
  "+ceil:0:0": 1,
  toInt$0: function(_) {
    return new W.Rect(J.toInt$0$nx(this.get$left(this)), J.toInt$0$nx(this.get$top(this)), J.toInt$0$nx(this.get$width(this)), J.toInt$0$nx(this.get$height(this)));
  },
  "+toInt:0:0": 1,
  get$topLeft: function(_) {
    return new W.Point0(this.get$left(this), this.get$top(this));
  },
  "+topLeft": 1,
  get$bottomRight: function(_) {
    var t1, t2, t3, t4;
    t1 = this.get$left(this);
    t2 = this.get$width(this);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = this.get$top(this);
    t4 = this.get$height(this);
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    return new W.Point0(t1 + t2, t3 + t4);
  },
  "+bottomRight": 1
},

"+RectBase": [],

Rect: {"": "RectBase;left>-,top>-,width>-,height>-",
  width$0: function($receiver) {
    return this.width.call$0();
  },
  height$0: function($receiver) {
    return this.height.call$0();
  },
  $isRect: true
},

"+Rect": [],

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  "+[]:1:0": 1,
  $indexSet: function(_, object, info) {
  },
  "+[]=:2:0": 1,
  reset$0: function(_) {
  },
  "+reset:0:0": 1,
  cleanup$0: function() {
  },
  "+cleanup:0:0": 1
},

"+_MessageTraverserVisitedMap": [],

_MessageTraverser0: {"": "Object;",
  traverse$1: function(x) {
    var result;
    if (W._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
    }
    return result;
  },
  "+traverse:1:0": 1,
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  "+_dispatch:1:0": 1,
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  },
  "+visitObject:1:0": 1
},

"+_MessageTraverser": [],

_Serializer0: {"": "_MessageTraverser0;",
  visitPrimitive$1: function(x) {
    return x;
  },
  "+visitPrimitive:1:0": 1,
  visitList$1: function(list) {
    var id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    return ["list", id, this._serializeList$1(list)];
  },
  "+visitList:1:0": 1,
  visitMap$1: function(map) {
    var id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  "+visitMap:1:0": 1,
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = P.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  },
  "+_serializeList:1:0": 1,
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

"+_Serializer": [],

_Deserializer0: {"": "Object;",
  deserialize$1: function(x) {
    if (W._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  "+deserialize:1:0": 1,
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  "+_deserializeHelper:1:0": 1,
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !H.isJsIndexable(dartList, dartList[init.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw H.ioore(dartList, i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw H.ioore(dartList, i);
      dartList[i] = t1;
    }
    return dartList;
  },
  "+_deserializeList:1:0": 1,
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !H.isJsIndexable(keys, keys[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, result, keys, t1, x);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !H.isJsIndexable(values, values[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, result, keys, 0, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw H.ioore(keys, i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw H.ioore(values, i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  "+_deserializeMap:1:0": 1,
  _deserializeMap$1$bailout: function(state0, result, keys, t1, x, values) {
    switch (state0) {
      case 0:
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t1 = J.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = J.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw H.iae(len);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  },
  "+deserializeObject:1:0": 1
},

"+_Deserializer": [],

FixedSizeListIterator: {"": "Object;_array-,_length-,_position-,_current-",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      this._current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  "+moveNext:0:0": 1,
  get$current: function() {
    return this._current;
  },
  "+current": 1,
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
},

"+new FixedSizeListIterator:1:0": 1}

},

"+FixedSizeListIterator": [35],

_DOMWindowCrossFrame: {"": "Object;_window-",
  get$parent: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  "+parent": 1,
  get$top: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  "+top": 1,
  $isEventTarget: true,
  static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
},

"+_createSafe:1:0": 1}

},

"+_DOMWindowCrossFrame": [69],

_LocationWrapper: {"": "Object;_ptr-",
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  "+hostname": 1,
  get$href: function(_) {
    return this._ptr.href;
  },
  "+href": 1,
  href$1: function($receiver, arg0) {
    return this.get$href($receiver).call$1(arg0);
  },
  set$href: function(_, value) {
    this._ptr.href = value;
  },
  "+href=": 1,
  get$port: function(_) {
    return this._ptr.port;
  },
  "+port": 1,
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  "+protocol": 1,
  toString$0: function(_) {
    return this._ptr.toString();
  },
  "+toString:0:0": 1,
  $isLocation: true
},

"+_LocationWrapper": [70],

NodeValidator: {"": "Object;"},

"+NodeValidator": [],

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor-,_loc-",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  },
  "+allowsUri:1:0": 1
},

"+_SameOriginUriPolicy": [71],

_ValidatingTreeSanitizer: {"": "Object;validator-",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  "+sanitizeTree:1:0": 1,
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, t4, $name, t5, t6;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + H.S(t1.get$tagName(node)) + ">";
          t2.warn$1;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = J.getInterceptor$asx(attrs);
        isAttr = t2.$index(attrs, "is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + H.S(t1.get$tagName(node)) + " is=\"" + H.S(isAttr) + "\">";
            t2.warn$1;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        keys = J.toList$0$ax(attrs.get$keys());
        for (i = J.$sub$n(t2.get$length(attrs), 1), t3 = J.getInterceptor$asx(keys); t4 = J.getInterceptor$n(i), t4.$ge(i, 0) === true; i = t4.$sub(i, 1)) {
          $name = t3.$index(keys, i);
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.$index(attrs, $name))) {
            window;
            t5 = $.get$Console__safeConsole();
            t6 = "Removing disallowed attribute <" + H.S(t1.get$tagName(node)) + " " + H.S($name) + "=\"" + H.S(t2.$index(attrs, $name)) + "\">";
            t5.warn$1;
            if (typeof console != "undefined")
              console.warn(t6);
            t2.remove$1(attrs, $name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  },
  "+sanitizeNode:1:0": 1
},

"+_ValidatingTreeSanitizer": [72],

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0-",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = J.get$previousNode$x(child);
      this.call$1(child);
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_ValidatingTreeSanitizer_sanitizeTree_walk": [],

HtmlElement: {"": "Element;"},

"+HtmlElement": [],

AnchorElement: {"": "HtmlElement;hostname=-,href%-,name%-,port=-,protocol=-,target=-,type%-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 1
},

"+AnchorElement": [],

AreaElement: {"": "HtmlElement;hostname=-,href%-,port=-,protocol=-,target=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+AreaElement": [],

BaseElement: {"": "HtmlElement;href%-,target=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+BaseElement": [],

Blob: {"": "Interceptor;type=-", $isBlob: true},

"+Blob": [],

BodyElement: {"": "HtmlElement;",
  get$onResize: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_resize._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onResize": 1,
  $isBodyElement: true
},

"+BodyElement": [],

ButtonElement: {"": "HtmlElement;name%-,type%-,value%-"},

"+ButtonElement": [],

CanvasElement: {"": "HtmlElement;height%-,width%-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+CanvasElement": [82],

CharacterData: {"": "Node;data=-,length=-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  }
},

"+CharacterData": [83],

CloseEvent: {"": "Event;code=-"},

"+CloseEvent": [],

CompositionEvent: {"": "UIEvent;data=-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  }
},

"+CompositionEvent": [],

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;cssText}-,length=-",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  "+getPropertyValue:1:0": 1,
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "+setProperty:3:0": 1,
  "*setProperty": [0]
},

"+CssStyleDeclaration": [],

CustomEvent: {"": "Event;",
  get$detail: function(receiver) {
    return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
  },
  "+detail": 1,
  _initCustomEvent$4: function(receiver, typeArg, canBubbleArg, cancelableArg, detailArg) {
    return receiver.initCustomEvent(typeArg, canBubbleArg, cancelableArg, detailArg);
  },
  "+_initCustomEvent:4:0": 1
},

"+CustomEvent": [],

DialogElement: {"": "HtmlElement;",
  show$0: function(receiver) {
    return receiver.show();
  },
  "+show:0:0": 1
},

"+DialogElement": [],

Document: {"": "Node;",
  get$window: function(receiver) {
    return W._convertNativeToDart_Window(receiver.defaultView);
  },
  "+window": 1,
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  "+query:1:0": 1,
  get$onChange: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_change._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onChange": 1,
  get$onClick: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onClick": 1,
  get$onKeyUp: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_keyup._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onKeyUp": 1,
  get$onMouseOut: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_mouseout._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onMouseOut": 1,
  get$onMouseOver: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_mouseover._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onMouseOver": 1,
  get$onScroll: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_scroll._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onScroll": 1,
  queryAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  "+queryAll:1:0": 1
},

"+Document": [],

DocumentFragment: {"": "Node;",
  get$children: function(receiver) {
    var t1;
    if (receiver._children == null) {
      t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      H.setRuntimeTypeInfo(t1, [null]);
      receiver._children = t1;
    }
    return receiver._children;
  },
  "+children": 1,
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  "+query:1:0": 1,
  queryAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  "+queryAll:1:0": 1,
  get$innerHtml: function(receiver) {
    var e, t1;
    e = W._ElementFactoryProvider_createElement_tag("div", null);
    t1 = J.getInterceptor$x(e);
    t1.append$1(e, this.clone$1(receiver, true));
    return t1.get$innerHtml(e);
  },
  "+innerHtml": 1,
  appendText$1: function(receiver, text) {
    receiver.appendChild(document.createTextNode(text));
  },
  "+appendText:1:0": 1,
  appendHtml$1: function(receiver, text) {
    receiver.appendChild(J.createFragment$3$treeSanitizer$validator$x(document.body, text, null, null));
  },
  "+appendHtml:1:0": 1
},

"+DocumentFragment": [84],

DomError: {"": "Interceptor;name=-"},

"+DomError": [],

DomException: {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  "+name": 1,
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 1
},

"+DomException": [],

Element: {"": "Node;_innerHtml:innerHTML}-,className%-,clientHeight=-,id=-,scrollLeft=-,scrollTop=-,style=-,tagName=-",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  "+attributes": 1,
  set$attributes: function(receiver, value) {
    var attributes, t1, t2, key;
    attributes = new W._ElementAttributeMap(receiver);
    attributes.clear$0(attributes);
    for (t1 = value.get$keys()._map, t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t1._cell = t1._map._first, t2 = attributes._element; t1.moveNext$0();) {
      key = t1._liblib1$_current;
      t2.setAttribute(key, value.$index(value, key));
    }
  },
  "+attributes=": 1,
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  "+children": 1,
  queryAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  "+queryAll:1:0": 1,
  get$classes: function(receiver) {
    return new W._ElementCssClassSet(receiver);
  },
  "+classes": 1,
  getNamespacedAttributes$1: function(receiver, namespace) {
    return new W._NamespacedAttributeMap(namespace, receiver);
  },
  "+getNamespacedAttributes:1:0": 1,
  get$client: function(receiver) {
    return new W.Rect(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  "+client": 1,
  get$offset: function(receiver) {
    return new W.Rect(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
  },
  "+offset": 1,
  offset$0: function($receiver) {
    return this.get$offset($receiver).call$0();
  },
  appendText$1: function(receiver, text) {
    this.insertAdjacentText$2(receiver, "beforeend", text);
  },
  "+appendText:1:0": 1,
  appendHtml$1: function(receiver, text) {
    this.insertAdjacentHtml$2(receiver, "beforeend", text);
  },
  "+appendHtml:1:0": 1,
  get$xtag: function(receiver) {
    var t1 = receiver._xtag;
    return t1 != null ? t1 : receiver;
  },
  "+xtag": 1,
  set$xtag: function(receiver, value) {
    receiver._xtag = value;
  },
  "+xtag=": 1,
  toString$0: function(receiver) {
    return receiver.localName;
  },
  "+toString:0:0": 1,
  scrollIntoView$1: function(receiver, alignment) {
    var hasScrollIntoViewIfNeeded = !!receiver.scrollIntoViewIfNeeded;
    if (hasScrollIntoViewIfNeeded)
      receiver.scrollIntoViewIfNeeded();
    else
      receiver.scrollIntoView();
  },
  "+scrollIntoView:1:0": 1,
  "*scrollIntoView": [0],
  scrollIntoView$0: function($receiver) {
    return this.scrollIntoView$1($receiver, null);
  },
  "+scrollIntoView:0:0": 1,
  insertAdjacentText$2: function(receiver, where, text) {
    if (!!receiver.insertAdjacentText)
      receiver.insertAdjacentText(where, text);
    else
      this._insertAdjacentNode$2(receiver, where, document.createTextNode(text));
  },
  "+insertAdjacentText:2:0": 1,
  insertAdjacentHtml$2: function(receiver, where, html) {
    if (!!receiver.insertAdjacentHTML)
      receiver.insertAdjacentHTML(where, html);
    else
      this._insertAdjacentNode$2(receiver, where, J.createFragment$3$treeSanitizer$validator$x(document.body, html, null, null));
  },
  "+insertAdjacentHtml:2:0": 1,
  _insertAdjacentNode$2: function(receiver, where, node) {
    var t1, first;
    switch (where.toLowerCase()) {
      case "beforebegin":
        J.insertBefore$2$x(receiver.parentNode, node, receiver);
        break;
      case "afterbegin":
        if (new W._ChildNodeListLazy(receiver)._this.childNodes.length > 0) {
          t1 = new W._ChildNodeListLazy(receiver)._this.childNodes;
          if (0 >= t1.length)
            throw H.ioore(t1, 0);
          first = t1[0];
        } else
          first = null;
        receiver.insertBefore(node, first);
        break;
      case "beforeend":
        receiver.appendChild(node);
        break;
      case "afterend":
        J.insertBefore$2$x(receiver.parentNode, node, receiver.nextSibling);
        break;
      default:
        throw H.wrapException(new P.ArgumentError("Invalid position " + where));
    }
  },
  "+_insertAdjacentNode:2:0": 1,
  matches$1: function(receiver, selectors) {
    if (!!receiver.matches)
      return receiver.matches(selectors);
    else if (!!receiver.webkitMatchesSelector)
      return receiver.webkitMatchesSelector(selectors);
    else if (!!receiver.mozMatchesSelector)
      return receiver.mozMatchesSelector(selectors);
    else if (!!receiver.msMatchesSelector)
      return receiver.msMatchesSelector(selectors);
    else
      throw H.wrapException(new P.UnsupportedError("Not supported on this platform"));
  },
  "+matches:1:0": 1,
  matchesWithAncestors$1: function(receiver, selectors) {
    var elem, t1;
    elem = receiver;
    do {
      t1 = J.getInterceptor$x(elem);
      if (t1.matches$1(elem, selectors) === true)
        return true;
      elem = t1.get$parent(elem);
    } while (elem != null);
    return false;
  },
  "+matchesWithAncestors:1:0": 1,
  createShadowRoot$0: function(receiver) {
    return (receiver.createShadowRoot || receiver.webkitCreateShadowRoot).call(receiver);
  },
  "+createShadowRoot:0:0": 1,
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if ($.Element__defaultValidator == null) {
        t1 = new W.NodeValidatorBuilder([]);
        t2 = t1._validators;
        t2.push(W._Html5NodeValidator$(null));
        t2.push(W._TemplatingNodeValidator$());
        $.Element__defaultValidator = t1;
      }
      validator = $.Element__defaultValidator;
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    }
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      t1 = J.getInterceptor$x(contextElement);
      t1.set$_innerHtml(contextElement, html);
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1.get$firstChild(contextElement) != null;)
        fragment.appendChild(t1.get$firstChild(contextElement));
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    return fragment;
  },
  "+createFragment:1:2:treeSanitizer:validator": 1,
  "*createFragment": [0, 0],
  get$innerHtml: function(receiver) {
    return receiver.innerHTML;
  },
  "+innerHtml": 1,
  click$0: function(receiver) {
    return receiver.click();
  },
  "+click:0:0": 1,
  scrollLeft$0: function($receiver) {
    return this.scrollLeft.call$0();
  },
  scrollTop$0: function($receiver) {
    return this.scrollTop.call$0();
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  "+getBoundingClientRect:0:0": 1,
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  "+query:1:0": 1,
  get$onChange: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onChange": 1,
  get$onClick: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onClick": 1,
  get$onKeyUp: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_keyup._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onKeyUp": 1,
  get$onMouseOut: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_mouseout._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onMouseOut": 1,
  get$onMouseOver: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_mouseover._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onMouseOver": 1,
  get$onScroll: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_scroll._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onScroll": 1,
  $isElement: true
},

"+Element": [83, 84],

EmbedElement: {"": "HtmlElement;height%-,name%-,type%-,width%-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+EmbedElement": [],

Event: {"": "Interceptor;type=-",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  "+target": 1,
  $isEvent: true
},

"+Event": [],

EventTarget: {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "+$dom_addEventListener:3:0": 1,
  "*$dom_addEventListener": [0],
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "+$dom_removeEventListener:3:0": 1,
  "*$dom_removeEventListener": [0],
  $isEventTarget: true
},

"+EventTarget": [],

FieldSetElement: {"": "HtmlElement;name%-,type=-"},

"+FieldSetElement": [],

File: {"": "Blob;name=-", $isFile: true},

"+File": [],

FileError: {"": "DomError;code=-"},

"+FileError": [],

FileList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 1,
  set$length: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
  },
  "+length=": 1,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+first": 1,
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+last": 1,
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  "+elementAt:1:0": 1,
  $isFileList: true,
  $asList: function() {
    return [W.File];
  },
  $asIterable: function() {
    return [W.File];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+FileList": [85, 75],

FormElement: {"": "HtmlElement;length=-,method=-,name%-,target=-",
  reset$0: function(receiver) {
    return receiver.reset();
  },
  "+reset:0:0": 1
},

"+FormElement": [],

HashChangeEvent: {"": "Event;newUrl:newURL=-,oldUrl:oldURL=-"},

"+HashChangeEvent": [],

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 1,
  set$length: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
  },
  "+length=": 1,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+first": 1,
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+last": 1,
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  "+elementAt:1:0": 1,
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+HtmlCollection": [86, 75],

HttpRequest: {"": "XmlHttpRequestEventTarget;responseText=-",
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  "+open:2:3:async:password:user": 1,
  "*open": [0, 0, 0],
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  "+open:3:0:async": 1,
  $isHttpRequest: true
},

"+HttpRequest": [],

IFrameElement: {"": "HtmlElement;height%-,name%-,width%-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+IFrameElement": [],

ImageElement: {"": "HtmlElement;height%-,width%-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+ImageElement": [82],

InputElement: {"": "HtmlElement;files=-,height%-,list=-,name%-,type%-,value%-,width%-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  $isElement: true,
  $isNode: true,
  $isEventTarget: true
},

"+InputElement": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107],

KeyboardEvent: {"": "UIEvent;", $isKeyboardEvent: true},

"+KeyboardEvent": [],

KeygenElement: {"": "HtmlElement;name%-,type=-"},

"+KeygenElement": [],

LIElement: {"": "HtmlElement;type%-,value%-"},

"+LIElement": [],

LinkElement: {"": "HtmlElement;href%-,type%-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+LinkElement": [],

Location: {"": "Interceptor;hostname=-,href%-,port=-,protocol=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 1,
  $isLocation: true
},

"+Location": [108],

MapElement: {"": "HtmlElement;name%-"},

"+MapElement": [],

MediaElement: {"": "HtmlElement;",
  loop$3: function($receiver, arg0, arg1, arg2) {
    return this.loop.call$3(arg0, arg1, arg2);
  }
},

"+MediaElement": [],

MediaError: {"": "Interceptor;code=-"},

"+MediaError": [],

MediaKeyError: {"": "Interceptor;code=-"},

"+MediaKeyError": [],

MediaStream: {"": "EventTarget;id=-,label=-",
  stop$0: function(receiver) {
    return receiver.stop();
  },
  "+stop:0:0": 1
},

"+MediaStream": [],

MessageEvent: {"": "Event;",
  get$data: function(receiver) {
    return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
  },
  "+data": 1,
  data$1: function($receiver, arg0) {
    return this.get$data($receiver).call$1(arg0);
  },
  get$source: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.source);
  },
  "+source": 1
},

"+MessageEvent": [],

MetaElement: {"": "HtmlElement;name%-"},

"+MetaElement": [],

MeterElement: {"": "HtmlElement;value%-"},

"+MeterElement": [],

MidiConnectionEvent: {"": "Event;port=-"},

"+MidiConnectionEvent": [],

MidiMessageEvent: {"": "Event;data=-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  }
},

"+MidiMessageEvent": [],

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  "+send:2:0": 1,
  "*send": [0]
},

"+MidiOutput": [],

MidiPort: {"": "EventTarget;id=-,name=-,type=-"},

"+MidiPort": [],

MouseEvent: {"": "UIEvent;",
  get$client: function(receiver) {
    return new W.Point0(receiver.clientX, receiver.clientY);
  },
  "+client": 1,
  get$offset: function(receiver) {
    var t1, t2;
    if (!!receiver.offsetX)
      return new W.Point0(receiver.offsetX, receiver.offsetY);
    else {
      t1 = W._convertNativeToDart_EventTarget(receiver.target);
      t2 = J.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isElement)
        throw H.wrapException(new P.UnsupportedError("offsetX is only supported on elements"));
      t1 = new W.Point0(receiver.clientX, receiver.clientY);
      t1 = t1.$sub(t1, J.get$topLeft$x(J.getBoundingClientRect$0$x(W._convertNativeToDart_EventTarget(receiver.target))));
      return new W.Point0(J.toInt$0$nx(t1.x), J.toInt$0$nx(t1.y));
    }
  },
  "+offset": 1,
  offset$0: function($receiver) {
    return this.get$offset($receiver).call$0();
  },
  $isMouseEvent: true
},

"+MouseEvent": [],

MutationEvent: {"": "Event;newValue=-"},

"+MutationEvent": [],

NavigatorUserMediaError: {"": "Interceptor;name=-"},

"+NavigatorUserMediaError": [],

Node: {"": "EventTarget;firstChild=-,lastChild=-,_namespaceUri:namespaceURI=-,nextNode:nextSibling=-,nodeType=-,document:ownerDocument=-,parent:parentElement=-,parentNode=-,previousNode:previousSibling=-,text:textContent%-",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  "+nodes": 1,
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      J._removeChild$1$x(t1, receiver);
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new W.Bound_remove_Node(this, W.Node.prototype.remove$0, _receiver, "remove$0");
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  "+replaceWith:1:0": 1,
  insertAllBefore$2: function(receiver, newNodes, refChild) {
    var t1, len, i;
    t1 = J.getInterceptor$ax(newNodes);
    if (typeof newNodes === "object" && newNodes !== null && !!t1.$is_ChildNodeListLazy) {
      t1 = newNodes._this;
      if (t1 === receiver)
        throw H.wrapException(new P.ArgumentError(newNodes));
      for (len = t1.childNodes.length, i = 0; i < len; ++i)
        receiver.insertBefore(t1.firstChild, refChild);
    } else
      for (t1 = t1.get$iterator(newNodes); t1.moveNext$0() === true;)
        receiver.insertBefore(t1.get$current(), refChild);
  },
  "+insertAllBefore:2:0": 1,
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "+toString:0:0": 1,
  bind$3: function(receiver, $name, model, path) {
    return J.bind$3$x($.get$TemplateElement_mdvPackage().call$1(receiver), $name, model, path);
  },
  "+bind:3:0": 1,
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  "+append:1:0": 1,
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  "+clone:1:0": 1,
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  "+contains:1:0": 1,
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  "+insertBefore:2:0": 1,
  _removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  "+_removeChild:1:0": 1,
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  "+_replaceChild:2:0": 1,
  $isNode: true
},

"+Node": [],

NodeList0: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 1,
  set$length: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
  },
  "+length=": 1,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+first": 1,
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+last": 1,
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  "+elementAt:1:0": 1,
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+NodeList": [86, 75],

OListElement: {"": "HtmlElement;start%-,type%-"},

"+OListElement": [],

ObjectElement: {"": "HtmlElement;code%-,data=-,height%-,name%-,type%-,width%-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  },
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+ObjectElement": [],

OptGroupElement: {"": "HtmlElement;label%-"},

"+OptGroupElement": [],

OptionElement: {"": "HtmlElement;index=-,label%-,value%-"},

"+OptionElement": [],

OutputElement: {"": "HtmlElement;name%-,type=-,value%-"},

"+OutputElement": [],

ParamElement: {"": "HtmlElement;name%-,value%-"},

"+ParamElement": [],

PositionError: {"": "Interceptor;code=-"},

"+PositionError": [],

ProcessingInstruction: {"": "CharacterData;target=-"},

"+ProcessingInstruction": [],

ProgressElement: {"": "HtmlElement;value%-"},

"+ProgressElement": [],

ProgressEvent: {"": "Event;total=-", $isProgressEvent: true},

"+ProgressEvent": [],

Range0: {"": "Interceptor;",
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  "+getBoundingClientRect:0:0": 1,
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 1
},

"+Range": [],

ScriptElement: {"": "HtmlElement;type%-"},

"+ScriptElement": [],

SelectElement: {"": "HtmlElement;length%-,name%-,type=-,value%-"},

"+SelectElement": [],

ShadowRoot: {"": "DocumentFragment;innerHtml:innerHTML=-",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  "+clone:1:0": 1
},

"+ShadowRoot": [],

SourceElement: {"": "HtmlElement;type%-"},

"+SourceElement": [],

SpeechSynthesisEvent: {"": "Event;name=-"},

"+SpeechSynthesisEvent": [],

StorageEvent: {"": "Event;key=-,newValue=-,oldValue=-"},

"+StorageEvent": [],

StyleElement: {"": "HtmlElement;type%-"},

"+StyleElement": [],

TableRowElement: {"": "HtmlElement;", $isTableRowElement: true},

"+TableRowElement": [],

TemplateElement: {"": "HtmlElement;", $isTemplateElement: true},

"+TemplateElement": [],

Text: {"": "CharacterData;", $isText: true},

"+Text": [],

TextAreaElement: {"": "HtmlElement;name%-,type=-,value%-"},

"+TextAreaElement": [],

TextEvent: {"": "UIEvent;data=-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  }
},

"+TextEvent": [],

TrackElement: {"": "HtmlElement;label%-"},

"+TrackElement": [],

UIEvent: {"": "Event;detail=-"},

"+UIEvent": [],

VideoElement: {"": "MediaElement;height%-,width%-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+VideoElement": [82],

Window: {"": "EventTarget;name=-",
  lookupPort$1: function(receiver, $name) {
    var portStr = J.$index$asx(J.get$attributes$x(receiver.document.documentElement), "dart-port:" + $name);
    if (portStr == null)
      return;
    return new W._JsDeserializer(null).deserialize$1(P._parseJson(portStr, new P.JsonDecoder(null)._reviver));
  },
  "+lookupPort:1:0": 1,
  registerPort$2: function(receiver, $name, port) {
    var serialized = new W._JsSerializer(0, new W._MessageTraverserVisitedMap()).traverse$1(port);
    J.$indexSet$ax(J.get$attributes$x(receiver.document.documentElement), "dart-port:" + $name, C.C_JsonCodec.get$encoder().convert$1(serialized));
  },
  "+registerPort:2:0": 1,
  get$document: function(receiver) {
    return receiver.document;
  },
  "+document": 1,
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  "+location": 1,
  get$parent: function(receiver) {
    return W._convertNativeToDart_Window(receiver.parent);
  },
  "+parent": 1,
  get$top: function(receiver) {
    return W._convertNativeToDart_Window(receiver.top);
  },
  "+top": 1,
  get$window: function(receiver) {
    return W._convertNativeToDart_Window(receiver.window);
  },
  "+window": 1,
  scrollTo$2: function(receiver, x, y) {
    return receiver.scrollTo(x, y);
  },
  "+scrollTo:2:0": 1,
  stop$0: function(receiver) {
    return receiver.stop();
  },
  "+stop:0:0": 1,
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 1,
  get$onChange: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_change._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onChange": 1,
  get$onClick: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onClick": 1,
  get$onKeyUp: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_keyup._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onKeyUp": 1,
  get$onMouseOut: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_mouseout._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onMouseOut": 1,
  get$onMouseOver: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_mouseover._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onMouseOver": 1,
  get$onResize: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_resize._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onResize": 1,
  get$onScroll: function(receiver) {
    var t1 = new W._EventStream(receiver, C.EventStreamProvider_scroll._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+onScroll": 1,
  $isEventTarget: true
},

"+Window": [109, 110, 69],

XmlHttpRequestEventTarget: {"": "EventTarget;"},

"+XmlHttpRequestEventTarget": [],

_Attr: {"": "Node;name=-,value%-"},

"+_Attr": [],

_ClientRect: {"": "Interceptor;bottom=-,height=-,left=-,right=-,top=-,width=-",
  toString$0: function(receiver) {
    return "(" + H.S(receiver.left) + ", " + H.S(receiver.top) + ", " + H.S(receiver.width) + ", " + H.S(receiver.height) + ")";
  },
  "+toString:0:0": 1,
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRect)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+==:1:0": 1,
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return P.JenkinsSmiHash_finish(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(P.JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  "+hashCode": 1,
  intersects$1: function(receiver, other) {
    var t1, t2, t3, t4;
    t1 = receiver.left;
    t2 = J.getInterceptor$x(other);
    t3 = J.$add$ns(t2.get$left(other), t2.get$width(other));
    if (typeof t1 !== "number")
      throw t1.$le();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (t1 <= t3) {
      t1 = t2.get$left(other);
      t3 = receiver.left;
      t4 = receiver.width;
      if (typeof t3 !== "number")
        throw t3.$add();
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (J.$le$n(t1, t3 + t4) === true) {
        t1 = receiver.top;
        t3 = J.$add$ns(t2.get$top(other), t2.get$height(other));
        if (typeof t1 !== "number")
          throw t1.$le();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (t1 <= t3) {
          t1 = t2.get$top(other);
          t2 = receiver.top;
          t3 = receiver.height;
          if (typeof t2 !== "number")
            throw t2.$add();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t3 = J.$le$n(t1, t2 + t3) === true;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+intersects:1:0": 1,
  containsPoint$1: function(receiver, another) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$x(another);
    if (J.$ge$n(t1.get$x(another), receiver.left) === true) {
      t2 = t1.get$x(another);
      t3 = receiver.left;
      t4 = receiver.width;
      if (typeof t3 !== "number")
        throw t3.$add();
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (J.$le$n(t2, t3 + t4) === true)
        if (J.$ge$n(t1.get$y(another), receiver.top) === true) {
          t1 = t1.get$y(another);
          t2 = receiver.top;
          t3 = receiver.height;
          if (typeof t2 !== "number")
            throw t2.$add();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t3 = J.$le$n(t1, t2 + t3) === true;
          t1 = t3;
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  "+containsPoint:1:0": 1,
  ceil$0: function(receiver) {
    return new W.Rect(J.ceil$0$nx(receiver.left), J.ceil$0$nx(receiver.top), J.ceil$0$nx(receiver.width), J.ceil$0$nx(receiver.height));
  },
  "+ceil:0:0": 1,
  toInt$0: function(receiver) {
    return new W.Rect(J.toInt$0$nx(receiver.left), J.toInt$0$nx(receiver.top), J.toInt$0$nx(receiver.width), J.toInt$0$nx(receiver.height));
  },
  "+toInt:0:0": 1,
  get$topLeft: function(receiver) {
    return new W.Point0(receiver.left, receiver.top);
  },
  "+topLeft": 1,
  get$bottomRight: function(receiver) {
    var t1, t2, t3, t4;
    t1 = receiver.left;
    t2 = receiver.width;
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = receiver.top;
    t4 = receiver.height;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    return new W.Point0(t1 + t2, t3 + t4);
  },
  "+bottomRight": 1,
  bottom$0: function($receiver) {
    return this.bottom.call$0();
  },
  height$0: function($receiver) {
    return this.height.call$0();
  },
  right$0: function($receiver) {
    return this.right.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  $isRect: true
},

"+_ClientRect": [111],

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 1,
  set$length: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
  },
  "+length=": 1,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+first": 1,
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  "+last": 1,
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  "+elementAt:1:0": 1,
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+_NamedNodeMap": [86, 75]}],
["dart.dom.svg", "dart:svg", , P, {
_AttributeClassSet: {"": "CssClassSetImpl;_liblib10$_element-",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = new W._ElementAttributeMap(this._liblib10$_element)._element.getAttribute("class");
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = J.trim$0$s(t1._liblib$_current);
      if (J.get$isEmpty$asx(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  "+readClasses:0:0": 1,
  writeClasses$1: function(s) {
    new W._ElementAttributeMap(this._liblib10$_element)._element.setAttribute("class", s.join$1(s, " "));
  },
  "+writeClasses:1:0": 1
},

"+_AttributeClassSet": [],

AElement: {"": "GraphicsElement;target=-,href=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+AElement": [112, 113],

AltGlyphElement: {"": "TextPositioningElement;href=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+AltGlyphElement": [113],

FEBlendElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEBlendElement": [114],

FEColorMatrixElement: {"": "SvgElement;type=-,values=-,height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEColorMatrixElement": [114],

FEComponentTransferElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEComponentTransferElement": [114],

FECompositeElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FECompositeElement": [114],

FEConvolveMatrixElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEConvolveMatrixElement": [114],

FEDiffuseLightingElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEDiffuseLightingElement": [114],

FEDisplacementMapElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEDisplacementMapElement": [114],

FEFloodElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEFloodElement": [114],

FEGaussianBlurElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEGaussianBlurElement": [114],

FEImageElement: {"": "SvgElement;height=-,width=-,x=-,y=-,href=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+FEImageElement": [112, 113, 114],

FEMergeElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEMergeElement": [114],

FEMorphologyElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEMorphologyElement": [114],

FEOffsetElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FEOffsetElement": [114],

FEPointLightElement: {"": "SvgElement;x=-,y=-"},

"+FEPointLightElement": [],

FESpecularLightingElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FESpecularLightingElement": [114],

FESpotLightElement: {"": "SvgElement;x=-,y=-"},

"+FESpotLightElement": [],

FETileElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FETileElement": [114],

FETurbulenceElement: {"": "SvgElement;type=-,height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+FETurbulenceElement": [114],

FilterElement: {"": "SvgElement;height=-,width=-,x=-,y=-,href=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+FilterElement": [112, 113],

ForeignObjectElement: {"": "GraphicsElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+ForeignObjectElement": [112],

GraphicsElement: {"": "SvgElement;"},

"+GraphicsElement": [115],

ImageElement0: {"": "GraphicsElement;height=-,width=-,x=-,y=-,href=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+ImageElement": [112, 113],

MaskElement: {"": "SvgElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+MaskElement": [115, 112],

PatternElement: {"": "SvgElement;height=-,width=-,x=-,y=-,href=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+PatternElement": [115, 112, 113, 116],

PointList0: {"": "Interceptor;",
  clear$0: function(receiver) {
    return receiver.clear();
  },
  "+clear:0:0": 1
},

"+PointList": [],

PolygonElement: {"": "GraphicsElement;points=-"},

"+PolygonElement": [112],

PolylineElement: {"": "GraphicsElement;points=-"},

"+PolylineElement": [112],

RectElement: {"": "GraphicsElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+RectElement": [112],

ScriptElement0: {"": "SvgElement;type%-,href=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+ScriptElement": [112, 113],

StyleElement0: {"": "SvgElement;type%-"},

"+StyleElement": [],

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new P._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  "+classes": 1,
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  "+children": 1,
  get$innerHtml: function(receiver) {
    var container, cloned, t1;
    container = W._ElementFactoryProvider_createElement_tag("div", null);
    cloned = receiver.cloneNode(true);
    t1 = J.getInterceptor$x(container);
    J.addAll$1$ax(t1.get$children(container), J.get$children$x(cloned));
    return t1.get$innerHtml(container);
  },
  "+innerHtml": 1,
  insertAdjacentText$2: function(receiver, where, text) {
    throw H.wrapException(new P.UnsupportedError("Cannot invoke insertAdjacentText on SVG."));
  },
  "+insertAdjacentText:2:0": 1,
  insertAdjacentHtml$2: function(receiver, where, text) {
    throw H.wrapException(new P.UnsupportedError("Cannot invoke insertAdjacentHtml on SVG."));
  },
  "+insertAdjacentHtml:2:0": 1,
  click$0: function(receiver) {
    throw H.wrapException(new P.UnsupportedError("Cannot invoke click SVG."));
  },
  "+click:0:0": 1
},

"+SvgElement": [],

SvgSvgElement: {"": "GraphicsElement;height=-,width=-,x=-,y=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  }
},

"+SvgSvgElement": [117, 112, 116],

TextContentElement: {"": "GraphicsElement;"},

"+TextContentElement": [112],

TextPathElement: {"": "TextContentElement;method=-,href=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+TextPathElement": [113],

TextPositioningElement: {"": "TextContentElement;x=-,y=-"},

"+TextPositioningElement": [],

UseElement: {"": "GraphicsElement;height=-,width=-,x=-,y=-,href=-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+UseElement": [115, 112, 113],

_GradientElement: {"": "SvgElement;href=-",
  href$1: function($receiver, arg0) {
    return this.href.call$1(arg0);
  }
},

"+_GradientElement": [112, 113]}],
["dart.dom.web_sql", "dart:web_sql", , P, {
SqlError: {"": "Interceptor;code=-"},

"+SqlError": []}],
["dart.isolate", "dart:isolate", , P, {
_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = H.ReceivePortImpl$();
  return $.lazyPort;
},

"+port": 1,

ReceivePort: {"": "Object;", $isReceivePort: true},

"+ReceivePort": []}],
["dart.json", "dart:json", , P, {
_JsonStringifier: {"": "Object;sink-,seen-",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw H.wrapException(new P.JsonCyclicError(object, null));
    }
    t1.push(object);
  },
  "+checkCycle:1:0": 1,
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson))
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
        t1 = this.seen;
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t1.pop();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
      }

    }
  },
  "+stringifyValue:1:0": 1,
  stringifyJsonValue$1: function(object) {
    var t1, t2, i, t3;
    t1 = {};
    if (typeof object === "number") {
      this.sink.write$1(C.JSNumber_methods.toString$0(object));
      return true;
    } else if (object === true) {
      this.sink.write$1("true");
      return true;
    } else if (object === false) {
      this.sink.write$1("false");
      return true;
    } else if (object == null) {
      this.sink.write$1("null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sink;
      t1.write$1("\"");
      P._JsonStringifier_escape(t1, object);
      t1.write$1("\"");
      return true;
    } else {
      t2 = J.getInterceptor$ax(object);
      if (typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList)) {
        if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !H.isJsIndexable(object, object[init.dispatchPropertyName])))
          return this.stringifyJsonValue$1$bailout(1, t2, object);
        this.checkCycle$1(object);
        t2 = this.sink;
        t2.write$1("[");
        if (object.length > 0) {
          this.stringifyValue$1(object[0]);
          for (i = 1; i < object.length; ++i) {
            t2._contents = t2._contents + ",";
            if (i >= object.length)
              throw H.ioore(object, i);
            this.stringifyValue$1(object[i]);
          }
        }
        t2.write$1("]");
        t1 = this.seen;
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t1.pop();
        return true;
      } else if (typeof object === "object" && object !== null && !!t2.$isMap) {
        this.checkCycle$1(object);
        t3 = this.sink;
        t3.write$1("{");
        t1.first_0 = true;
        t2.forEach$1(object, new P._JsonStringifier_stringifyJsonValue_closure(t1, this));
        t3.write$1("}");
        t3 = this.seen;
        if (0 >= t3.length)
          throw H.ioore(t3, 0);
        t3.pop();
        return true;
      } else
        return false;
    }
  },
  "+stringifyJsonValue:1:0": 1,
  stringifyJsonValue$1$bailout: function(state0, t2, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, i, t3;
        if (state0 === 0 && typeof object === "number") {
          this.sink.write$1(C.JSNumber_methods.toString$0(object));
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                this.sink.write$1("true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      this.sink.write$1("false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            this.sink.write$1("null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sink;
                                  t1.write$1("\"");
                                  P._JsonStringifier_escape(t1, object);
                                  t1.write$1("\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                      t2 = J.getInterceptor(object);
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sink;
                                            t1.write$1("[");
                                            if (t2.get$length(object) > 0) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; i < t2.get$length(object); ++i) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1.write$1("]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw H.ioore(t1, 0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!t2.$isMap) {
                                        this.checkCycle$1(object);
                                        t3 = this.sink;
                                        t3.write$1("{");
                                        t1.first_0 = true;
                                        t2.forEach$1(object, new P._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t3.write$1("}");
                                        t3 = this.seen;
                                        if (0 >= t3.length)
                                          throw H.ioore(t3, 0);
                                        t3.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  },
  static: {
_JsonStringifier_stringify: function(object) {
  var output = P.StringBuffer$("");
  new P._JsonStringifier(output, []).stringifyValue$1(object);
  return output._contents;
},

"+stringify:1:0": 1,

_JsonStringifier_escape: function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2, t3;
  t1 = J.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(charCodes, [J.JSInt]);
  needsEscape = false;
  i = 0;
  while (true) {
    if (typeof $length !== "number")
      throw H.iae($length);
    if (!(i < $length))
      break;
    charCode = t1.codeUnitAt$1(s, i);
    t2 = J.getInterceptor$n(charCode);
    if (t2.$lt(charCode, 32) === true) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t3 = J.$and$n(t2.$shr(charCode, 12), 15);
          if (J.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = J.$and$n(t2.$shr(charCode, 8), 15);
          if (J.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = J.$and$n(t2.$shr(charCode, 4), 15);
          if (J.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t2 = t2.$and(charCode, 15);
          if (J.$lt$n(t2, 10) === true) {
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if (t2.$eq(charCode, 34) || t2.$eq(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
    ++i;
  }
  sb.write$1(needsEscape ? P.String_String$fromCharCodes(charCodes) : s);
},

"+escape:2:0": 1}

},

"+_JsonStringifier": [],

_JsonStringifier_stringifyJsonValue_closure: {"": "Closure;box_0-,this_1-",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0)
      t2.sink.write$1(",\"");
    else
      t2.sink.write$1("\"");
    t2 = this.this_1;
    t3 = t2.sink;
    P._JsonStringifier_escape(t3, key);
    t3.write$1("\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_JsonStringifier_stringifyJsonValue_closure": []}],
["dart.math", "dart:math", , P, {
min: function(a, b) {
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  return a;
},

"+min:2:0": 1,

max: function(a, b) {
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (C.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
},

"+max:2:0": 1,

_Random: {"": "Object;"},

"+_Random": [73]}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null, $asIterable: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isIterable: true,
  $asIterable: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT-",
}

},

"+Int64List": [74, 75],

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isIterable: true,
  $asIterable: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT-",
}

},

"+Uint64List": [74, 75],

ByteBuffer: {"": "Interceptor;", $isByteBuffer: true},

"+ByteBuffer": [],

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$ge(index, $length) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
  },
  "+_invalidIndex:2:0": 1,
  _checkIndex$2: function(receiver, index, $length) {
    if (index >>> 0 != index || J.$ge$n(index, $length) === true)
      this._invalidIndex$2(receiver, index, $length);
  },
  "+_checkIndex:2:0": 1,
  _checkSublistArguments$3: function(receiver, start, end, $length) {
    var t1 = $length + 1;
    this._checkIndex$2(receiver, start, t1);
    if (end == null)
      return $length;
    this._checkIndex$2(receiver, end, t1);
    if (J.$gt$n(start, end) === true)
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + H.S(end)));
    return end;
  },
  "+_checkSublistArguments:3:0": 1,
  $isTypedData: true
},

"+TypedData": [],

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Float32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSDouble];
  },
  $asIterable: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Float32List": [118, 75],

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Float64Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSDouble];
  },
  $asIterable: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Float64List": [118, 75],

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int16Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Int16List": [74, 75],

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Int32List": [74, 75],

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int8Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Int8List": [74, 75],

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint16Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Uint16List": [74, 75],

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Uint32List": [74, 75],

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint8ClampedArray(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Uint8ClampedList": [74, 75],

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 1,
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, receiver, index);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 1,
  $$index$bailout: function(state0, receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, receiver, index, value);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 1,
  $$indexSet$bailout: function(state0, receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint8Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  "+sublist:2:0": 1,
  "*sublist": [0],
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true
},

"+Uint8List": [74, 75]}],
["dartvm", "package:irhydra/src/modes/dartvm/dartvm.dart", , V, {
Mode: {"": "BaseMode;ir-,_code-,ticks-,blockTicks-,profile-,_codeMode-",
  canRecognize$1: function(text) {
    var t1 = J.getInterceptor$asx(text);
    return t1.contains$1(text, "*** BEGIN CFG") === true || t1.contains$1(text, "*** BEGIN CODE") === true;
  },
  "+canRecognize:1:0": 1,
  parse$1: function(str) {
    return O.parse2(str);
  },
  "+parse:1:0": 1,
  displayPhase$2: function(method, phase) {
    var t1, profiles, lastOffset, profiles0, $name, t2, instr, t3, t4, attachRef;
    this.ir = Y.parse0(phase.get$ir());
    t1 = U.parse1(J.get$code$x(phase));
    this._codeMode = "no asm";
    this._code = t1;
    this.ticks = null;
    this.blockTicks = null;
    t1 = this.profile;
    if (t1 != null) {
      t1.where$1;
      profiles = new H.WhereIterable(t1, new V.Mode_displayPhase_closure(method));
      H.setRuntimeTypeInfo(profiles, [null]);
      if (profiles.get$length(profiles) > 1) {
        lastOffset = J.get$offset$x(J.get$last$ax(J.where$1$ax(J.get$code$x(this._code), new V.Mode_displayPhase_closure0())));
        profiles0 = new H.WhereIterable(profiles, new V.Mode_displayPhase_closure1(lastOffset));
        H.setRuntimeTypeInfo(profiles0, [H.getRuntimeTypeArgument(profiles, "IterableBase", 0)]);
        profiles = profiles0;
      }
      if (profiles.get$length(profiles) === 1) {
        this.ticks = profiles.get$first(profiles).get$ticks();
        this.blockTicks = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = J.get$iterator$ax(this._code.get$blocks().get$keys()); t1.moveNext$0() === true;) {
          $name = t1.get$current();
          t2 = this.blockTicks;
          t2.$indexSet(t2, $name, 0);
          for (t2 = J.get$iterator$ax(J.where$1$ax(this._code.codeOf$1($name), new V.Mode_displayPhase_closure2())); t2.moveNext$0() === true;) {
            instr = t2.get$current();
            t3 = J.getInterceptor$x(instr);
            if (this.ticks.containsKey$1(t3.get$offset(instr)) === true) {
              t4 = this.blockTicks;
              t4.$indexSet(t4, $name, J.$add$ns(t4.$index(t4, $name), J.$index$asx(this.ticks, t3.get$offset(instr))));
            }
          }
        }
      }
    }
    this.updateIRView$0();
    attachRef = R.makeAttachableReferencer(J.get$xtag$x(document.querySelector("#ir-pane")).get$rangeContentAsHtmlFull(), C.C__Popover);
    D.display0(document.querySelector("#graph-pane"), this.ir, attachRef, this.blockTicks);
  },
  "+displayPhase:2:0": 1,
  updateIRView$0: function() {
    var t1, t2, t3;
    J.clear$0$ax(J.get$xtag$x(document.querySelector("#ir-pane")));
    t1 = J.get$xtag$x(document.querySelector("#ir-pane"));
    t2 = this.ir;
    t3 = this._code;
    t3 = Q._Renderer$(t1, this._codeMode, t2, t3, this.ticks, this.blockTicks);
    t3.display$0(t3);
  },
  "+updateIRView:0:0": 1
},

"+Mode": [],

Mode_displayPhase_closure: {"": "Closure;method_0-",
  call$1: function(p) {
    return J.$eq(J.get$name$x(p), J.get$name$x(this.method_0).get$full());
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Mode_displayPhase_closure": [],

Mode_displayPhase_closure0: {"": "Closure;",
  call$1: function(val) {
    var t1 = J.getInterceptor(val);
    return typeof val === "object" && val !== null && !!t1.$isInstruction;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Mode_displayPhase_closure": [],

Mode_displayPhase_closure1: {"": "Closure;lastOffset_1-",
  call$1: function(p) {
    return J.$eq(p.get$lastOffset(), this.lastOffset_1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Mode_displayPhase_closure": [],

Mode_displayPhase_closure2: {"": "Closure;",
  call$1: function(val) {
    var t1 = J.getInterceptor(val);
    return typeof val === "object" && val !== null && !!t1.$isInstruction;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Mode_displayPhase_closure": []}],
["delayed_reaction", "package:irhydra/src/delayed_reaction.dart", , X, {
DelayedReaction: {"": "Object;delay-,timer-",
  schedule$1: function(action) {
    return this._setTimer$1(P.Timer_Timer(this.delay, new X.DelayedReaction_schedule_closure(action)));
  },
  "+schedule:1:0": 1,
  cancel$0: function() {
    return this._setTimer$1(null);
  },
  "+cancel:0:0": 1,
  _setTimer$1: function(new_timer) {
    var t1 = this.timer;
    if (t1 != null)
      t1.cancel$0();
    this.timer = new_timer;
  },
  "+_setTimer:1:0": 1,
  static: {
"": "DelayedReaction_DEFAULT_DELAY-",
}

},

"+DelayedReaction": [],

DelayedReaction_schedule_closure: {"": "Closure;action_0-",
  call$0: function() {
    return this.action_0.call$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+DelayedReaction_schedule_closure": []}],
["formatting", "package:irhydra/src/formatting.dart", , N, {
makeFormatter: function(map) {
  var t1, actions, t2;
  t1 = map.get$values(map);
  actions = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  t1 = map.get$keys();
  t2 = new H.MappedIterable(t1, new N.makeFormatter_closure());
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
  return new N.makeFormatter_closure0(actions, P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0)));
},

"+makeFormatter:1:0": 1,

_apply: function(patterns, text, callback) {
  var unmatched, t1, i, m, value, text0, wordMatch, t2, word;
  if (typeof text !== "string" && (typeof text !== "object" || text === null || text.constructor !== Array && !H.isJsIndexable(text, text[init.dispatchPropertyName])))
    return N._apply$bailout(1, callback, patterns, text);
  unmatched = [];
  $outer$0:
    for (; t1 = J.getInterceptor$s(text), text.length > 0;) {
      for (i = 0; i < patterns.length; ++i) {
        m = patterns[i].firstMatch$1(text);
        if (m != null) {
          value = m.group$1(0);
          if (unmatched.length !== 0) {
            callback.call$2(null, C.JSArray_methods.join$0(unmatched));
            C.JSArray_methods.set$length(unmatched, 0);
          }
          callback.call$2(i, value);
          text0 = t1.substring$1(text, J.get$length$asx(value));
          text = text0;
          continue $outer$0;
        }
      }
      wordMatch = $.get$wordRe().firstMatch$1(text);
      if (wordMatch != null) {
        t2 = wordMatch._match;
        if (0 >= t2.length)
          throw H.ioore(t2, 0);
        word = t2[0];
        unmatched.push(word);
        text = t1.substring$1(text, J.get$length$asx(word));
      } else {
        if (0 >= text.length)
          throw H.ioore(text, 0);
        unmatched.push(text[0]);
        text = t1.substring$1(text, 1);
      }
    }
  if (unmatched.length !== 0)
    callback.call$2(null, C.JSArray_methods.join$0(unmatched));
},

"+_apply:3:0": 1,

_apply$bailout: function(state0, callback, patterns, text) {
  var unmatched, t1, i, m, value, text0, wordMatch, t2, word;
  unmatched = [];
  $outer$0:
    for (; t1 = J.getInterceptor$asx(text), J.$gt$n(t1.get$length(text), 0) === true;) {
      for (i = 0; i < patterns.length; ++i) {
        m = patterns[i].firstMatch$1(text);
        if (m != null) {
          value = m.group$1(0);
          if (unmatched.length !== 0) {
            callback.call$2(null, C.JSArray_methods.join$0(unmatched));
            C.JSArray_methods.set$length(unmatched, 0);
          }
          callback.call$2(i, value);
          text0 = t1.substring$1(text, J.get$length$asx(value));
          text = text0;
          continue $outer$0;
        }
      }
      wordMatch = $.get$wordRe().firstMatch$1(text);
      if (wordMatch != null) {
        t2 = wordMatch._match;
        if (0 >= t2.length)
          throw H.ioore(t2, 0);
        word = t2[0];
        unmatched.push(word);
        text = t1.substring$1(text, J.get$length$asx(word));
      } else {
        unmatched.push(t1.$index(text, 0));
        text = t1.substring$1(text, 1);
      }
    }
  if (unmatched.length !== 0)
    callback.call$2(null, C.JSArray_methods.join$0(unmatched));
},

makeFormatter_closure: {"": "Closure;",
  call$1: function(re) {
    return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^" + H.S(re), false, true, false), null, null);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+makeFormatter_closure": [],

makeFormatter_closure0: {"": "Closure;actions_0-,patterns_1-",
  call$1: function(text) {
    var result = document.createElement("span", null);
    N._apply(this.patterns_1, text, new N.makeFormatter__closure(this.actions_0, result));
    return result;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+makeFormatter_closure": [],

makeFormatter__closure: {"": "Closure;actions_2-,result_3-",
  call$2: function(idx, val) {
    var t1, t2;
    t1 = J.get$nodes$x(this.result_3);
    if (idx != null) {
      t2 = this.actions_2;
      if (idx >>> 0 !== idx || idx >= t2.length)
        throw H.ioore(t2, idx);
      t2 = t2[idx].call$1(val);
    } else
      t2 = document.createTextNode(val);
    J.add$1$ax(t1, t2);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+makeFormatter__closure": []}],
["graph", "package:irhydra/src/draw2d/graph.dart", , D, {
Geometry_linesIntersect: function(x1, y1, x2, y2, x3, y3, x4, y4) {
  var bb1_x, bb1_y, bb2_x, bb2_y, bb3_x, bb3_y, bb4_x, bb4_y, t1, p1p3_x, t2, p1p3_y, t3, p2p3_x, t4, p2p3_y, p3p4_x, p3p4_y, t5, t6, p2p1_x, p2p1_y, p1p4_x, p1p4_y;
  bb1_x = P.min(x1, x2);
  bb1_y = P.min(y1, y2);
  bb2_x = P.max(x1, x2);
  bb2_y = P.max(y1, y2);
  bb3_x = P.min(x3, x4);
  bb3_y = P.min(y3, y4);
  bb4_x = P.max(x3, x4);
  bb4_y = P.max(y3, y4);
  if (!(bb2_x >= bb3_x && bb4_x >= bb1_x && bb2_y >= bb3_y && bb4_y >= bb1_y))
    return false;
  t1 = J.getInterceptor$n(x1);
  p1p3_x = t1.$sub(x1, x3);
  t2 = J.getInterceptor$n(y1);
  p1p3_y = t2.$sub(y1, y3);
  t3 = J.getInterceptor$n(x2);
  p2p3_x = t3.$sub(x2, x3);
  t4 = J.getInterceptor$n(y2);
  p2p3_y = t4.$sub(y2, y3);
  p3p4_x = J.$sub$n(x3, x4);
  p3p4_y = J.$sub$n(y3, y4);
  t5 = J.getInterceptor$n(p3p4_x);
  t6 = J.getInterceptor$n(p1p3_x);
  if (D.Geometry_productSign(J.$sub$n(J.$mul$n(p2p3_x, p3p4_y), t5.$mul(p3p4_x, p2p3_y)), J.$sub$n(t5.$mul(p3p4_x, p1p3_y), t6.$mul(p1p3_x, p3p4_y))) >= 0) {
    p2p1_x = t3.$sub(x2, x1);
    p2p1_y = t4.$sub(y2, y1);
    p1p4_x = t1.$sub(x1, x4);
    p1p4_y = t2.$sub(y1, y4);
    t1 = t6.$negate(p1p3_x);
    t2 = J.$negate$n(p1p3_y);
    t3 = J.getInterceptor$n(p2p1_x);
    return D.Geometry_productSign(J.$sub$n(J.$mul$n(t1, p2p1_y), t3.$mul(p2p1_x, t2)), J.$sub$n(t3.$mul(p2p1_x, p1p4_y), J.$mul$n(p1p4_x, p2p1_y))) <= 0;
  }
  return false;
},

"+linesIntersect:8:0": 1,

Geometry_productSign: function(x, y) {
  var t1 = J.getInterceptor(x);
  if (t1.$eq(x, 0) || J.$eq(y, 0))
    return 0;
  else if (!J.$eq(t1.$lt(x, 0), J.$lt$n(y, 0)))
    return -1;
  return 1;
},

"+productSign:2:0": 1,

Collections_reverse: function(l) {
  var t1, mid, j, i, temp;
  t1 = l.length;
  mid = C.JSInt_methods.$tdiv(t1, 2);
  for (j = t1 - 1, i = 0; i < mid; ++i, --j) {
    if (i >= t1)
      throw H.ioore(l, i);
    temp = l[i];
    if (j < 0)
      throw H.ioore(l, j);
    l[i] = l[j];
    l[j] = temp;
  }
},

"+reverse:1:0": 1,

Collections_removeAll: function(from, es) {
  var t1, t2, i;
  for (t1 = J.get$iterator$ax(es), t2 = J.getInterceptor$asx(from); t1.moveNext$0() === true;) {
    i = t2.indexOf$1(from, t1.get$current());
    if (!J.$eq(i, -1))
      t2.removeAt$1(from, i);
  }
},

"+removeAll:2:0": 1,

Collections_remove: function(from, e) {
  var t1, i;
  t1 = J.getInterceptor$asx(from);
  i = t1.indexOf$1(from, e);
  if (typeof i !== "number")
    return D.Collections_remove$bailout(1, t1, from, i);
  if (i !== -1)
    t1.removeAt$1(from, i);
},

"+remove:2:0": 1,

Collections_remove$bailout: function(state0, t1, from, i) {
  if (!J.$eq(i, -1))
    t1.removeAt$1(from, i);
},

BreakCycles: {"": "GraphVisitor;graphNodes-",
  visit$1: function(g) {
    var t1, t2, n, t3;
    t1 = this.graphNodes;
    t1.resetFlags$0();
    for (t2 = g.nodes, t2 = t2.get$iterator(t2); t2.moveNext$0();) {
      n = t2._liblib$_current;
      t3 = J.get$length$asx(n.get$incoming());
      J.$indexSet$ax(n.get$workingInts(), 0, t3);
      t1.add$1(t1, n);
    }
    if (this.containsCycles$1(g)) {
      this.initializeDegrees$1(g);
      this.greedyCycleRemove$1(g);
      this.invertEdges$1(g);
    }
  },
  "+visit:1:0": 1,
  revisit$1: function(g) {
    var t1, edge;
    for (t1 = g.edges, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      edge = t1._liblib$_current;
      if (edge.get$isFeedback() === true)
        edge.invert$0();
    }
  },
  "+revisit:1:0": 1,
  allNodesFlagged$0: function() {
    return H.IterableMixinWorkaround_every(this.graphNodes.list, new D.BreakCycles_allNodesFlagged_closure());
  },
  "+allNodesFlagged:0:0": 1,
  containsCycles$1: function(g) {
    var noLefts, t1, node, right, t2;
    noLefts = P.List_List(null, null);
    for (t1 = this.graphNodes.list, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      node = t1._liblib$_current;
      if (J.$eq(J.$index$asx(node.get$workingInts(), 0), 0))
        this.sortedInsert$2(noLefts, node);
    }
    for (; noLefts.length > 0;) {
      node = noLefts.pop();
      node.set$flag(true);
      for (t1 = J.get$iterator$ax(J.get$list$x(node.get$outgoing())); t1.moveNext$0() === true;) {
        right = J.get$target$x(t1.get$current());
        t2 = J.$sub$n(J.$index$asx(right.get$workingInts(), 0), 1);
        J.$indexSet$ax(right.get$workingInts(), 0, t2);
        if (J.$eq(J.$index$asx(right.get$workingInts(), 0), 0))
          this.sortedInsert$2(noLefts, right);
      }
    }
    return !this.allNodesFlagged$0();
  },
  "+containsCycles:1:0": 1,
  findNodeWithMaxDegree$0: function() {
    var t1, max, maxNode, node;
    for (t1 = this.graphNodes.list, t1 = new H.ListIterator(t1, t1.length, 0, null), max = -1073741823, maxNode = null; t1.moveNext$0();) {
      node = t1._liblib$_current;
      if (J.$ge$n(J.$index$asx(node.get$workingInts(), 3), max) === true && node.get$flag() !== true) {
        max = J.$index$asx(node.get$workingInts(), 3);
        maxNode = node;
      }
      if (typeof max !== "number")
        return this.findNodeWithMaxDegree$0$bailout(1, max, maxNode, t1);
    }
    return maxNode;
  },
  "+findNodeWithMaxDegree:0:0": 1,
  findNodeWithMaxDegree$0$bailout: function(state0, max, maxNode, t1) {
    switch (state0) {
      case 0:
        t1 = this.graphNodes.list;
        t1 = new H.ListIterator(t1, t1.length, 0, null);
        max = -1073741823;
        maxNode = null;
      case 1:
        var node;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                node = t1._liblib$_current;
                if (J.$ge$n(J.$index$asx(node.get$workingInts(), 3), max) === true && node.get$flag() !== true) {
                  max = J.$index$asx(node.get$workingInts(), 3);
                  maxNode = node;
                }
              case 1:
                state0 = 0;
            }
        return maxNode;
    }
  },
  greedyCycleRemove$1: function(g) {
    var t1, t2, sL, sR, hasSink, node, hasSource, max, orderIndex, i, orderIndex0;
    t1 = D.Node0;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    sL = new D.NodeList(t2);
    t1 = D.Node0;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    sR = new D.NodeList(t2);
    t1 = this.graphNodes;
    do {
      do
        for (t2 = t1.get$iterator(t1); hasSink = false, t2.moveNext$0();) {
          node = t2._liblib$_current;
          if (J.$eq(J.$index$asx(node.get$workingInts(), 2), 0) && node.get$flag() !== true) {
            node.set$flag(true);
            this.updateIncoming$1(node);
            sR.add$1(sR, node);
            hasSink = true;
            break;
          }
        }
      while (hasSink);
      do
        for (t2 = t1.get$iterator(t1); hasSource = false, t2.moveNext$0();) {
          node = t2._liblib$_current;
          if (J.$eq(J.$index$asx(node.get$workingInts(), 1), 0) && node.get$flag() !== true) {
            node.set$flag(true);
            this.updateOutgoing$1(node);
            sL.add$1(sL, node);
            hasSource = true;
            break;
          }
        }
      while (hasSource);
      max = this.findNodeWithMaxDegree$0();
      if (max != null) {
        sL.add$1(sL, max);
        max.set$flag(true);
        this.updateIncoming$1(max);
        this.updateOutgoing$1(max);
      }
    } while (!this.allNodesFlagged$0());
    for (t1 = sL.list, orderIndex = 0, i = 0; i < t1.length; ++i, orderIndex = orderIndex0) {
      orderIndex0 = orderIndex + 1;
      J.$indexSet$ax(t1[i].get$workingInts(), 0, orderIndex);
    }
    for (t1 = sR.list, i = t1.length - 1; i >= 0; --i, orderIndex = orderIndex0) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      orderIndex0 = orderIndex + 1;
      J.$indexSet$ax(t1[i].get$workingInts(), 0, orderIndex);
    }
  },
  "+greedyCycleRemove:1:0": 1,
  initializeDegrees$1: function(g) {
    var t1, n, t2;
    this.graphNodes.resetFlags$0();
    for (t1 = g.nodes, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      n = t1._liblib$_current;
      t2 = J.get$length$asx(n.get$incoming());
      J.$indexSet$ax(n.get$workingInts(), 1, t2);
      t2 = J.get$length$asx(n.get$outgoing());
      J.$indexSet$ax(n.get$workingInts(), 2, t2);
      t2 = J.$sub$n(J.get$length$asx(n.get$outgoing()), J.get$length$asx(n.get$incoming()));
      J.$indexSet$ax(n.get$workingInts(), 3, t2);
    }
  },
  "+initializeDegrees:1:0": 1,
  invertEdges$1: function(g) {
    var t1, e, t2;
    for (t1 = g.edges, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      e = t1._liblib$_current;
      t2 = J.getInterceptor$x(e);
      if (J.$gt$n(J.$index$asx(t2.get$source(e).get$workingInts(), 0), J.$index$asx(t2.get$target(e).get$workingInts(), 0)) === true) {
        e.invert$0();
        e.set$isFeedback(true);
      }
    }
  },
  "+invertEdges:1:0": 1,
  sortedInsert$2: function(list, node) {
    var t1, insert, t2, t3;
    t1 = list.length;
    insert = 0;
    while (true) {
      if (insert < t1) {
        t2 = list[insert].get$sortValue();
        if (typeof t2 !== "number")
          return this.sortedInsert$2$bailout(1, insert, list, node, t2);
        t3 = node.get$sortValue();
        if (typeof t3 !== "number")
          return this.sortedInsert$2$bailout(2, insert, list, node, t2, t3);
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = false;
      if (!t2)
        break;
      ++insert;
    }
    C.JSArray_methods.insert$2(list, insert, node);
  },
  "+sortedInsert:2:0": 1,
  sortedInsert$2$bailout: function(state0, insert, list, node, t1, t2) {
    switch (state0) {
      case 0:
        insert = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
              default:
                if (state0 === 2 || state0 === 1 || state0 === 0 && insert < list.length)
                  switch (state0) {
                    case 0:
                      t1 = list[insert].get$sortValue();
                    case 1:
                      state0 = 0;
                      t2 = node.get$sortValue();
                    case 2:
                      state0 = 0;
                      t2 = J.$gt$n(t1, t2) === true;
                      t1 = t2;
                  }
                else
                  t1 = false;
                if (!t1)
                  break L0;
                ++insert;
            }
        C.JSArray_methods.insert$2(list, insert, node);
    }
  },
  updateIncoming$1: function(n) {
    var i, t1, inSource, t2, t3, t4;
    i = 0;
    while (true) {
      t1 = J.get$length$asx(n.get$incoming());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = n.get$incoming();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.updateIncoming$1$bailout(1, i, t1, n);
      if (i >= t1.length)
        throw H.ioore(t1, i);
      inSource = J.get$source$x(t1[i]);
      if (J.$eq(inSource.get$flag(), false)) {
        t1 = inSource.get$workingInts();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
          return this.updateIncoming$1$bailout(2, i, t1, n, inSource);
        if (2 >= t1.length)
          throw H.ioore(t1, 2);
        t2 = t1[2];
        if (typeof t2 !== "number")
          return this.updateIncoming$1$bailout(3, i, t2, n, inSource);
        --t2;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
          return this.updateIncoming$1$bailout(4, i, t2, n, inSource, t1);
        t1[2] = t2;
        t2 = inSource.get$workingInts();
        if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
          return this.updateIncoming$1$bailout(5, i, t2, n, inSource);
        t1 = t2.length;
        if (2 >= t1)
          throw H.ioore(t2, 2);
        t3 = t2[2];
        if (typeof t3 !== "number")
          return this.updateIncoming$1$bailout(6, i, t3, n, inSource);
        t4 = t2[1];
        if (typeof t4 !== "number")
          return this.updateIncoming$1$bailout(8, i, t3, n, inSource, t4);
        t4 = t3 - t4;
        if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !H.isJsIndexable(t2, t2[init.dispatchPropertyName]))
          return this.updateIncoming$1$bailout(9, i, t2, n, 0, t4);
        if (3 >= t1)
          throw H.ioore(t2, 3);
        t2[3] = t4;
      }
      ++i;
    }
  },
  "+updateIncoming:1:0": 1,
  updateIncoming$1$bailout: function(state0, i, t1, n, inSource, t2) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = J.get$length$asx(n.get$incoming());
                if (typeof t1 !== "number")
                  throw H.iae(t1);
                if (!(i < t1))
                  break L0;
                t1 = n.get$incoming();
              case 1:
                state0 = 0;
                inSource = J.get$source$x(J.$index$asx(t1, i));
              default:
                if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && J.$eq(inSource.get$flag(), false))
                  switch (state0) {
                    case 0:
                      t1 = inSource.get$workingInts();
                    case 2:
                      state0 = 0;
                      t1 = J.$index$asx(t1, 2);
                    case 3:
                      state0 = 0;
                      t1 = J.$sub$n(t1, 1);
                      t2 = inSource.get$workingInts();
                    case 4:
                      state0 = 0;
                      J.$indexSet$ax(t2, 2, t1);
                      t1 = inSource.get$workingInts();
                    case 5:
                      state0 = 0;
                      t1 = J.$index$asx(t1, 2);
                    case 6:
                      state0 = 0;
                      t2 = inSource.get$workingInts();
                    case 7:
                      state0 = 0;
                      t2 = J.$index$asx(t2, 1);
                    case 8:
                      state0 = 0;
                      t2 = J.$sub$n(t1, t2);
                      t1 = inSource.get$workingInts();
                    case 9:
                      state0 = 0;
                      J.$indexSet$ax(t1, 3, t2);
                  }
                ++i;
            }
    }
  },
  updateOutgoing$1: function(n) {
    var i, t1, out, t2, t3, t4;
    i = 0;
    while (true) {
      t1 = J.get$length$asx(n.get$outgoing());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = n.get$outgoing();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.updateOutgoing$1$bailout(1, i, t1, n);
      if (i >= t1.length)
        throw H.ioore(t1, i);
      out = J.get$target$x(t1[i]);
      if (J.$eq(out.get$flag(), false)) {
        t1 = out.get$workingInts();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
          return this.updateOutgoing$1$bailout(2, i, t1, n, out);
        if (1 >= t1.length)
          throw H.ioore(t1, 1);
        t2 = t1[1];
        if (typeof t2 !== "number")
          return this.updateOutgoing$1$bailout(3, i, t2, n, out);
        --t2;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
          return this.updateOutgoing$1$bailout(4, i, t2, n, out, t1);
        t1[1] = t2;
        t2 = out.get$workingInts();
        if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
          return this.updateOutgoing$1$bailout(5, i, t2, n, out);
        t1 = t2.length;
        if (2 >= t1)
          throw H.ioore(t2, 2);
        t3 = t2[2];
        if (typeof t3 !== "number")
          return this.updateOutgoing$1$bailout(6, i, t3, n, out);
        t4 = t2[1];
        if (typeof t4 !== "number")
          return this.updateOutgoing$1$bailout(8, i, t3, n, out, t4);
        t4 = t3 - t4;
        if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !H.isJsIndexable(t2, t2[init.dispatchPropertyName]))
          return this.updateOutgoing$1$bailout(9, i, t2, n, 0, t4);
        if (3 >= t1)
          throw H.ioore(t2, 3);
        t2[3] = t4;
      }
      ++i;
    }
  },
  "+updateOutgoing:1:0": 1,
  updateOutgoing$1$bailout: function(state0, i, t1, n, out, t2) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = J.get$length$asx(n.get$outgoing());
                if (typeof t1 !== "number")
                  throw H.iae(t1);
                if (!(i < t1))
                  break L0;
                t1 = n.get$outgoing();
              case 1:
                state0 = 0;
                out = J.get$target$x(J.$index$asx(t1, i));
              default:
                if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && J.$eq(out.get$flag(), false))
                  switch (state0) {
                    case 0:
                      t1 = out.get$workingInts();
                    case 2:
                      state0 = 0;
                      t1 = J.$index$asx(t1, 1);
                    case 3:
                      state0 = 0;
                      t1 = J.$sub$n(t1, 1);
                      t2 = out.get$workingInts();
                    case 4:
                      state0 = 0;
                      J.$indexSet$ax(t2, 1, t1);
                      t1 = out.get$workingInts();
                    case 5:
                      state0 = 0;
                      t1 = J.$index$asx(t1, 2);
                    case 6:
                      state0 = 0;
                      t2 = out.get$workingInts();
                    case 7:
                      state0 = 0;
                      t2 = J.$index$asx(t2, 1);
                    case 8:
                      state0 = 0;
                      t2 = J.$sub$n(t1, t2);
                      t1 = out.get$workingInts();
                    case 9:
                      state0 = 0;
                      J.$indexSet$ax(t1, 3, t2);
                  }
                ++i;
            }
    }
  }
},

"+BreakCycles": [],

BreakCycles_allNodesFlagged_closure: {"": "Closure;",
  call$1: function(n) {
    return n.get$flag();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+BreakCycles_allNodesFlagged_closure": [],

CollapsedEdges: {"": "Object;collapsedWeight-,collapsedCount-,overage-,unOverage-,tightestEdge-",
  get$weightedPull: function() {
    return J.$add$ns(J.$mul$n(this.tightestEdge.get$slack(), this.collapsedWeight), this.overage);
  },
  "+weightedPull": 1,
  get$isTight: function() {
    return J.$eq(this.tightestEdge.get$slack(), 0);
  },
  "+isTight": 1,
  processEdge$1: function(candidate) {
    var t1, t2, temp, over;
    this.collapsedCount = this.collapsedCount + 1;
    if (J.$lt$n(candidate.get$slack(), this.tightestEdge.get$slack()) === true) {
      t1 = this.overage;
      t2 = J.$mul$n(this.collapsedWeight, J.$sub$n(this.tightestEdge.get$slack(), candidate.get$slack()));
      if (typeof t2 !== "number")
        throw H.iae(t2);
      this.overage = t1 + t2;
      temp = this.tightestEdge;
      this.tightestEdge = candidate;
      this.collapsedWeight = J.$add$ns(this.collapsedWeight, candidate.get$weight());
      return temp;
    } else {
      over = J.$sub$n(candidate.get$slack(), this.tightestEdge.get$slack());
      t1 = this.unOverage;
      if (typeof over !== "number")
        throw H.iae(over);
      this.unOverage = t1 + over;
      t1 = this.overage;
      t2 = J.$mul$n(candidate.get$weight(), over);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      this.overage = t1 + t2;
      this.collapsedWeight = J.$add$ns(this.collapsedWeight, candidate.get$weight());
      return candidate;
    }
  },
  "+processEdge:1:0": 1,
  $isCollapsedEdges: true
},

"+CollapsedEdges": [],

Dimension: {"": "Object;width*-,height*-",
  width$0: function($receiver) {
    return this.width.call$0();
  },
  height$0: function($receiver) {
    return this.height.call$0();
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor(o);
    if (typeof o === "object" && o !== null && !!t1.$isDimension)
      return J.$eq(o.width, this.width) && J.$eq(o.height, this.height);
    return false;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return J.$xor$n(J.$mul$n(this.width, this.height), J.$add$ns(this.width, this.height));
  },
  "+hashCode": 1,
  toString$0: function(_) {
    return "Dimension(" + H.S(this.width) + ", " + H.S(this.height) + ")";
  },
  "+toString:0:0": 1,
  transpose$0: function() {
    var temp = this.width;
    this.width = this.height;
    this.height = temp;
    return this;
  },
  "+transpose:0:0": 1,
  $isDimension: true
},

"+Dimension": [],

DirectedGraph: {"": "Object;direction-,defaultPadding-,edges-,nodes>-,ranks-,forestRoot-,margin-,rankLocations-,cellLocations-,size-",
  removeEdge$1: function(edge) {
    var t1, node, t2;
    D.Collections_remove(this.edges.list, edge);
    t1 = J.getInterceptor$x(edge);
    J.remove$1$ax(t1.get$source(edge).get$outgoing(), edge);
    J.remove$1$ax(t1.get$target(edge).get$incoming(), edge);
    t1 = edge.get$vNodes();
    if (t1 != null)
      for (t1 = J.get$iterator$ax(t1); t1.moveNext$0() === true;) {
        node = t1.get$current();
        t2 = this.nodes;
        t2.remove$1(t2, node);
        t2 = this.ranks;
        J.remove$1$ax(t2.$index(t2, node.get$rank()), node);
      }
  },
  "+removeEdge:1:0": 1,
  removeNode$1: function(node) {
    var t1 = this.nodes;
    t1.remove$1(t1, node);
    t1 = this.ranks;
    J.remove$1$ax(t1.$index(t1, node.get$rank()), node);
  },
  "+removeNode:1:0": 1
},

"+DirectedGraph": [],

DirectedGraphLayout: {"": "Object;steps-",
  init$0: function() {
    var t1, t2, t3, t4;
    t1 = this.steps;
    t1.push(new D.TransposeMetrics());
    t2 = D.Node0;
    t3 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t3, [t2]);
    t1.push(new D.BreakCycles(new D.NodeList(t3)));
    t1.push(new D.RouteEdges());
    t2 = D.Edge;
    t3 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t3, [t2]);
    t2 = D.Node0;
    t4 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t4, [t2]);
    t1.push(new D.InitialRankSolver(null, new D.EdgeList(t3), new D.NodeList(t4)));
    t2 = P.List_List(null, D.Edge);
    H.setRuntimeTypeInfo(t2, [D.Edge]);
    t3 = D.Node0;
    t4 = P.List_List(null, t3);
    H.setRuntimeTypeInfo(t4, [t3]);
    t1.push(new D.TightSpanningTreeSolver(null, t2, new D.NodeList(t4)));
    t1.push(new D.RankAssignmentSolver(null, null, false));
    t1.push(new D.PopulateRanks([]));
    t1.push(new D.VerticalPlacement());
    t2 = new D.MinCross(null, null);
    if (t2.sorter == null)
      t2.sorter = new D.RankSorter(C.C__Random, null, 0, 0, 0, 0, null, 0, null);
    t1.push(t2);
    t1.push(new D.LocalOptimizer());
    t2 = new D.HorizontalPlacement(null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, null, null);
    t2.clusterset = new D.ClusterSet(t2, 1073741823, false, P.List_List(null, null), 0, 0);
    t1.push(t2);
  },
  "+init:0:0": 1,
  visit$1: function(graph) {
    var t1, i, t2;
    t1 = graph.nodes;
    if (t1.get$isEmpty(t1))
      return;
    for (t1 = this.steps, i = 0; t2 = t1.length, i < t2; ++i)
      t1[i].visit$1(graph);
    for (i = t2 - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].revisit$1(graph);
    }
  },
  "+visit:1:0": 1
},

"+DirectedGraphLayout": [],

Edge: {"": "Object;cut@-,data>-,delta<-,end@-,flag@-,isFeedback@-,padding*-,points>-,source>-,start*-,target>-,tree@-,vNodes@-,weight<-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  },
  getIndexForRank$1: function(rank) {
    var t1, t2;
    if (J.$eq(this.source.get$rank(), rank))
      return J.get$index$x(this.source);
    if (J.$eq(this.target.get$rank(), rank))
      return J.get$index$x(this.target);
    t1 = this.vNodes;
    if (t1 != null) {
      t2 = J.$sub$n(J.$sub$n(rank, this.source.get$rank()), 1);
      t1 = t1.list;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      return J.get$index$x(t1[t2]);
    }
    return -1;
  },
  "+getIndexForRank:1:0": 1,
  get$length: function(_) {
    return J.$sub$n(this.target.get$rank(), this.source.get$rank());
  },
  "+length": 1,
  get$slack: function() {
    return J.$sub$n(J.$sub$n(this.target.get$rank(), this.source.get$rank()), this.delta);
  },
  "+slack": 1,
  get$sourceOffset: function() {
    return this.source.get$offsetOutgoing();
  },
  "+sourceOffset": 1,
  get$targetOffset: function() {
    return this.target.get$offsetIncoming();
  },
  "+targetOffset": 1,
  invert$0: function() {
    var oldTarget, t1, t2, newVNodes, j;
    J.remove$1$ax(this.source.get$outgoing(), this);
    J.remove$1$ax(this.target.get$incoming(), this);
    oldTarget = this.target;
    this.target = this.source;
    this.source = oldTarget;
    J.add$1$ax(this.target.get$incoming(), this);
    J.add$1$ax(this.source.get$outgoing(), this);
    t1 = this.points;
    if (t1 != null)
      D.Collections_reverse(t1.points);
    if (this.vNodes != null) {
      t1 = D.Node0;
      t2 = P.List_List(null, t1);
      H.setRuntimeTypeInfo(t2, [t1]);
      newVNodes = new D.NodeList(t2);
      for (j = this.vNodes.list.length - 1; j >= 0; --j) {
        t1 = this.vNodes.list;
        if (j >= t1.length)
          throw H.ioore(t1, j);
        newVNodes.add$1(newVNodes, t1[j]);
      }
      this.vNodes = newVNodes;
    }
    t1 = this.start;
    if (t1 != null) {
      this.start = this.end;
      this.end = t1;
    }
  },
  "+invert:0:0": 1,
  opposite$1: function(end) {
    if (J.$eq(this.source, end))
      return this.target;
    return this.source;
  },
  "+opposite:1:0": 1,
  setPoints$1: function(points) {
    var t1;
    this.points = points;
    t1 = points.points;
    this.start = C.JSArray_methods.get$first(t1);
    this.end = C.JSArray_methods.get$last(t1);
  },
  "+setPoints:1:0": 1,
  toString$0: function(_) {
    return "Edge(" + H.S(this.source) + ", " + H.S(this.target) + ")";
  },
  "+toString:0:0": 1,
  $isEdge: true
},

"+Edge": [],

EdgeList: {"": "ListBase0;list-",
  getSourceIndex$1: function(i) {
    var t1 = this.list;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return J.get$index$x(J.get$source$x(t1[i]));
  },
  "+getSourceIndex:1:0": 1,
  getTargetIndex$1: function(i) {
    var t1 = this.list;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return J.get$index$x(J.get$target$x(t1[i]));
  },
  "+getTargetIndex:1:0": 1,
  isCompletelyFlagged$0: function() {
    for (var t1 = this.get$iterator(this); t1.moveNext$0();)
      if (t1._liblib$_current.get$flag() !== true)
        return false;
    return true;
  },
  "+isCompletelyFlagged:0:0": 1,
  resetFlags$1: function(resetTree) {
    var t1, edge;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      edge = t1._liblib$_current;
      edge.set$flag(false);
      if (resetTree)
        edge.set$tree(false);
    }
  },
  "+resetFlags:1:0": 1,
  setFlags$1: function(value) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      t1._liblib$_current.set$flag(value);
  },
  "+setFlags:1:0": 1,
  remove$1: function(_, e) {
    return D.Collections_remove(this.list, e);
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, D.EdgeList.prototype.remove$1, _receiver, "remove$1");
  },
  $asList: function() {
    return [D.Edge];
  },
  $asIterable: function() {
    return [D.Edge];
  }
},

"+EdgeList": [],

GraphVisitor: {"": "Object;",
  visit$1: function(g) {
  },
  "+visit:1:0": 1,
  revisit$1: function(g) {
  },
  "+revisit:1:0": 1
},

"+GraphVisitor": [],

ClusterSet: {"": "Object;placement-,freedom-,isRight-,members-,pullWeight-,rawPull-",
  addCluster$1: function(seed) {
    var t1, t2;
    this.members.push(seed);
    seed.set$isSetMember(true);
    t1 = this.rawPull;
    t2 = seed.get$weightedTotal();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    this.rawPull = t1 + t2;
    t2 = this.pullWeight;
    t1 = seed.get$weightedDivisor();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this.pullWeight = t2 + t1;
    t1 = this.isRight;
    t2 = this.freedom;
    if (t1 === true) {
      this.freedom = P.min(t2, seed.get$rightNonzero());
      if (this.freedom === 0 || this.rawPull <= 0)
        return true;
      this.addIncomingClusters$1(seed);
      if (this.addOutgoingClusters$1(seed))
        return true;
    } else {
      this.freedom = P.min(t2, seed.get$leftNonzero());
      if (this.freedom === 0 || this.rawPull >= 0)
        return true;
      this.addOutgoingClusters$1(seed);
      if (this.addIncomingClusters$1(seed))
        return true;
    }
    return false;
  },
  "+addCluster:1:0": 1,
  addIncomingClusters$1: function(seed) {
    var i, t1, neighbor;
    i = 0;
    while (true) {
      t1 = seed.get$leftCount();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      c$0: {
        neighbor = J.$index$asx(seed.get$leftNeighbors(), i);
        if (neighbor.get$isSetMember() === true)
          break c$0;
        if (J.$index$asx(seed.get$leftLinks(), i).get$isTight() !== true)
          break c$0;
        if ((this.isRight !== true || J.$gt$n(neighbor.getPull$0(), 0) === true) && this.addCluster$1(neighbor))
          return true;
      }
      ++i;
    }
    return false;
  },
  "+addIncomingClusters:1:0": 1,
  addOutgoingClusters$1: function(seed) {
    var i, t1, neighbor;
    i = 0;
    while (true) {
      t1 = seed.get$rightCount();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      c$0: {
        neighbor = J.$index$asx(seed.get$rightNeighbors(), i);
        if (neighbor.get$isSetMember() === true)
          break c$0;
        if (J.$index$asx(seed.get$rightLinks(), i).get$isTight() !== true)
          break c$0;
        if ((this.isRight === true || J.$lt$n(neighbor.getPull$0(), 0) === true) && this.addCluster$1(neighbor))
          return true;
      }
      ++i;
    }
    return false;
  },
  "+addOutgoingClusters:1:0": 1,
  build$1: function(seed) {
    var delta, t1, t2, t3, i;
    this.isRight = J.$gt$n(seed.get$weightedTotal(), 0);
    if (!this.addCluster$1(seed)) {
      delta = C.JSNumber_methods.$tdiv(this.rawPull, this.pullWeight);
      t1 = this.freedom;
      delta = delta < 0 ? P.max(delta, -t1) : P.min(delta, t1);
      delta = this.isRight === true ? P.min(0, delta) : P.max(0, delta);
      if (delta !== 0) {
        for (t1 = this.members, t2 = this.placement, t3 = t2.dirtyClusters, i = 0; i < t1.length; ++i)
          t1[i].adjustRank$2(delta, t3);
        t2.refreshDirtyClusters$0();
        this.reset$0(this);
        return true;
      }
    }
    this.reset$0(this);
    return false;
  },
  "+build:1:0": 1,
  reset$0: function(_) {
    var t1, i;
    this.pullWeight = 0;
    this.rawPull = 0;
    for (t1 = this.members, i = 0; i < t1.length; ++i)
      t1[i].set$isSetMember(false);
    C.JSArray_methods.set$length(t1, 0);
    this.freedom = 1073741823;
  },
  "+reset:0:0": 1
},

"+ClusterSet": [],

HorizontalPlacement: {"": "SpanningTreeVisitor;allClusters-,clusterMap-,clusterset-,dirtyClusters-,graph-,map2-,prime-,graphRight-,graphLeft-",
  addEdge$4: function(u, v, e, weight) {
    var t1, t2, t3, t4, ne, uPrime, vPrime, uOffset, vOffset, eu, ev, dw;
    t1 = D.Edge;
    t2 = P.List_List(null, t1);
    t2.$builtinTypeInfo = [t1];
    t1 = D.Edge;
    t3 = P.List_List(null, t1);
    t3.$builtinTypeInfo = [t1];
    t1 = P.List_List(3, P.Object);
    t1.$builtinTypeInfo = [P.Object];
    t4 = P.List_List$filled(4, 0, J.JSInt);
    t4.$builtinTypeInfo = [J.JSInt];
    ne = new D.Node0(0, 0, 50, 40, null, new D.NodePair(u, v), false, new D.EdgeList(t2), new D.EdgeList(t3), 0, 0, 0, null, null, t1, t4);
    t1 = this.prime.nodes;
    t1.add$1(t1, ne);
    t1 = J.getInterceptor$x(u);
    t2 = t1.get$y(u);
    if (typeof t2 !== "number")
      return this.addEdge$4$bailout(1, ne, weight, e, v, u, t2, t1);
    t1 = t1.get$height(u);
    if (typeof t1 !== "number")
      return this.addEdge$4$bailout(2, ne, weight, e, v, u, t2, t1);
    t3 = J.get$y$x(v);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    ne.y = C.JSNumber_methods.$tdiv(t2 + t1 + t3, 2);
    t3 = this.map2;
    uPrime = t3.$index(t3, u);
    vPrime = t3.$index(t3, v);
    uOffset = e.get$sourceOffset();
    if (typeof uOffset !== "number")
      return this.addEdge$4$bailout(3, ne, weight, e, 0, 0, 0, 0, uOffset, vPrime, uPrime);
    vOffset = e.get$targetOffset();
    if (typeof vOffset !== "number")
      return this.addEdge$4$bailout(4, ne, weight, e, 0, 0, 0, 0, uOffset, vPrime, uPrime, vOffset);
    t3 = e.get$weight();
    if (typeof t3 !== "number")
      return this.addEdge$4$bailout(5, ne, weight, e, 0, 0, t3, 0, uOffset, vPrime, uPrime, vOffset);
    eu = new D.Edge(0, null, 0, null, false, false, 10, null, ne, null, uPrime, false, null, t3 * weight);
    J.add$1$ax(eu.source.get$outgoing(), eu);
    J.add$1$ax(eu.target.get$incoming(), eu);
    t3 = e.get$weight();
    if (typeof t3 !== "number")
      return this.addEdge$4$bailout(6, ne, weight, 0, 0, 0, t3, 0, uOffset, vPrime, 0, vOffset, eu);
    ev = new D.Edge(0, null, 0, null, false, false, 10, null, ne, null, vPrime, false, null, t3 * weight);
    J.add$1$ax(ev.source.get$outgoing(), ev);
    J.add$1$ax(ev.target.get$incoming(), ev);
    dw = uOffset - vOffset;
    if (dw < 0)
      eu.delta = -dw;
    else
      ev.delta = dw;
    t1 = this.prime.edges;
    t1.add$1(t1, eu);
    t1 = this.prime.edges;
    t1.add$1(t1, ev);
  },
  "+addEdge:4:0": 1,
  addEdge$4$bailout: function(state0, ne, weight, e, v, u, t2, t1, uOffset, vPrime, uPrime, vOffset, eu) {
    switch (state0) {
      case 0:
        t1 = D.Edge;
        t2 = P.List_List(null, t1);
        t2.$builtinTypeInfo = [t1];
        t1 = D.Edge;
        t3 = P.List_List(null, t1);
        t3.$builtinTypeInfo = [t1];
        t1 = P.List_List(3, P.Object);
        t1.$builtinTypeInfo = [P.Object];
        t4 = P.List_List$filled(4, 0, J.JSInt);
        t4.$builtinTypeInfo = [J.JSInt];
        ne = new D.Node0(0, 0, 50, 40, null, new D.NodePair(u, v), false, new D.EdgeList(t2), new D.EdgeList(t3), 0, 0, 0, null, null, t1, t4);
        t1 = this.prime.nodes;
        t1.add$1(t1, ne);
        t1 = J.getInterceptor$x(u);
        t2 = t1.get$y(u);
      case 1:
        state0 = 0;
        t1 = t1.get$height(u);
      case 2:
        state0 = 0;
        t1 = J.$add$ns(t2, t1);
        t2 = J.get$y$x(v);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        ne.y = J.$tdiv$n(J.$add$ns(t1, t2), 2);
        t2 = this.map2;
        uPrime = t2.$index(t2, u);
        vPrime = t2.$index(t2, v);
        uOffset = e.get$sourceOffset();
      case 3:
        state0 = 0;
        vOffset = e.get$targetOffset();
      case 4:
        state0 = 0;
        t2 = e.get$weight();
      case 5:
        state0 = 0;
        eu = new D.Edge(0, null, 0, null, false, false, 10, null, ne, null, uPrime, false, null, J.$mul$n(t2, weight));
        J.add$1$ax(eu.source.get$outgoing(), eu);
        J.add$1$ax(eu.target.get$incoming(), eu);
        t2 = e.get$weight();
      case 6:
        var t3, t4, ev, dw;
        state0 = 0;
        ev = new D.Edge(0, null, 0, null, false, false, 10, null, ne, null, vPrime, false, null, J.$mul$n(t2, weight));
        J.add$1$ax(ev.source.get$outgoing(), ev);
        J.add$1$ax(ev.target.get$incoming(), ev);
        dw = J.$sub$n(uOffset, vOffset);
        t1 = J.getInterceptor$n(dw);
        if (t1.$lt(dw, 0) === true)
          eu.delta = t1.$negate(dw);
        else
          ev.delta = dw;
        t1 = this.prime.edges;
        t1.add$1(t1, eu);
        t1 = this.prime.edges;
        t1.add$1(t1, ev);
    }
  },
  addEdges$1: function(n) {
    var i, t1, e;
    i = 0;
    while (true) {
      t1 = J.get$length$asx(n.get$incoming());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = n.get$incoming();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.addEdges$1$bailout(1, i, n, t1);
      if (i >= t1.length)
        throw H.ioore(t1, i);
      e = t1[i];
      this.addEdge$4(J.get$source$x(e), n, e, 1);
      ++i;
    }
  },
  "+addEdges:1:0": 1,
  addEdges$1$bailout: function(state0, i, n, t1) {
    switch (state0) {
      case 0:
        i = 0;
      case 1:
        var e;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = J.get$length$asx(n.get$incoming());
                if (typeof t1 !== "number")
                  throw H.iae(t1);
                if (!(i < t1))
                  break L0;
                t1 = n.get$incoming();
              case 1:
                state0 = 0;
                e = J.$index$asx(t1, i);
                this.addEdge$4(J.get$source$x(e), n, e, 1);
                ++i;
            }
    }
  },
  applyGPrime$0: function() {
    var n, t1, node, t2, t3;
    for (n = 0; t1 = this.prime.nodes.list, n < t1.length; ++n) {
      node = t1[n];
      t1 = J.getInterceptor$x(node);
      t2 = t1.get$data(node);
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isNode0)
        H.propertyTypeCast(t1.get$data(node), "$isNode0").x = node.get$rank();
    }
  },
  "+applyGPrime:0:0": 1,
  balanceClusters$0: function() {
    var t1, somethingMoved, i, t2, c, delta;
    this.findAllClusters$0();
    $.HorizontalPlacement_step = 0;
    for (t1 = this.dirtyClusters, somethingMoved = false, i = 0; t2 = this.allClusters, i < t2.length;) {
      c = t2[i];
      delta = c.getPull$0();
      t2 = J.getInterceptor$n(delta);
      if (t2.$lt(delta, 0) === true) {
        if (J.$gt$n(c.get$leftFreedom(), 0) === true) {
          c.adjustRank$2(P.max(delta, J.$negate$n(c.get$leftFreedom())), t1);
          this.refreshDirtyClusters$0();
          this.moveClusterForward$2(i, c);
          $.HorizontalPlacement_step = $.HorizontalPlacement_step + 1;
          somethingMoved = true;
        } else if (this.clusterset.build$1(c)) {
          $.HorizontalPlacement_step = $.HorizontalPlacement_step + 1;
          this.moveClusterForward$2(i, c);
          somethingMoved = true;
        }
      } else if (t2.$gt(delta, 0) === true)
        if (J.$gt$n(c.get$rightFreedom(), 0) === true) {
          c.adjustRank$2(P.min(delta, c.get$rightFreedom()), t1);
          this.refreshDirtyClusters$0();
          this.moveClusterForward$2(i, c);
          $.HorizontalPlacement_step = $.HorizontalPlacement_step + 1;
          somethingMoved = true;
        } else if (this.clusterset.build$1(c)) {
          $.HorizontalPlacement_step = $.HorizontalPlacement_step + 1;
          this.moveClusterForward$2(i, c);
          somethingMoved = true;
        }
      ++i;
      if (i === this.allClusters.length && somethingMoved) {
        somethingMoved = false;
        i = 0;
      }
    }
  },
  "+balanceClusters:0:0": 1,
  buildGPrime$0: function() {
    var ranks, t1, n, r, rank, t2, i, t3;
    ranks = this.graph.ranks;
    this.buildRankSeparators$1(ranks);
    for (t1 = ranks.list, n = null, r = 1; r < t1.length; ++r) {
      rank = ranks.$index(ranks, r);
      t2 = J.getInterceptor$asx(rank);
      i = 0;
      while (true) {
        t3 = rank.count$0();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (!(i < t3))
          break;
        n = t2.$index(rank, i);
        this.addEdges$1(n);
        ++i;
      }
    }
  },
  "+buildGPrime:0:0": 1,
  buildRankSeparators$1: function(ranks) {
    var t1, t2, n, nPrime, e, r, rank, t3, prevNPrime, i, t4, t5, t6, t7;
    for (t1 = ranks.list, t2 = this.map2, n = null, nPrime = null, e = null, r = 0; r < t1.length; ++r) {
      rank = ranks.$index(ranks, r);
      t3 = J.getInterceptor$asx(rank);
      prevNPrime = null;
      i = 0;
      while (true) {
        t4 = rank.count$0();
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (!(i < t4))
          break;
        n = t3.$index(rank, i);
        t4 = D.Edge;
        t5 = P.List_List(null, t4);
        t5.$builtinTypeInfo = [t4];
        t4 = D.Edge;
        t6 = P.List_List(null, t4);
        t6.$builtinTypeInfo = [t4];
        t4 = P.List_List(3, P.Object);
        t4.$builtinTypeInfo = [P.Object];
        t7 = P.List_List$filled(4, 0, J.JSInt);
        t7.$builtinTypeInfo = [J.JSInt];
        nPrime = new D.Node0(0, 0, 50, 40, null, n, false, new D.EdgeList(t5), new D.EdgeList(t6), 0, 0, 0, null, null, t4, t7);
        if (i === 0) {
          e = new D.Edge(0, null, 0, null, false, false, 10, null, this.graphLeft, null, nPrime, false, null, 0);
          J.add$1$ax(e.source.get$outgoing(), e);
          J.add$1$ax(e.target.get$incoming(), e);
          t4 = this.prime.edges;
          t4.add$1(t4, e);
          t4 = this.graph;
          t4.getPadding$1;
          t5 = J.getInterceptor$x(n);
          e.delta = J.$add$ns(J.get$left$x(t5.get$padding(n) == null ? t4.defaultPadding : t5.get$padding(n)), this.graph.margin.left);
        } else {
          e = new D.Edge(0, null, 1, null, false, false, 10, null, prevNPrime, null, nPrime, false, null, 1);
          J.add$1$ax(e.source.get$outgoing(), e);
          J.add$1$ax(e.target.get$incoming(), e);
          e.weight = 0;
          t4 = this.prime.edges;
          t4.add$1(t4, e);
          this.rowSeparation$1(e);
        }
        t4 = this.prime.nodes;
        t4.add$1(t4, nPrime);
        t2.$indexSet(t2, n, nPrime);
        if (i === J.$sub$n(rank.count$0(), 1)) {
          e = new D.Edge(0, null, 0, null, false, false, 10, null, nPrime, null, this.graphRight, false, null, 0);
          J.add$1$ax(e.source.get$outgoing(), e);
          J.add$1$ax(e.target.get$incoming(), e);
          t4 = J.getInterceptor$x(n);
          t5 = t4.get$width(n);
          t6 = this.graph;
          t6.getPadding$1;
          e.delta = J.$add$ns(J.$add$ns(t5, J.get$right$x(t4.get$padding(n) == null ? t6.defaultPadding : t4.get$padding(n))), this.graph.margin.right);
          t4 = this.prime.edges;
          t4.add$1(t4, e);
        }
        ++i;
        prevNPrime = nPrime;
      }
    }
  },
  "+buildRankSeparators:1:0": 1,
  calculateCellLocations$0: function() {
    var t1, t2, row, rank, locations, cell, node, t3, t4, t5;
    t1 = this.graph;
    t2 = P.List_List(t1.ranks.list.length + 1, [J.JSArray, J.JSInt]);
    H.setRuntimeTypeInfo(t2, [[J.JSArray, J.JSInt]]);
    t1.cellLocations = t2;
    for (row = 0; t1 = this.graph.ranks, row < t1.list.length; ++row) {
      rank = t1.$index(t1, row);
      t1 = this.graph.cellLocations;
      t2 = J.getInterceptor$asx(rank);
      locations = P.List_List$filled(J.$add$ns(t2.get$length(rank), 1), 0, J.JSInt);
      locations.$builtinTypeInfo = [J.JSInt];
      if (row >= t1.length)
        throw H.ioore(t1, row);
      t1[row] = locations;
      t1 = locations.length;
      cell = 0;
      node = null;
      while (true) {
        t3 = t2.get$length(rank);
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (!(cell < t3))
          break;
        node = t2.$index(rank, cell);
        t3 = J.getInterceptor$x(node);
        t4 = t3.get$x(node);
        t5 = this.graph;
        t5.getPadding$1;
        t3 = J.$sub$n(t4, J.get$left$x(t3.get$padding(node) == null ? t5.defaultPadding : t3.get$padding(node)));
        if (cell >= t1)
          throw H.ioore(locations, cell);
        locations[cell] = t3;
        ++cell;
      }
      t2 = J.getInterceptor$x(node);
      t3 = J.$add$ns(t2.get$x(node), t2.get$width(node));
      t4 = this.graph;
      t4.getPadding$1;
      t2 = J.$add$ns(t3, J.get$right$x(t2.get$padding(node) == null ? t4.defaultPadding : t2.get$padding(node)));
      if (cell >= t1)
        throw H.ioore(locations, cell);
      locations[cell] = t2;
    }
  },
  "+calculateCellLocations:0:0": 1,
  findAllClusters$0: function() {
    var t1, root, t2, t3, t4, t5, t6, t7, cluster, i, e, sourceCluster, targetCluster, link;
    t1 = this.prime.nodes.list;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    root = t1[0];
    t1 = H.Primitives_objectHashCode(new P.Object());
    t2 = P.List_List(null, D.CollapsedEdges);
    H.setRuntimeTypeInfo(t2, [D.CollapsedEdges]);
    t3 = P.List_List(null, D.CollapsedEdges);
    H.setRuntimeTypeInfo(t3, [D.CollapsedEdges]);
    t4 = P.List_List(null, D.NodeCluster);
    H.setRuntimeTypeInfo(t4, [D.NodeCluster]);
    t5 = P.List_List(null, D.NodeCluster);
    H.setRuntimeTypeInfo(t5, [D.NodeCluster]);
    t6 = D.Node0;
    t7 = P.List_List(null, t6);
    H.setRuntimeTypeInfo(t7, [t6]);
    cluster = new D.NodeCluster(t1, false, false, false, false, 0, 0, 0, 0, t2, t3, t4, t5, 0, 0, 0, 0, 0, t7);
    this.allClusters = P.List_List(null, null);
    this.allClusters.push(cluster);
    this.growCluster$2(root, cluster);
    for (t1 = this.clusterMap, i = 0; t2 = this.prime.edges.list, t3 = t2.length, i < t3; ++i) {
      if (i < 0)
        throw H.ioore(t2, i);
      e = t2[i];
      t2 = J.getInterceptor$x(e);
      sourceCluster = t1.$index(t1, t2.get$source(e));
      targetCluster = t1.$index(t1, t2.get$target(e));
      if (J.$eq(targetCluster, sourceCluster))
        continue;
      link = sourceCluster.getRightNeighbor$1(targetCluster);
      if (link == null) {
        link = new D.CollapsedEdges(e.get$weight(), 1, 0, 0, e);
        sourceCluster.addRightNeighbor$2(targetCluster, link);
        targetCluster.addLeftNeighbor$2(sourceCluster, link);
      } else {
        this.prime.removeEdge$1(link.processEdge$1(e));
        --i;
      }
    }
    for (i = 0; t1 = this.allClusters, i < t1.length; ++i)
      t1[i].initValues$0();
  },
  "+findAllClusters:0:0": 1,
  growCluster$2: function(root, cluster) {
    var t1, treeChildren, i, t2, e, t3, t4, t5, t6, t7, t8, newCluster;
    cluster.add$1(cluster, root);
    t1 = this.clusterMap;
    t1.$indexSet(t1, root, cluster);
    t1 = root.get$workingData();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.growCluster$2$bailout(1, cluster, t1);
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    treeChildren = t1[0];
    t1 = J.getInterceptor$asx(treeChildren);
    i = 0;
    while (true) {
      t2 = t1.get$length(treeChildren);
      if (t2 !== (t2 | 0))
        return this.growCluster$2$bailout(2, cluster, t1, i, treeChildren, t2);
      if (!(i < t2))
        break;
      e = t1.$index(treeChildren, i);
      t2 = e.get$cut();
      if (typeof t2 !== "number")
        return this.growCluster$2$bailout(3, cluster, t1, i, treeChildren, t2, e);
      if (t2 !== 0)
        this.growCluster$2(this.getTreeTail$1(e), cluster);
      else {
        t2 = H.Primitives_objectHashCode(new P.Object());
        t3 = P.List_List(null, D.CollapsedEdges);
        t3.$builtinTypeInfo = [D.CollapsedEdges];
        t4 = P.List_List(null, D.CollapsedEdges);
        t4.$builtinTypeInfo = [D.CollapsedEdges];
        t5 = P.List_List(null, D.NodeCluster);
        t5.$builtinTypeInfo = [D.NodeCluster];
        t6 = P.List_List(null, D.NodeCluster);
        t6.$builtinTypeInfo = [D.NodeCluster];
        t7 = D.Node0;
        t8 = P.List_List(null, t7);
        t8.$builtinTypeInfo = [t7];
        newCluster = new D.NodeCluster(t2, false, false, false, false, 0, 0, 0, 0, t3, t4, t5, t6, 0, 0, 0, 0, 0, t8);
        this.allClusters.push(newCluster);
        this.growCluster$2(this.getTreeTail$1(e), newCluster);
      }
      ++i;
    }
  },
  "+growCluster:2:0": 1,
  growCluster$2$bailout: function(state0, cluster, t1, i, treeChildren, t2, e) {
    switch (state0) {
      case 0:
        cluster.add$1(cluster, root);
        t1 = this.clusterMap;
        t1.$indexSet(t1, root, cluster);
        t1 = root.get$workingData();
      case 1:
        state0 = 0;
        treeChildren = J.$index$asx(t1, 0);
        t1 = J.getInterceptor$asx(treeChildren);
        i = 0;
      default:
        var t3, t4, t5, t6, t7, t8, newCluster;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(treeChildren);
              case 2:
                state0 = 0;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                if (!(i < t2))
                  break L0;
                e = t1.$index(treeChildren, i);
                t2 = e.get$cut();
              case 3:
                state0 = 0;
                if (!J.$eq(t2, 0))
                  this.growCluster$2(this.getTreeTail$1(e), cluster);
                else {
                  t2 = H.Primitives_objectHashCode(new P.Object());
                  t3 = P.List_List(null, D.CollapsedEdges);
                  t3.$builtinTypeInfo = [D.CollapsedEdges];
                  t4 = P.List_List(null, D.CollapsedEdges);
                  t4.$builtinTypeInfo = [D.CollapsedEdges];
                  t5 = P.List_List(null, D.NodeCluster);
                  t5.$builtinTypeInfo = [D.NodeCluster];
                  t6 = P.List_List(null, D.NodeCluster);
                  t6.$builtinTypeInfo = [D.NodeCluster];
                  t7 = D.Node0;
                  t8 = P.List_List(null, t7);
                  t8.$builtinTypeInfo = [t7];
                  newCluster = new D.NodeCluster(t2, false, false, false, false, 0, 0, 0, 0, t3, t4, t5, t6, 0, 0, 0, 0, 0, t8);
                  this.allClusters.push(newCluster);
                  this.growCluster$2(this.getTreeTail$1(e), newCluster);
                }
                ++i;
            }
    }
  },
  moveClusterForward$2: function(i, c) {
    var swapIndex, t1, t2, temp;
    if (i === 0)
      return;
    swapIndex = C.JSInt_methods.$tdiv(i, 2);
    t1 = this.allClusters;
    t2 = t1.length;
    if (swapIndex < 0 || swapIndex >= t2)
      throw H.ioore(t1, swapIndex);
    temp = t1[swapIndex];
    t1[swapIndex] = c;
    if (i < 0 || i >= t2)
      throw H.ioore(t1, i);
    t1[i] = temp;
  },
  "+moveClusterForward:2:0": 1,
  refreshDirtyClusters$0: function() {
    var t1, t2;
    for (t1 = this.dirtyClusters, t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t2._set._first; t2.moveNext$0();)
      t2._liblib1$_current.refreshValues$0();
    t1.clear$0(t1);
  },
  "+refreshDirtyClusters:0:0": 1,
  rowSeparation$1: function(e) {
    var source, target, t1, t2, t3, t4;
    source = J.get$data$x(e.source);
    target = J.get$data$x(e.target);
    t1 = J.getInterceptor$x(source);
    t2 = t1.get$width(source);
    if (typeof t2 !== "number")
      return this.rowSeparation$1$bailout(1, e, target, t2, t1, source);
    t3 = this.graph;
    t3.getPadding$1;
    t1 = J.get$right$x(t1.get$padding(source) == null ? t3.defaultPadding : t1.get$padding(source));
    if (typeof t1 !== "number")
      return this.rowSeparation$1$bailout(2, e, target, t2, t1);
    t3 = this.graph;
    t3.getPadding$1;
    t4 = J.getInterceptor$x(target);
    t3 = J.get$left$x(t4.get$padding(target) == null ? t3.defaultPadding : t4.get$padding(target));
    if (typeof t3 !== "number")
      throw H.iae(t3);
    e.delta = t2 + t1 + t3;
  },
  "+rowSeparation:1:0": 1,
  rowSeparation$1$bailout: function(state0, e, target, t2, t1, source) {
    switch (state0) {
      case 0:
        source = J.get$data$x(e.source);
        target = J.get$data$x(e.target);
        t1 = J.getInterceptor$x(source);
        t2 = t1.get$width(source);
      case 1:
        state0 = 0;
        t3 = this.graph;
        t3.getPadding$1;
        t1 = J.get$right$x(t1.get$padding(source) == null ? t3.defaultPadding : t1.get$padding(source));
      case 2:
        var t3;
        state0 = 0;
        t1 = J.$add$ns(t2, t1);
        t2 = this.graph;
        t2.getPadding$1;
        t3 = J.getInterceptor$x(target);
        t2 = J.get$left$x(t3.get$padding(target) == null ? t2.defaultPadding : t3.get$padding(target));
        if (typeof t2 !== "number")
          throw H.iae(t2);
        e.delta = J.$add$ns(t1, t2);
    }
  },
  visit$1: function(g) {
    var t1, t2, t3, t4, t5;
    this.graph = g;
    t1 = new D.Insets(0, 0, 0, 0);
    t1.Insets$4(16, 16, 16, 16);
    t2 = D.Edge;
    t3 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t3, [t2]);
    t2 = D.Node0;
    t4 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t4, [t2]);
    t2 = D.Rank;
    t5 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t5, [t2]);
    t2 = new D.Insets(0, 0, 0, 0);
    t2.Insets$4(0, 0, 0, 0);
    this.prime = new D.DirectedGraph(4, t1, new D.EdgeList(t3), new D.NodeList(t4), new D.RankList(t5), null, t2, null, null, new D.Dimension(0, 0));
    t2 = this.prime.nodes;
    t5 = D.Edge;
    t4 = P.List_List(null, t5);
    H.setRuntimeTypeInfo(t4, [t5]);
    t5 = D.Edge;
    t3 = P.List_List(null, t5);
    H.setRuntimeTypeInfo(t3, [t5]);
    t5 = P.List_List(3, P.Object);
    H.setRuntimeTypeInfo(t5, [P.Object]);
    t1 = P.List_List$filled(4, 0, J.JSInt);
    H.setRuntimeTypeInfo(t1, [J.JSInt]);
    t1 = new D.Node0(0, 0, 50, 40, null, null, false, new D.EdgeList(t4), new D.EdgeList(t3), 0, 0, 0, null, null, t5, t1);
    this.graphLeft = t1;
    t2.add$1(t2, t1);
    t1 = this.prime.nodes;
    t2 = D.Edge;
    t5 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t5, [t2]);
    t2 = D.Edge;
    t3 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t3, [t2]);
    t2 = P.List_List(3, P.Object);
    H.setRuntimeTypeInfo(t2, [P.Object]);
    t4 = P.List_List$filled(4, 0, J.JSInt);
    H.setRuntimeTypeInfo(t4, [J.JSInt]);
    t4 = new D.Node0(0, 0, 50, 40, null, null, false, new D.EdgeList(t5), new D.EdgeList(t3), 0, 0, 0, null, null, t2, t4);
    this.graphRight = t4;
    t1.add$1(t1, t4);
    this.buildGPrime$0();
    t4 = D.Edge;
    t1 = P.List_List(null, t4);
    H.setRuntimeTypeInfo(t1, [t4]);
    t4 = D.Node0;
    t2 = P.List_List(null, t4);
    H.setRuntimeTypeInfo(t2, [t4]);
    new D.InitialRankSolver(null, new D.EdgeList(t1), new D.NodeList(t2)).visit$1(this.prime);
    t1 = P.List_List(null, D.Edge);
    H.setRuntimeTypeInfo(t1, [D.Edge]);
    t2 = D.Node0;
    t3 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t3, [t2]);
    t1 = new D.TightSpanningTreeSolver(null, t1, new D.NodeList(t3));
    t1.graph = this.prime;
    t1.init$0();
    t1.solve$0();
    new D.RankAssignmentSolver(null, null, false).visit$1(this.prime);
    this.balanceClusters$0();
    this.prime.nodes.adjustRankSimple$1(J.$negate$n(this.graphLeft.rank));
    this.applyGPrime$0();
    this.calculateCellLocations$0();
    this.graph.size.width = this.graphRight.rank;
  },
  "+visit:1:0": 1,
  static: {
"": "HorizontalPlacement_step-",
}

},

"+HorizontalPlacement": [],

InitialRankSolver: {"": "GraphVisitor;graph-,candidates-,members-",
  visit$1: function(graph) {
    this.graph = graph;
    graph.edges.resetFlags$1(false);
    graph.nodes.resetFlags$0();
    this.solve$0();
  },
  "+visit:1:0": 1,
  solve$0: function() {
    var t1, t2, t3, unranked, rankMe, node, i;
    t1 = this.graph.nodes.list;
    if (t1.length === 0)
      return;
    t2 = D.Node0;
    t3 = P.List_List(null, t2);
    H.setRuntimeTypeInfo(t3, [t2]);
    unranked = new D.NodeList(t3);
    C.JSArray_methods.addAll$1(unranked.list, t1);
    t1 = D.Node0;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    rankMe = new D.NodeList(t2);
    for (t1 = rankMe.list, t2 = unranked.list, node = null; !unranked.get$isEmpty(unranked);) {
      rankMe.clear$0(rankMe);
      for (i = 0; i < t2.length;) {
        node = t2[i];
        if (node.get$incoming().isCompletelyFlagged$0() === true) {
          rankMe.add$1(rankMe, node);
          unranked.removeAt$1(unranked, i);
        } else
          ++i;
      }
      if (t1.length === 0)
        throw H.wrapException("Cycle detected in graph");
      for (i = 0; i < t1.length; ++i) {
        node = t1[i];
        this.assignMinimumRank$1(node);
        node.get$outgoing().setFlags$1(true);
      }
    }
    this.connectForest$0();
  },
  "+solve:0:0": 1,
  connectForest$0: function() {
    var forest, stack, tree, i, t1, t2, n, neighbor, s, t3, t4, t5;
    forest = P.List_List(null, null);
    stack = P.List_List(null, null);
    this.graph.nodes.resetFlags$0();
    for (tree = null, i = 0; t1 = this.graph, t2 = t1.nodes.list, i < t2.length; ++i) {
      n = t2[i];
      if (n.get$flag() === true)
        continue;
      t1 = D.Node0;
      t2 = P.List_List(null, t1);
      t2.$builtinTypeInfo = [t1];
      tree = new D.NodeList(t2);
      stack.push(n);
      for (neighbor = null; t1 = stack.length, t1 !== 0;) {
        if (0 >= t1)
          throw H.ioore(stack, 0);
        n = stack.pop();
        n.set$flag(true);
        tree.add$1(tree, n);
        s = 0;
        while (true) {
          t1 = J.get$length$asx(n.get$incoming());
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (!(s < t1))
            break;
          neighbor = J.get$source$x(J.$index$asx(n.get$incoming(), s));
          if (neighbor.get$flag() !== true)
            stack.push(neighbor);
          ++s;
        }
        s = 0;
        while (true) {
          t1 = J.get$length$asx(n.get$outgoing());
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (!(s < t1))
            break;
          neighbor = J.get$target$x(J.$index$asx(n.get$outgoing(), s));
          if (neighbor.get$flag() !== true)
            stack.push(neighbor);
          ++s;
        }
      }
      forest.push(tree);
    }
    if (forest.length > 1) {
      t2 = D.Edge;
      t3 = P.List_List(null, t2);
      H.setRuntimeTypeInfo(t3, [t2]);
      t2 = D.Edge;
      t4 = P.List_List(null, t2);
      H.setRuntimeTypeInfo(t4, [t2]);
      t2 = P.List_List(3, P.Object);
      H.setRuntimeTypeInfo(t2, [P.Object]);
      t5 = P.List_List$filled(4, 0, J.JSInt);
      H.setRuntimeTypeInfo(t5, [J.JSInt]);
      t1.forestRoot = new D.Node0(0, 0, 50, 40, null, "the forest root", false, new D.EdgeList(t3), new D.EdgeList(t4), 0, 0, 0, null, null, t2, t5);
      t5 = this.graph;
      t2 = t5.nodes;
      t2.add$1(t2, t5.forestRoot);
      for (t1 = new H.ListIterator(forest, forest.length, 0, null); t1.moveNext$0();) {
        tree = t1._liblib$_current;
        t2 = this.graph;
        t3 = t2.edges;
        t2 = new D.Edge(0, null, 0, null, false, false, 10, null, t2.forestRoot, null, J.$index$asx(tree, 0), false, null, 0);
        J.add$1$ax(t2.source.get$outgoing(), t2);
        J.add$1$ax(t2.target.get$incoming(), t2);
        t3.add$1(t3, t2);
      }
    }
  },
  "+connectForest:0:0": 1,
  assignMinimumRank$1: function(node) {
    var rank, i1, t1, e, t2;
    rank = 0;
    i1 = 0;
    while (true) {
      t1 = J.get$length$asx(node.get$incoming());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i1 < t1))
        break;
      t1 = node.get$incoming();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.assignMinimumRank$1$bailout(1, i1, rank, t1, node);
      if (i1 >= t1.length)
        throw H.ioore(t1, i1);
      e = t1[i1];
      t1 = e.get$delta();
      if (typeof t1 !== "number")
        return this.assignMinimumRank$1$bailout(2, i1, rank, t1, node, e);
      t2 = J.get$source$x(e).get$rank();
      if (typeof t2 !== "number")
        return this.assignMinimumRank$1$bailout(3, i1, rank, t1, node, 0, t2);
      rank = P.max(rank, t1 + t2);
      ++i1;
    }
    node.set$rank(rank);
  },
  "+assignMinimumRank:1:0": 1,
  assignMinimumRank$1$bailout: function(state0, i1, rank, t1, node, e, t2) {
    switch (state0) {
      case 0:
        rank = 0;
        i1 = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = J.get$length$asx(node.get$incoming());
                if (typeof t1 !== "number")
                  throw H.iae(t1);
                if (!(i1 < t1))
                  break L0;
                t1 = node.get$incoming();
              case 1:
                state0 = 0;
                e = J.$index$asx(t1, i1);
                t1 = e.get$delta();
              case 2:
                state0 = 0;
                t2 = J.get$source$x(e).get$rank();
              case 3:
                state0 = 0;
                rank = P.max(rank, J.$add$ns(t1, t2));
                ++i1;
            }
        node.set$rank(rank);
    }
  }
},

"+InitialRankSolver": [],

Insets: {"": "Object;left*-,top*-,bottom>-,right*-",
  bottom$0: function($receiver) {
    return this.bottom.call$0();
  },
  right$0: function($receiver) {
    return this.right.call$0();
  },
  add$1: function(_, insets) {
    var t1 = J.getInterceptor$x(insets);
    this.top = J.$add$ns(this.top, t1.get$top(insets));
    this.bottom = J.$add$ns(this.bottom, t1.get$bottom(insets));
    this.left = J.$add$ns(this.left, t1.get$left(insets));
    this.right = J.$add$ns(this.right, t1.get$right(insets));
    return this;
  },
  "+add:1:0": 1,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor(o);
    if (typeof o === "object" && o !== null && !!t1.$isInsets)
      return J.$eq(o.top, this.top) && J.$eq(o.bottom, this.bottom) && J.$eq(o.left, this.left) && J.$eq(o.right, this.right);
    return false;
  },
  "+==:1:0": 1,
  getTransposed$0: function() {
    var t1 = new D.Insets(0, 0, 0, 0);
    t1.Insets$4(this.top, this.left, this.bottom, this.right);
    return t1.transpose$0();
  },
  "+getTransposed:0:0": 1,
  get$hashCode: function(_) {
    return J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$n(this.top, 7), J.$mul$n(this.left, 2)), J.$mul$n(this.bottom, 31)), J.$mul$n(this.right, 37));
  },
  "+hashCode": 1,
  isEmpty$0: function(_) {
    return J.$eq(this.left, 0) && J.$eq(this.right, 0) && J.$eq(this.top, 0) && J.$eq(this.bottom, 0);
  },
  "+isEmpty:0:0": 1,
  get$isEmpty: function(_receiver) {
    return new D.Bound_isEmpty_Insets(this, D.Insets.prototype.isEmpty$0, _receiver, "isEmpty$0");
  },
  toString$0: function(_) {
    return "Insets(t=" + H.S(this.top) + ", l=" + H.S(this.left) + ", b=" + H.S(this.bottom) + ", r=" + H.S(this.right) + ")";
  },
  "+toString:0:0": 1,
  transpose$0: function() {
    var temp = this.top;
    this.top = this.left;
    this.left = temp;
    temp = this.right;
    this.right = this.bottom;
    this.bottom = temp;
    return this;
  },
  "+transpose:0:0": 1,
  Insets$4: function($top, left, bottom, right) {
    this.top = $top;
    this.left = left;
    this.bottom = bottom;
    this.right = right;
  },
  $isInsets: true,
  static: {
Insets$: function($top, left, bottom, right) {
  var t1 = new D.Insets(0, 0, 0, 0);
  t1.Insets$4($top, left, bottom, right);
  return t1;
},

"+new Insets:4:0": 1}

},

"+Insets": [],

LocalOptimizer: {"": "GraphVisitor;",
  shouldSwap$2: function(current, next) {
    var currentEdges, nextEdges, t1, rank, t2, crossCount, invertedCrossCount, iNext, i, t3, currentEdge, iCurrent, j, t4, offsetDiff;
    currentEdges = current.get$incoming();
    nextEdges = next.get$incoming();
    t1 = current.get$rank();
    if (typeof t1 !== "number")
      return this.shouldSwap$2$bailout(1, nextEdges, currentEdges, current, next, t1);
    rank = t1 - 1;
    t1 = J.getInterceptor$asx(currentEdges);
    t2 = J.getInterceptor$asx(nextEdges);
    crossCount = 0;
    invertedCrossCount = 0;
    iNext = null;
    i = 0;
    while (true) {
      t3 = t1.get$length(currentEdges);
      if (t3 !== (t3 | 0))
        return this.shouldSwap$2$bailout(2, nextEdges, currentEdges, current, next, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3);
      if (!(i < t3))
        break;
      currentEdge = t1.$index(currentEdges, i);
      iCurrent = currentEdge.getIndexForRank$1(rank);
      if (typeof iCurrent !== "number")
        return this.shouldSwap$2$bailout(3, nextEdges, currentEdges, current, next, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, 0, currentEdge, iCurrent);
      j = 0;
      while (true) {
        t3 = t2.get$length(nextEdges);
        if (t3 !== (t3 | 0))
          return this.shouldSwap$2$bailout(4, nextEdges, currentEdges, current, next, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j);
        if (!(j < t3))
          break;
        iNext = t2.$index(nextEdges, j).getIndexForRank$1(rank);
        t3 = J.getInterceptor$n(iNext);
        if (t3.$lt(iNext, iCurrent) === true)
          ++crossCount;
        else if (t3.$gt(iNext, iCurrent) === true)
          ++invertedCrossCount;
        else {
          t3 = t2.$index(nextEdges, j).get$sourceOffset();
          if (typeof t3 !== "number")
            return this.shouldSwap$2$bailout(5, nextEdges, currentEdges, current, next, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j);
          t4 = currentEdge.get$sourceOffset();
          if (typeof t4 !== "number")
            return this.shouldSwap$2$bailout(6, nextEdges, currentEdges, current, next, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j, t4);
          offsetDiff = t3 - t4;
          if (offsetDiff < 0)
            ++crossCount;
          else if (offsetDiff > 0)
            ++invertedCrossCount;
        }
        ++j;
      }
      ++i;
    }
    currentEdges = current.get$outgoing();
    nextEdges = next.get$outgoing();
    t1 = current.get$rank();
    if (typeof t1 !== "number")
      return this.shouldSwap$2$bailout(7, nextEdges, currentEdges, 0, 0, t1, 0, 0, 0, crossCount, invertedCrossCount, iNext);
    rank = t1 + 1;
    t1 = J.getInterceptor$asx(currentEdges);
    t2 = J.getInterceptor$asx(nextEdges);
    i = 0;
    while (true) {
      t3 = t1.get$length(currentEdges);
      if (t3 !== (t3 | 0))
        return this.shouldSwap$2$bailout(8, nextEdges, currentEdges, 0, 0, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3);
      if (!(i < t3))
        break;
      currentEdge = t1.$index(currentEdges, i);
      iCurrent = currentEdge.getIndexForRank$1(rank);
      if (typeof iCurrent !== "number")
        return this.shouldSwap$2$bailout(9, nextEdges, currentEdges, 0, 0, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, 0, currentEdge, iCurrent);
      j = 0;
      while (true) {
        t3 = t2.get$length(nextEdges);
        if (t3 !== (t3 | 0))
          return this.shouldSwap$2$bailout(10, nextEdges, currentEdges, 0, 0, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j);
        if (!(j < t3))
          break;
        iNext = t2.$index(nextEdges, j).getIndexForRank$1(rank);
        t3 = J.getInterceptor$n(iNext);
        if (t3.$lt(iNext, iCurrent) === true)
          ++crossCount;
        else if (t3.$gt(iNext, iCurrent) === true)
          ++invertedCrossCount;
        else {
          t3 = t2.$index(nextEdges, j).get$targetOffset();
          if (typeof t3 !== "number")
            return this.shouldSwap$2$bailout(11, nextEdges, currentEdges, 0, 0, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j);
          t4 = currentEdge.get$targetOffset();
          if (typeof t4 !== "number")
            return this.shouldSwap$2$bailout(12, nextEdges, currentEdges, 0, 0, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j, t4);
          offsetDiff = t3 - t4;
          if (offsetDiff < 0)
            ++crossCount;
          else if (offsetDiff > 0)
            ++invertedCrossCount;
        }
        ++j;
      }
      ++i;
    }
    if (invertedCrossCount < crossCount)
      return true;
    return false;
  },
  "+shouldSwap:2:0": 1,
  shouldSwap$2$bailout: function(state0, nextEdges, currentEdges, current, next, t1, t2, rank, i, crossCount, invertedCrossCount, iNext, t3, currentEdge, iCurrent, j, t4) {
    switch (state0) {
      case 0:
        currentEdges = current.get$incoming();
        nextEdges = next.get$incoming();
        t1 = current.get$rank();
      case 1:
        state0 = 0;
        rank = J.$sub$n(t1, 1);
        t1 = J.getInterceptor$asx(currentEdges);
        t2 = J.getInterceptor$asx(nextEdges);
        crossCount = 0;
        invertedCrossCount = 0;
        iNext = null;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = t1.get$length(currentEdges);
              case 2:
                state0 = 0;
                if (typeof t3 !== "number")
                  throw H.iae(t3);
                if (!(i < t3))
                  break L0;
                currentEdge = t1.$index(currentEdges, i);
                iCurrent = currentEdge.getIndexForRank$1(rank);
              case 3:
                state0 = 0;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t3 = t2.get$length(nextEdges);
                      case 4:
                        state0 = 0;
                        if (typeof t3 !== "number")
                          throw H.iae(t3);
                        if (!(j < t3))
                          break L1;
                        iNext = t2.$index(nextEdges, j).getIndexForRank$1(rank);
                        t3 = J.getInterceptor$n(iNext);
                      default:
                        if (state0 === 0 && t3.$lt(iNext, iCurrent) === true)
                          ++crossCount;
                        else
                          switch (state0) {
                            case 0:
                            default:
                              if (state0 === 0 && t3.$gt(iNext, iCurrent) === true)
                                ++invertedCrossCount;
                              else
                                switch (state0) {
                                  case 0:
                                    t3 = t2.$index(nextEdges, j).get$sourceOffset();
                                  case 5:
                                    state0 = 0;
                                    t4 = currentEdge.get$sourceOffset();
                                  case 6:
                                    state0 = 0;
                                    offsetDiff = J.$sub$n(t3, t4);
                                    t3 = J.getInterceptor$n(offsetDiff);
                                    if (t3.$lt(offsetDiff, 0) === true)
                                      ++crossCount;
                                    else if (t3.$gt(offsetDiff, 0) === true)
                                      ++invertedCrossCount;
                                }
                          }
                        ++j;
                    }
                ++i;
            }
        currentEdges = current.get$outgoing();
        nextEdges = next.get$outgoing();
        t1 = current.get$rank();
      case 7:
        state0 = 0;
        rank = J.$add$ns(t1, 1);
        t1 = J.getInterceptor$asx(currentEdges);
        t2 = J.getInterceptor$asx(nextEdges);
        i = 0;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        var offsetDiff;
        L2:
          while (true)
            switch (state0) {
              case 0:
                t3 = t1.get$length(currentEdges);
              case 8:
                state0 = 0;
                if (typeof t3 !== "number")
                  throw H.iae(t3);
                if (!(i < t3))
                  break L2;
                currentEdge = t1.$index(currentEdges, i);
                iCurrent = currentEdge.getIndexForRank$1(rank);
              case 9:
                state0 = 0;
                j = 0;
              default:
                L3:
                  while (true)
                    switch (state0) {
                      case 0:
                        t3 = t2.get$length(nextEdges);
                      case 10:
                        state0 = 0;
                        if (typeof t3 !== "number")
                          throw H.iae(t3);
                        if (!(j < t3))
                          break L3;
                        iNext = t2.$index(nextEdges, j).getIndexForRank$1(rank);
                        t3 = J.getInterceptor$n(iNext);
                      default:
                        if (state0 === 0 && t3.$lt(iNext, iCurrent) === true)
                          ++crossCount;
                        else
                          switch (state0) {
                            case 0:
                            default:
                              if (state0 === 0 && t3.$gt(iNext, iCurrent) === true)
                                ++invertedCrossCount;
                              else
                                switch (state0) {
                                  case 0:
                                    t3 = t2.$index(nextEdges, j).get$targetOffset();
                                  case 11:
                                    state0 = 0;
                                    t4 = currentEdge.get$targetOffset();
                                  case 12:
                                    state0 = 0;
                                    offsetDiff = J.$sub$n(t3, t4);
                                    t3 = J.getInterceptor$n(offsetDiff);
                                    if (t3.$lt(offsetDiff, 0) === true)
                                      ++crossCount;
                                    else if (t3.$gt(offsetDiff, 0) === true)
                                      ++invertedCrossCount;
                                }
                          }
                        ++j;
                    }
                ++i;
            }
        if (invertedCrossCount < crossCount)
          return true;
        return false;
    }
  },
  swapNodes$3: function(current, next, rank) {
    var t1, index, t2;
    t1 = J.getInterceptor$asx(rank);
    index = t1.indexOf$1(rank, current);
    if (typeof index !== "number")
      return this.swapNodes$3$bailout(1, next, current, t1, rank, index);
    t1.$indexSet(rank, index + 1, current);
    t1.$indexSet(rank, index, next);
    t1 = J.getInterceptor$x(current);
    index = t1.get$index(current);
    t2 = J.getInterceptor$x(next);
    t1.set$index(current, t2.get$index(next));
    t2.set$index(next, index);
  },
  "+swapNodes:3:0": 1,
  swapNodes$3$bailout: function(state0, next, current, t1, rank, index) {
    var t2;
    t1.$indexSet(rank, J.$add$ns(index, 1), current);
    t1.$indexSet(rank, index, next);
    t1 = J.getInterceptor$x(current);
    index = t1.get$index(current);
    t2 = J.getInterceptor$x(next);
    t1.set$index(current, t2.get$index(next));
    t2.set$index(next, index);
  },
  visit$1: function(g) {
    var flag, r, t1, rank, n, t2, currentNode, nextNode;
    do
      for (flag = false, r = 0; t1 = g.ranks, r < t1.list.length; ++r) {
        rank = t1.$index(t1, r);
        t1 = J.getInterceptor$asx(rank);
        n = 0;
        while (true) {
          t2 = J.$sub$n(rank.count$0(), 1);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(n < t2))
            break;
          currentNode = t1.$index(rank, n);
          nextNode = t1.$index(rank, n + 1);
          if (this.shouldSwap$2(currentNode, nextNode)) {
            this.swapNodes$3(currentNode, nextNode, rank);
            n = P.max(0, n - 2);
            flag = true;
          }
          ++n;
        }
      }
    while (flag);
  },
  "+visit:1:0": 1
},

"+LocalOptimizer": [],

MinCross: {"": "GraphVisitor;g-,sorter-",
  solve$0: function() {
    var rank, loop, t1, row, t2, t3;
    for (rank = null, loop = 0; loop < 45; ++loop) {
      for (t1 = loop / 45, row = 1; t2 = this.g.ranks, t3 = t2.list.length, row < t3; ++row) {
        rank = t2.$index(t2, row);
        t2 = this.sorter;
        t2.currentRow = row;
        t2.rank = rank;
        t2.progress = t1;
        t2.assignIncomingSortValues$0();
        t2.sort$0(t2);
        t2.rank.assignIndices$0();
      }
      if (loop === 44)
        continue;
      for (row = t3 - 2; row >= 0; --row) {
        t2 = this.g.ranks;
        rank = t2.$index(t2, row);
        t2 = this.sorter;
        t2.currentRow = row;
        t2.rank = rank;
        t2.progress = t1;
        t2.assignOutgoingSortValues$0();
        t2.sort$0(t2);
        t2.rank.assignIndices$0();
      }
    }
  },
  "+solve:0:0": 1,
  visit$1: function(g) {
    this.sorter.init$1(g);
    this.g = g;
    this.solve$0();
    this.sorter.optimize$1;
  },
  "+visit:1:0": 1,
  static: {
"": "MinCross_MAX-",
}

},

"+MinCross": [],

NeighborsIterator: {"": "Object;node<-,offset>-,list>-",
  offset$0: function($receiver) {
    return this.offset.call$0();
  },
  next$0: function() {
    var t1, t2, edge;
    t1 = this.list;
    t2 = this.offset;
    this.offset = t2 + 1;
    t1 = t1.list;
    if (t2 < 0 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    edge = t1[t2];
    t1 = this.offset;
    t2 = this.list;
    if (t1 < t2.list.length)
      return edge.opposite$1(this.node);
    t1 = this.node;
    if (t2 === t1.outgoing) {
      this.list = t1.incoming;
      this.offset = 0;
    } else
      this.list = null;
    return edge.opposite$1(t1);
  },
  "+next:0:0": 1,
  get$next: function() {
    return new D.Bound_next_NeighborsIterator(this, D.NeighborsIterator.prototype.next$0, null, "next$0");
  },
  hasNext$0: function() {
    var t1, t2;
    t1 = this.list;
    if (t1 == null)
      return false;
    if (this.offset < t1.list.length)
      return true;
    t2 = this.node;
    if (t1 === t2.outgoing) {
      this.list = t2.incoming;
      this.offset = 0;
    }
    return this.offset < this.list.list.length;
  },
  "+hasNext:0:0": 1,
  remove$0: function(_) {
    throw H.wrapException("Remove not supported");
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new D.Bound_remove_NeighborsIterator(this, D.NeighborsIterator.prototype.remove$0, _receiver, "remove$0");
  }
},

"+NeighborsIterator": [],

Node0: {"": "Object;x*-,y*-,width*-,height*-,padding*-,data>-,flag@-,incoming<-,outgoing<-,index*-,rank@-,sortValue@-,left*-,right*-,workingData<-,workingInts<-",
  width$0: function($receiver) {
    return this.width.call$0();
  },
  height$0: function($receiver) {
    return this.height.call$0();
  },
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  },
  right$0: function($receiver) {
    return this.right.call$0();
  },
  get$offsetIncoming: function() {
    return J.$tdiv$n(this.width, 2);
  },
  "+offsetIncoming": 1,
  get$offsetOutgoing: function() {
    return J.$tdiv$n(this.width, 2);
  },
  "+offsetOutgoing": 1,
  toString$0: function(_) {
    return "N(" + H.S(this.data) + ")";
  },
  "+toString:0:0": 1,
  iteratorNeighbors$0: function() {
    return new D.NeighborsIterator(this, 0, this.outgoing);
  },
  "+iteratorNeighbors:0:0": 1,
  $isNode0: true
},

"+Node": [],

NodeCluster: {"": "NodeList;hashCode2-,isSetMember@-,isDirty@-,leftDirty?-,rightDirty?-,leftFreedom<-,rightFreedom<-,leftNonzero<-,rightNonzero<-,leftLinks<-,rightLinks<-,leftNeighbors<-,rightNeighbors<-,effectivePull-,weightedTotal@-,weightedDivisor<-,unweightedTotal@-,unweightedDivisor-,list-",
  get$leftCount: function() {
    return this.leftLinks.length;
  },
  "+leftCount": 1,
  get$rightCount: function() {
    return this.rightLinks.length;
  },
  "+rightCount": 1,
  addLeftNeighbor$2: function(neighbor, link) {
    this.leftNeighbors.push(neighbor);
    this.leftLinks.push(link);
  },
  "+addLeftNeighbor:2:0": 1,
  addRightNeighbor$2: function(neighbor, link) {
    this.rightNeighbors.push(neighbor);
    this.rightLinks.push(link);
  },
  "+addRightNeighbor:2:0": 1,
  adjustRank$2: function(delta, affected) {
    var t1, t2, edges, i, neighbor, t3, t4;
    this.adjustRankSimple$1(delta);
    for (t1 = this.leftLinks, t2 = this.leftNeighbors, edges = null, i = 0; i < t1.length; ++i) {
      if (i >= t2.length)
        throw H.ioore(t2, i);
      neighbor = t2[i];
      if (neighbor.get$isSetMember() === true)
        continue;
      edges = t1[i];
      t3 = neighbor.get$weightedTotal();
      t4 = edges.collapsedWeight;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      neighbor.set$weightedTotal(J.$add$ns(t3, delta * t4));
      neighbor.set$unweightedTotal(J.$add$ns(neighbor.get$unweightedTotal(), delta * edges.collapsedCount));
      t4 = this.weightedTotal;
      t3 = edges.collapsedWeight;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      this.weightedTotal = J.$sub$n(t4, delta * t3);
      this.unweightedTotal = J.$sub$n(this.unweightedTotal, delta * edges.collapsedCount);
      this.leftDirty = true;
      neighbor.set$rightDirty(true);
      if (neighbor.get$isDirty() !== true) {
        neighbor.set$isDirty(true);
        affected.add$1(affected, neighbor);
      }
    }
    for (t1 = this.rightLinks, t2 = this.rightNeighbors, i = 0; i < t1.length; ++i) {
      if (i >= t2.length)
        throw H.ioore(t2, i);
      neighbor = t2[i];
      if (neighbor.get$isSetMember() === true)
        continue;
      edges = t1[i];
      t3 = neighbor.get$weightedTotal();
      t4 = edges.collapsedWeight;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      neighbor.set$weightedTotal(J.$add$ns(t3, delta * t4));
      neighbor.set$unweightedTotal(J.$add$ns(neighbor.get$unweightedTotal(), delta * edges.collapsedCount));
      t4 = this.weightedTotal;
      t3 = edges.collapsedWeight;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      this.weightedTotal = J.$sub$n(t4, delta * t3);
      this.unweightedTotal = J.$sub$n(this.unweightedTotal, delta * edges.collapsedCount);
      this.rightDirty = true;
      neighbor.set$leftDirty(true);
      if (neighbor.get$isDirty() !== true) {
        neighbor.set$isDirty(true);
        affected.add$1(affected, neighbor);
      }
    }
    this.isDirty = true;
    affected.add$1(affected, this);
  },
  "+adjustRank:2:0": 1,
  getPull$0: function() {
    return this.effectivePull;
  },
  "+getPull:0:0": 1,
  getRightNeighbor$1: function(neighbor) {
    var t1, t2, i;
    for (t1 = this.rightLinks, t2 = this.rightNeighbors, i = 0; i < t1.length; ++i) {
      if (i >= t2.length)
        throw H.ioore(t2, i);
      if (J.$eq(t2[i], neighbor)) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        return t1[i];
      }
    }
    return;
  },
  "+getRightNeighbor:1:0": 1,
  get$hashCode: function(_) {
    return this.hashCode2;
  },
  "+hashCode": 1,
  initValues$0: function() {
    var t1, i, edges, t2, t3, slack;
    this.weightedTotal = 0;
    this.weightedDivisor = 0;
    this.unweightedTotal = 0;
    this.rightFreedom = 1073741823;
    this.leftFreedom = 1073741823;
    this.rightNonzero = 1073741823;
    this.leftNonzero = 1073741823;
    for (t1 = this.leftLinks, i = 0; i < t1.length; ++i) {
      edges = t1[i];
      this.weightedTotal = J.$sub$n(this.weightedTotal, edges.get$weightedPull());
      this.unweightedTotal = J.$sub$n(this.unweightedTotal, edges.tightestEdge.get$slack());
      this.unweightedDivisor = this.unweightedDivisor + edges.collapsedCount;
      t2 = this.weightedDivisor;
      t3 = edges.collapsedWeight;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      this.weightedDivisor = t2 + t3;
      slack = edges.tightestEdge.get$slack();
      this.leftFreedom = P.min(slack, this.leftFreedom);
      if (J.$gt$n(slack, 0) === true)
        this.leftNonzero = P.min(slack, this.leftNonzero);
    }
    for (t1 = this.rightLinks, i = 0; i < t1.length; ++i) {
      edges = t1[i];
      this.weightedTotal = J.$add$ns(this.weightedTotal, edges.get$weightedPull());
      this.unweightedDivisor = this.unweightedDivisor + edges.collapsedCount;
      this.unweightedTotal = J.$add$ns(this.unweightedTotal, edges.tightestEdge.get$slack());
      t2 = this.weightedDivisor;
      t3 = edges.collapsedWeight;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      this.weightedDivisor = t2 + t3;
      slack = edges.tightestEdge.get$slack();
      this.rightFreedom = P.min(slack, this.rightFreedom);
      if (J.$gt$n(slack, 0) === true)
        this.rightNonzero = P.min(slack, this.rightNonzero);
    }
    this.updateEffectivePull$0();
  },
  "+initValues:0:0": 1,
  refreshValues$0: function() {
    var t1, i, slack;
    this.isDirty = false;
    if (this.leftDirty) {
      this.leftDirty = false;
      this.leftFreedom = 1073741823;
      this.leftNonzero = 1073741823;
      for (t1 = this.leftLinks, i = 0; i < t1.length; ++i) {
        slack = t1[i].tightestEdge.get$slack();
        this.leftFreedom = P.min(slack, this.leftFreedom);
        if (J.$gt$n(slack, 0) === true)
          this.leftNonzero = P.min(slack, this.leftNonzero);
      }
    }
    if (this.rightDirty) {
      this.rightDirty = false;
      this.rightFreedom = 1073741823;
      this.rightNonzero = 1073741823;
      for (t1 = this.rightLinks, i = 0; i < t1.length; ++i) {
        slack = t1[i].tightestEdge.get$slack();
        this.rightFreedom = P.min(slack, this.rightFreedom);
        if (J.$gt$n(slack, 0) === true)
          this.rightNonzero = P.min(slack, this.rightNonzero);
      }
    }
    this.updateEffectivePull$0();
  },
  "+refreshValues:0:0": 1,
  updateEffectivePull$0: function() {
    var t1 = this.weightedDivisor;
    if (t1 !== 0)
      this.effectivePull = J.$tdiv$n(this.weightedTotal, t1);
    else {
      t1 = this.unweightedDivisor;
      if (t1 !== 0)
        this.effectivePull = J.$tdiv$n(this.unweightedTotal, t1);
      else
        this.effectivePull = 0;
    }
  },
  "+updateEffectivePull:0:0": 1,
  $isNodeCluster: true
},

"+NodeCluster": [],

NodeList: {"": "ListBase0;list-",
  adjustRankSimple$1: function(delta) {
    var t1, node;
    if (typeof delta !== "number")
      return this.adjustRankSimple$1$bailout(1, delta);
    if (delta === 0)
      return;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      node = t1._liblib$_current;
      node.set$rank(J.$add$ns(node.get$rank(), delta));
    }
  },
  "+adjustRankSimple:1:0": 1,
  adjustRankSimple$1$bailout: function(state0, delta) {
    var t1, node;
    if (J.$eq(delta, 0))
      return;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      node = t1._liblib$_current;
      node.set$rank(J.$add$ns(node.get$rank(), delta));
    }
  },
  normalizeRanks$0: function() {
    var t1, minRank;
    for (t1 = this.get$iterator(this), minRank = 1073741823; t1.moveNext$0();)
      minRank = P.min(minRank, t1._liblib$_current.get$rank());
    this.adjustRankSimple$1(-minRank);
  },
  "+normalizeRanks:0:0": 1,
  resetFlags$0: function() {
    for (var t1 = this.get$iterator(this); t1.moveNext$0();)
      t1._liblib$_current.set$flag(false);
  },
  "+resetFlags:0:0": 1,
  $asList: function() {
    return [D.Node0];
  },
  $asIterable: function() {
    return [D.Node0];
  }
},

"+NodeList": [],

NodePair: {"": "Object;n1-,n2-",
  $eq: function(_, obj) {
    var t1;
    if (obj == null)
      return false;
    t1 = J.getInterceptor(obj);
    if (typeof obj === "object" && obj !== null && !!t1.$isNodePair)
      return J.$eq(obj.n1, this.n1) && J.$eq(obj.n2, this.n2);
    return false;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return J.$xor$n(J.get$hashCode$(this.n1), J.get$hashCode$(this.n2));
  },
  "+hashCode": 1,
  toString$0: function(_) {
    return "[" + H.S(this.n1) + ", " + H.S(this.n2) + "]";
  },
  "+toString:0:0": 1,
  $isNodePair: true
},

"+NodePair": [],

Obstacle: {"": "Rectangle;exclude@-,topLeft>-,topRight<-,bottomLeft<-,bottomRight>-,center<-,router-,height-,width-,x-,y-",
  containsProper$1: function(p) {
    var t1 = J.getInterceptor$x(p);
    return J.$gt$n(t1.get$x(p), this.x) === true && J.$lt$n(t1.get$x(p), J.$sub$n(J.$add$ns(this.x, this.width), 1)) === true && J.$gt$n(t1.get$y(p), this.y) === true && J.$lt$n(t1.get$y(p), J.$sub$n(J.$add$ns(this.y, this.height), 1)) === true;
  },
  "+containsProper:1:0": 1,
  growVertices$0: function() {
    var t1 = this.topLeft;
    if (J.$gt$n(t1.totalCount, 0) === true)
      t1.grow$0();
    t1 = this.topRight;
    if (J.$gt$n(t1.totalCount, 0) === true)
      t1.grow$0();
    t1 = this.bottomLeft;
    if (J.$gt$n(t1.totalCount, 0) === true)
      t1.grow$0();
    t1 = this.bottomRight;
    if (J.$gt$n(t1.totalCount, 0) === true)
      t1.grow$0();
  },
  "+growVertices:0:0": 1,
  init$1: function(rect) {
    var t1, t2, t3;
    this.x = rect.x;
    this.y = rect.y;
    this.width = rect.width;
    this.height = rect.height;
    this.exclude = false;
    this.topLeft = D.Vertex$(this.x, this.y, this);
    this.topLeft.positionOnObstacle = 9;
    this.topRight = D.Vertex$(J.$sub$n(J.$add$ns(this.x, this.width), 1), this.y, this);
    this.topRight.positionOnObstacle = 17;
    this.bottomLeft = D.Vertex$(this.x, J.$sub$n(J.$add$ns(this.y, this.height), 1), this);
    this.bottomLeft.positionOnObstacle = 12;
    this.bottomRight = D.Vertex$(J.$sub$n(J.$add$ns(this.x, this.width), 1), J.$sub$n(J.$add$ns(this.y, this.height), 1), this);
    this.bottomRight.positionOnObstacle = 20;
    t1 = this.getCenter$0();
    t2 = t1.x;
    t1 = t1.y;
    t3 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t2, t1);
    t3.Vertex$3(t2, t1, this);
    this.center = t3;
  },
  "+init:1:0": 1,
  reset$0: function(_) {
    this.topLeft.fullReset$0();
    this.bottomLeft.fullReset$0();
    this.bottomRight.fullReset$0();
    this.topRight.fullReset$0();
  },
  "+reset:0:0": 1,
  shrinkVertices$0: function() {
    var t1 = this.topLeft;
    if (J.$gt$n(t1.totalCount, 0) === true) {
      t1.x = t1.origX;
      t1.y = t1.origY;
    }
    t1 = this.topRight;
    if (J.$gt$n(t1.totalCount, 0) === true) {
      t1.x = t1.origX;
      t1.y = t1.origY;
    }
    t1 = this.bottomLeft;
    if (J.$gt$n(t1.totalCount, 0) === true) {
      t1.x = t1.origX;
      t1.y = t1.origY;
    }
    t1 = this.bottomRight;
    if (J.$gt$n(t1.totalCount, 0) === true) {
      t1.x = t1.origX;
      t1.y = t1.origY;
    }
  },
  "+shrinkVertices:0:0": 1,
  toString$0: function(_) {
    return "Obstacle(" + H.S(this.x);
  },
  "+toString:0:0": 1,
  $isObstacle: true
},

"+Obstacle": [],

SegmentStack: {"": "Object;list>-",
  get$isEmpty: function(_) {
    return this.list.length === 0;
  },
  "+isEmpty": 1
},

"+SegmentStack": [],

Path: {"": "Object;bendpoints-,data>-,excludedObstacles<-,grownSegments<-,isDirty@-,isInverted@-,isMarked@-,points>-,prevCostRatio-,segments<-,stack-,start*-,end@-,subPath-,threshold@-,visibleObstacles<-,visibleVertices-",
  data$1: function($receiver, arg0) {
    return this.data.call$1(arg0);
  },
  addAllSegmentsBetween$2: function(source, target) {
    var t1, t2, t3, t4, t5;
    t1 = source.get$bottomLeft();
    t2 = target.get$bottomLeft();
    t3 = new D.Segment(null, null);
    t3.start = t1;
    t3.end = t2;
    this.addConnectingSegment$5(t3, source, target, false, false);
    t3 = J.getInterceptor$x(source);
    t2 = t3.get$bottomRight(source);
    t1 = J.getInterceptor$x(target);
    t4 = t1.get$bottomRight(target);
    t5 = new D.Segment(null, null);
    t5.start = t2;
    t5.end = t4;
    this.addConnectingSegment$5(t5, source, target, true, true);
    t5 = t3.get$topLeft(source);
    t4 = t1.get$topLeft(target);
    t2 = new D.Segment(null, null);
    t2.start = t5;
    t2.end = t4;
    this.addConnectingSegment$5(t2, source, target, true, true);
    t2 = source.get$topRight();
    t4 = target.get$topRight();
    t5 = new D.Segment(null, null);
    t5.start = t2;
    t5.end = t4;
    this.addConnectingSegment$5(t5, source, target, false, false);
    if (J.$eq(t3.bottom$0(source), t1.bottom$0(target))) {
      t2 = source.get$bottomLeft();
      t4 = t1.get$bottomRight(target);
      t5 = new D.Segment(null, null);
      t5.start = t2;
      t5.end = t4;
      this.addConnectingSegment$5(t5, source, target, false, true);
      t5 = t3.get$bottomRight(source);
      t4 = target.get$bottomLeft();
      t2 = new D.Segment(null, null);
      t2.start = t5;
      t2.end = t4;
      this.addConnectingSegment$5(t2, source, target, true, false);
    }
    if (J.$eq(t3.get$y(source), t1.get$y(target))) {
      t2 = t3.get$topLeft(source);
      t4 = target.get$topRight();
      t5 = new D.Segment(null, null);
      t5.start = t2;
      t5.end = t4;
      this.addConnectingSegment$5(t5, source, target, true, false);
      t5 = source.get$topRight();
      t4 = t1.get$topLeft(target);
      t2 = new D.Segment(null, null);
      t2.start = t5;
      t2.end = t4;
      this.addConnectingSegment$5(t2, source, target, false, true);
    }
    if (J.$eq(t3.get$x(source), t1.get$x(target))) {
      t2 = source.get$bottomLeft();
      t4 = t1.get$topLeft(target);
      t5 = new D.Segment(null, null);
      t5.start = t2;
      t5.end = t4;
      this.addConnectingSegment$5(t5, source, target, false, true);
      t5 = t3.get$topLeft(source);
      t4 = target.get$bottomLeft();
      t2 = new D.Segment(null, null);
      t2.start = t5;
      t2.end = t4;
      this.addConnectingSegment$5(t2, source, target, true, false);
    }
    if (J.$eq(t3.right$0(source), t1.right$0(target))) {
      t2 = t3.get$bottomRight(source);
      t3 = target.get$topRight();
      t4 = new D.Segment(null, null);
      t4.start = t2;
      t4.end = t3;
      this.addConnectingSegment$5(t4, source, target, true, false);
      t4 = source.get$topRight();
      t1 = t1.get$bottomRight(target);
      t3 = new D.Segment(null, null);
      t3.start = t4;
      t3.end = t1;
      this.addConnectingSegment$5(t3, source, target, false, true);
    }
  },
  "+addAllSegmentsBetween:2:0": 1,
  addConnectingSegment$5: function(segment, o1, o2, checkTopRight1, checkTopRight2) {
    var t1;
    if (!J.$eq(this.threshold, 0))
      t1 = J.$gt$n(J.$add$ns(segment.end.getDistance$1(this.end), segment.end.getDistance$1(this.start)), this.threshold) === true || J.$gt$n(J.$add$ns(segment.start.getDistance$1(this.end), segment.start.getDistance$1(this.start)), this.threshold) === true;
    else
      t1 = false;
    if (t1)
      return;
    if (o2.containsProper$1(segment.start) === true || o1.containsProper$1(segment.end) === true)
      return;
    if (checkTopRight1) {
      t1 = J.getInterceptor$x(o1);
      t1 = segment.intersects$4(segment, t1.get$x(o1), J.$sub$n(t1.bottom$0(o1), 1), J.$sub$n(t1.right$0(o1), 1), t1.get$y(o1));
    } else
      t1 = false;
    if (t1)
      return;
    if (checkTopRight2) {
      t1 = J.getInterceptor$x(o2);
      t1 = segment.intersects$4(segment, t1.get$x(o2), J.$sub$n(t1.bottom$0(o2), 1), J.$sub$n(t1.right$0(o2), 1), t1.get$y(o2));
    } else
      t1 = false;
    if (t1)
      return;
    if (!checkTopRight1) {
      t1 = J.getInterceptor$x(o1);
      t1 = segment.intersects$4(segment, t1.get$x(o1), t1.get$y(o1), J.$sub$n(t1.right$0(o1), 1), J.$sub$n(t1.bottom$0(o1), 1));
    } else
      t1 = false;
    if (t1)
      return;
    if (!checkTopRight2) {
      t1 = J.getInterceptor$x(o2);
      t1 = segment.intersects$4(segment, t1.get$x(o2), t1.get$y(o2), J.$sub$n(t1.right$0(o2), 1), J.$sub$n(t1.bottom$0(o2), 1));
    } else
      t1 = false;
    if (t1)
      return;
    this.stack.list.push(o1);
    this.stack.list.push(o2);
    this.stack.list.push(segment);
  },
  "+addConnectingSegment:5:0": 1,
  addObstacle$1: function(newObs) {
    var t1, otherObs;
    t1 = this.visibleObstacles;
    otherObs = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
    otherObs.addAll$1(otherObs, t1);
    t1.add$1(t1, newObs);
    for (t1 = new P.LinkedHashSetIterator(otherObs, otherObs._modifications, null, null), t1._cell = t1._set._first; t1.moveNext$0();)
      this.addSegmentsFor$2(newObs, t1._liblib1$_current);
    this.addPerimiterSegments$1(newObs);
    this.addSegmentsFor2$2(this.start, newObs);
    this.addSegmentsFor2$2(this.end, newObs);
  },
  "+addObstacle:1:0": 1,
  addPerimiterSegments$1: function(obs) {
    var t1, t2, t3, seg;
    t1 = J.getInterceptor$x(obs);
    t2 = t1.get$topLeft(obs);
    t3 = obs.get$topRight();
    seg = new D.Segment(null, null);
    seg.start = t2;
    seg.end = t3;
    this.stack.list.push(obs);
    this.stack.list.push(null);
    this.stack.list.push(seg);
    t3 = obs.get$topRight();
    t2 = t1.get$bottomRight(obs);
    seg = new D.Segment(null, null);
    seg.start = t3;
    seg.end = t2;
    this.stack.list.push(obs);
    this.stack.list.push(null);
    this.stack.list.push(seg);
    t2 = t1.get$bottomRight(obs);
    t3 = obs.get$bottomLeft();
    seg = new D.Segment(null, null);
    seg.start = t2;
    seg.end = t3;
    this.stack.list.push(obs);
    this.stack.list.push(null);
    this.stack.list.push(seg);
    t3 = obs.get$bottomLeft();
    t1 = t1.get$topLeft(obs);
    seg = new D.Segment(null, null);
    seg.start = t3;
    seg.end = t1;
    this.stack.list.push(obs);
    this.stack.list.push(null);
    this.stack.list.push(seg);
  },
  "+addPerimiterSegments:1:0": 1,
  addSegment$4: function(segment, exclude1, exclude2, allObstacles) {
    var t1, t2, t3, i, obs, t4, t5, t6, t7, t8, t9;
    t1 = this.threshold;
    if (typeof t1 !== "number")
      return this.addSegment$4$bailout(1, segment, exclude2, exclude1, allObstacles, t1);
    if (t1 !== 0) {
      t1 = segment.end.getDistance$1(this.end);
      if (typeof t1 !== "number")
        return this.addSegment$4$bailout(2, segment, exclude2, exclude1, allObstacles, t1);
      t2 = segment.end.getDistance$1(this.start);
      if (typeof t2 !== "number")
        return this.addSegment$4$bailout(3, segment, exclude2, exclude1, allObstacles, t1, t2);
      t3 = this.threshold;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (!(t1 + t2 > t3)) {
        t1 = segment.start.getDistance$1(this.end);
        if (typeof t1 !== "number")
          return this.addSegment$4$bailout(4, segment, exclude2, exclude1, allObstacles, t1);
        t2 = segment.start.getDistance$1(this.start);
        if (typeof t2 !== "number")
          return this.addSegment$4$bailout(5, segment, exclude2, exclude1, allObstacles, t1, t2);
        t3 = this.threshold;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t3 = t1 + t2 > t3;
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = false;
    if (t1)
      return;
    for (i = 0; i < allObstacles.length; ++i) {
      obs = allObstacles[i];
      t1 = J.getInterceptor(obs);
      if (t1.$eq(obs, exclude1) || t1.$eq(obs, exclude2) || obs.get$exclude() === true)
        continue;
      t2 = t1.get$x(obs);
      t3 = t1.get$y(obs);
      t4 = t1.right$0(obs);
      if (typeof t4 !== "number")
        return this.addSegment$4$bailout(6, segment, exclude2, exclude1, allObstacles, t1, t2, obs, i, t3, t4);
      --t4;
      t5 = t1.bottom$0(obs);
      if (typeof t5 !== "number")
        return this.addSegment$4$bailout(7, segment, exclude2, exclude1, allObstacles, t1, t2, obs, i, t3, t4, t5);
      t6 = segment.start;
      t7 = J.getInterceptor$x(t6);
      t8 = t7.get$x(t6);
      t6 = t7.get$y(t6);
      t7 = segment.end;
      t9 = J.getInterceptor$x(t7);
      if (!D.Geometry_linesIntersect(t8, t6, t9.get$x(t7), t9.get$y(t7), t2, t3, t4, t5 - 1)) {
        t2 = t1.get$x(obs);
        t3 = t1.bottom$0(obs);
        if (typeof t3 !== "number")
          return this.addSegment$4$bailout(8, segment, exclude2, exclude1, allObstacles, t1, t2, obs, i, t3);
        --t3;
        t4 = t1.right$0(obs);
        if (typeof t4 !== "number")
          return this.addSegment$4$bailout(9, segment, exclude2, exclude1, allObstacles, t1, t2, obs, i, t3, t4);
        t1 = t1.get$y(obs);
        t5 = segment.start;
        t6 = J.getInterceptor$x(t5);
        t7 = t6.get$x(t5);
        t5 = t6.get$y(t5);
        t6 = segment.end;
        t8 = J.getInterceptor$x(t6);
        t1 = D.Geometry_linesIntersect(t7, t5, t8.get$x(t6), t8.get$y(t6), t2, t3, t4 - 1, t1) || obs.containsProper$1(segment.start) === true || obs.containsProper$1(segment.end) === true;
      } else
        t1 = true;
      if (t1) {
        t1 = this.visibleObstacles;
        if (!t1.contains$1(t1, obs))
          this.addObstacle$1(obs);
        return;
      }
    }
    this.linkVertices$1(segment);
  },
  "+addSegment:4:0": 1,
  addSegment$4$bailout: function(state0, segment, exclude2, exclude1, allObstacles, t1, t2, obs, i, t3, t4, t5) {
    switch (state0) {
      case 0:
        t1 = this.threshold;
      case 1:
        state0 = 0;
      default:
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !J.$eq(t1, 0))
          switch (state0) {
            case 0:
              t1 = segment.end.getDistance$1(this.end);
            case 2:
              state0 = 0;
              t2 = segment.end.getDistance$1(this.start);
            case 3:
              state0 = 0;
              t2 = J.$add$ns(t1, t2);
              t1 = this.threshold;
              if (typeof t1 !== "number")
                throw H.iae(t1);
            default:
              if (state0 === 5 || state0 === 4 || state0 === 0 && J.$gt$n(t2, t1) !== true)
                switch (state0) {
                  case 0:
                    t1 = segment.start.getDistance$1(this.end);
                  case 4:
                    state0 = 0;
                    t2 = segment.start.getDistance$1(this.start);
                  case 5:
                    state0 = 0;
                    t2 = J.$add$ns(t1, t2);
                    t1 = this.threshold;
                    if (typeof t1 !== "number")
                      throw H.iae(t1);
                    t1 = J.$gt$n(t2, t1) === true;
                }
              else
                t1 = true;
          }
        else
          t1 = false;
        if (t1)
          return;
        i = 0;
      case 6:
      case 7:
      case 8:
      case 9:
        var t6, t7, t8, t9;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < allObstacles.length))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      obs = allObstacles[i];
                      t1 = J.getInterceptor(obs);
                      if (t1.$eq(obs, exclude1) || t1.$eq(obs, exclude2) || obs.get$exclude() === true)
                        break c$0;
                      t2 = t1.get$x(obs);
                      t3 = t1.get$y(obs);
                      t4 = t1.right$0(obs);
                    case 6:
                      state0 = 0;
                      t4 = J.$sub$n(t4, 1);
                      t5 = t1.bottom$0(obs);
                    case 7:
                      state0 = 0;
                      t5 = J.$sub$n(t5, 1);
                      t6 = segment.start;
                      t7 = J.getInterceptor$x(t6);
                      t8 = t7.get$x(t6);
                      t6 = t7.get$y(t6);
                      t7 = segment.end;
                      t9 = J.getInterceptor$x(t7);
                    default:
                      if (state0 === 9 || state0 === 8 || state0 === 0 && !D.Geometry_linesIntersect(t8, t6, t9.get$x(t7), t9.get$y(t7), t2, t3, t4, t5))
                        switch (state0) {
                          case 0:
                            t2 = t1.get$x(obs);
                            t3 = t1.bottom$0(obs);
                          case 8:
                            state0 = 0;
                            t3 = J.$sub$n(t3, 1);
                            t4 = t1.right$0(obs);
                          case 9:
                            state0 = 0;
                            t4 = J.$sub$n(t4, 1);
                            t1 = t1.get$y(obs);
                            t5 = segment.start;
                            t6 = J.getInterceptor$x(t5);
                            t7 = t6.get$x(t5);
                            t5 = t6.get$y(t5);
                            t6 = segment.end;
                            t8 = J.getInterceptor$x(t6);
                            t1 = D.Geometry_linesIntersect(t7, t5, t8.get$x(t6), t8.get$y(t6), t2, t3, t4, t1) || obs.containsProper$1(segment.start) === true || obs.containsProper$1(segment.end) === true;
                        }
                      else
                        t1 = true;
                      if (t1) {
                        t1 = this.visibleObstacles;
                        if (!t1.contains$1(t1, obs))
                          this.addObstacle$1(obs);
                        return;
                      }
                  }
                }
                ++i;
            }
        this.linkVertices$1(segment);
    }
  },
  addSegmentsFor$2: function(source, target) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$x(source);
    if (t1.intersects$1(source, target) === true)
      this.addAllSegmentsBetween$2(source, target);
    else {
      t2 = J.getInterceptor$x(target);
      t3 = t2.bottom$0(target);
      if (typeof t3 !== "number")
        return this.addSegmentsFor$2$bailout(1, source, target, t1, t2, t3);
      t4 = t1.get$y(source);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (t3 - 1 < t4)
        this.addSegmentsTargetAboveSource$2(source, target);
      else {
        t3 = t1.bottom$0(source);
        if (typeof t3 !== "number")
          return this.addSegmentsFor$2$bailout(2, source, target, t1, t2, t3);
        t4 = t2.get$y(target);
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (t3 - 1 < t4)
          this.addSegmentsTargetAboveSource$2(target, source);
        else {
          t2 = t2.right$0(target);
          if (typeof t2 !== "number")
            return this.addSegmentsFor$2$bailout(3, source, target, t1, t2);
          t1 = t1.get$x(source);
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (t2 - 1 < t1)
            this.addSegmentsTargetBesideSource$2(source, target);
          else
            this.addSegmentsTargetBesideSource$2(target, source);
        }
      }
    }
  },
  "+addSegmentsFor:2:0": 1,
  addSegmentsFor$2$bailout: function(state0, source, target, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = J.getInterceptor$x(source);
      default:
        var t4;
        if (state0 === 0 && t1.intersects$1(source, target) === true)
          this.addAllSegmentsBetween$2(source, target);
        else
          switch (state0) {
            case 0:
              t2 = J.getInterceptor$x(target);
              t3 = t2.bottom$0(target);
            case 1:
              state0 = 0;
              t3 = J.$sub$n(t3, 1);
              t4 = t1.get$y(source);
              if (typeof t4 !== "number")
                throw H.iae(t4);
            default:
              if (state0 === 0 && J.$lt$n(t3, t4) === true)
                this.addSegmentsTargetAboveSource$2(source, target);
              else
                switch (state0) {
                  case 0:
                    t3 = t1.bottom$0(source);
                  case 2:
                    state0 = 0;
                    t3 = J.$sub$n(t3, 1);
                    t4 = t2.get$y(target);
                    if (typeof t4 !== "number")
                      throw H.iae(t4);
                  case 3:
                    if (state0 === 0 && J.$lt$n(t3, t4) === true)
                      this.addSegmentsTargetAboveSource$2(target, source);
                    else
                      switch (state0) {
                        case 0:
                          t2 = t2.right$0(target);
                        case 3:
                          state0 = 0;
                          t2 = J.$sub$n(t2, 1);
                          t1 = t1.get$x(source);
                          if (typeof t1 !== "number")
                            throw H.iae(t1);
                          if (J.$lt$n(t2, t1) === true)
                            this.addSegmentsTargetBesideSource$2(source, target);
                          else
                            this.addSegmentsTargetBesideSource$2(target, source);
                      }
                }
          }
    }
  },
  addSegmentsFor2$2: function(vertex, obs) {
    var t1, t2, seg, seg2;
    switch (obs.getPosition$1(vertex)) {
      case 12:
      case 17:
        t1 = J.getInterceptor$x(obs);
        t2 = t1.get$topLeft(obs);
        seg = new D.Segment(null, null);
        seg.start = vertex;
        seg.end = t2;
        t1 = t1.get$bottomRight(obs);
        seg2 = new D.Segment(null, null);
        seg2.start = vertex;
        seg2.end = t1;
        break;
      case 20:
      case 9:
        t1 = obs.get$topRight();
        seg = new D.Segment(null, null);
        seg.start = vertex;
        seg.end = t1;
        t1 = obs.get$bottomLeft();
        seg2 = new D.Segment(null, null);
        seg2.start = vertex;
        seg2.end = t1;
        break;
      case 1:
        t1 = J.get$topLeft$x(obs);
        seg = new D.Segment(null, null);
        seg.start = vertex;
        seg.end = t1;
        t1 = obs.get$topRight();
        seg2 = new D.Segment(null, null);
        seg2.start = vertex;
        seg2.end = t1;
        break;
      case 16:
        t1 = J.get$bottomRight$x(obs);
        seg = new D.Segment(null, null);
        seg.start = vertex;
        seg.end = t1;
        t1 = obs.get$topRight();
        seg2 = new D.Segment(null, null);
        seg2.start = vertex;
        seg2.end = t1;
        break;
      case 4:
        t1 = J.get$bottomRight$x(obs);
        seg = new D.Segment(null, null);
        seg.start = vertex;
        seg.end = t1;
        t1 = obs.get$bottomLeft();
        seg2 = new D.Segment(null, null);
        seg2.start = vertex;
        seg2.end = t1;
        break;
      case 8:
        t1 = J.get$topLeft$x(obs);
        seg = new D.Segment(null, null);
        seg.start = vertex;
        seg.end = t1;
        t1 = obs.get$bottomLeft();
        seg2 = new D.Segment(null, null);
        seg2.start = vertex;
        seg2.end = t1;
        break;
      default:
        t1 = J.getInterceptor$x(vertex);
        t2 = J.getInterceptor$x(obs);
        if (J.$eq(t1.get$x(vertex), t2.get$x(obs))) {
          t1 = t2.get$topLeft(obs);
          seg = new D.Segment(null, null);
          seg.start = vertex;
          seg.end = t1;
          t1 = obs.get$bottomLeft();
          seg2 = new D.Segment(null, null);
          seg2.start = vertex;
          seg2.end = t1;
        } else if (J.$eq(t1.get$y(vertex), t2.get$y(obs))) {
          t1 = t2.get$topLeft(obs);
          seg = new D.Segment(null, null);
          seg.start = vertex;
          seg.end = t1;
          t1 = obs.get$topRight();
          seg2 = new D.Segment(null, null);
          seg2.start = vertex;
          seg2.end = t1;
        } else if (J.$eq(t1.get$y(vertex), J.$sub$n(t2.bottom$0(obs), 1))) {
          t1 = obs.get$bottomLeft();
          seg = new D.Segment(null, null);
          seg.start = vertex;
          seg.end = t1;
          t2 = t2.get$bottomRight(obs);
          seg2 = new D.Segment(null, null);
          seg2.start = vertex;
          seg2.end = t2;
        } else if (J.$eq(t1.get$x(vertex), J.$sub$n(t2.right$0(obs), 1))) {
          t1 = obs.get$topRight();
          seg = new D.Segment(null, null);
          seg.start = vertex;
          seg.end = t1;
          t2 = t2.get$bottomRight(obs);
          seg2 = new D.Segment(null, null);
          seg2.start = vertex;
          seg2.end = t2;
        }
        throw H.wrapException("Unexpected vertex conditions");
    }
    this.stack.list.push(obs);
    this.stack.list.push(null);
    this.stack.list.push(seg);
    this.stack.list.push(obs);
    this.stack.list.push(null);
    this.stack.list.push(seg2);
  },
  "+addSegmentsFor2:2:0": 1,
  addSegmentsTargetAboveSource$2: function(source, target) {
    var t1, t2, t3, t4, seg, seg2;
    t1 = J.getInterceptor$x(target);
    t2 = J.getInterceptor$x(source);
    if (J.$gt$n(t1.get$x(target), t2.get$x(source)) === true) {
      t3 = t2.get$topLeft(source);
      t4 = t1.get$topLeft(target);
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      if (J.$lt$n(t1.get$x(target), J.$sub$n(t2.right$0(source), 1)) === true) {
        t3 = source.get$topRight();
        t4 = target.get$bottomLeft();
        seg2 = new D.Segment(null, null);
        seg2.start = t3;
        seg2.end = t4;
      } else {
        t3 = t2.get$bottomRight(source);
        t4 = t1.get$topLeft(target);
        seg2 = new D.Segment(null, null);
        seg2.start = t3;
        seg2.end = t4;
      }
    } else if (J.$eq(t2.get$x(source), t1.get$x(target))) {
      t3 = t2.get$topLeft(source);
      t4 = target.get$bottomLeft();
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t4 = source.get$topRight();
      t3 = target.get$bottomLeft();
      seg2 = new D.Segment(null, null);
      seg2.start = t4;
      seg2.end = t3;
    } else {
      t3 = source.get$bottomLeft();
      t4 = target.get$bottomLeft();
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t4 = source.get$topRight();
      t3 = target.get$bottomLeft();
      seg2 = new D.Segment(null, null);
      seg2.start = t4;
      seg2.end = t3;
    }
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg);
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg2);
    if (J.$lt$n(t1.right$0(target), t2.right$0(source)) === true) {
      t3 = source.get$topRight();
      t4 = target.get$topRight();
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      if (J.$gt$n(J.$sub$n(t1.right$0(target), 1), t2.get$x(source)) === true) {
        t2 = t2.get$topLeft(source);
        t1 = t1.get$bottomRight(target);
        seg2 = new D.Segment(null, null);
        seg2.start = t2;
        seg2.end = t1;
      } else {
        t1 = source.get$bottomLeft();
        t2 = target.get$topRight();
        seg2 = new D.Segment(null, null);
        seg2.start = t1;
        seg2.end = t2;
      }
    } else if (J.$eq(t2.right$0(source), t1.right$0(target))) {
      t3 = source.get$topRight();
      t4 = t1.get$bottomRight(target);
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t2 = t2.get$topLeft(source);
      t1 = t1.get$bottomRight(target);
      seg2 = new D.Segment(null, null);
      seg2.start = t2;
      seg2.end = t1;
    } else {
      t3 = t2.get$bottomRight(source);
      t4 = t1.get$bottomRight(target);
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t2 = t2.get$topLeft(source);
      t1 = t1.get$bottomRight(target);
      seg2 = new D.Segment(null, null);
      seg2.start = t2;
      seg2.end = t1;
    }
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg);
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg2);
  },
  "+addSegmentsTargetAboveSource:2:0": 1,
  addSegmentsTargetBesideSource$2: function(source, target) {
    var t1, t2, t3, t4, seg, seg2;
    t1 = J.getInterceptor$x(target);
    t2 = J.getInterceptor$x(source);
    if (J.$gt$n(t1.get$y(target), t2.get$y(source)) === true) {
      t3 = t2.get$topLeft(source);
      t4 = t1.get$topLeft(target);
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      if (J.$lt$n(t1.get$y(target), J.$sub$n(t2.bottom$0(source), 1)) === true) {
        t3 = source.get$bottomLeft();
        t4 = target.get$topRight();
        seg2 = new D.Segment(null, null);
        seg2.start = t3;
        seg2.end = t4;
      } else {
        t3 = t2.get$bottomRight(source);
        t4 = t1.get$topLeft(target);
        seg2 = new D.Segment(null, null);
        seg2.start = t3;
        seg2.end = t4;
      }
    } else if (J.$eq(t2.get$y(source), t1.get$y(target))) {
      t3 = t2.get$topLeft(source);
      t4 = target.get$topRight();
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t4 = source.get$bottomLeft();
      t3 = target.get$topRight();
      seg2 = new D.Segment(null, null);
      seg2.start = t4;
      seg2.end = t3;
    } else {
      t3 = source.get$topRight();
      t4 = target.get$topRight();
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t4 = source.get$bottomLeft();
      t3 = target.get$topRight();
      seg2 = new D.Segment(null, null);
      seg2.start = t4;
      seg2.end = t3;
    }
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg);
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg2);
    if (J.$lt$n(t1.bottom$0(target), t2.bottom$0(source)) === true) {
      t3 = source.get$bottomLeft();
      t4 = target.get$bottomLeft();
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      if (J.$gt$n(J.$sub$n(t1.bottom$0(target), 1), t2.get$y(source)) === true) {
        t2 = t2.get$topLeft(source);
        t1 = t1.get$bottomRight(target);
        seg2 = new D.Segment(null, null);
        seg2.start = t2;
        seg2.end = t1;
      } else {
        t1 = source.get$topRight();
        t2 = target.get$bottomLeft();
        seg2 = new D.Segment(null, null);
        seg2.start = t1;
        seg2.end = t2;
      }
    } else if (J.$eq(t2.bottom$0(source), t1.bottom$0(target))) {
      t3 = source.get$bottomLeft();
      t4 = t1.get$bottomRight(target);
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t2 = t2.get$topLeft(source);
      t1 = t1.get$bottomRight(target);
      seg2 = new D.Segment(null, null);
      seg2.start = t2;
      seg2.end = t1;
    } else {
      t3 = t2.get$bottomRight(source);
      t4 = t1.get$bottomRight(target);
      seg = new D.Segment(null, null);
      seg.start = t3;
      seg.end = t4;
      t2 = t2.get$topLeft(source);
      t1 = t1.get$bottomRight(target);
      seg2 = new D.Segment(null, null);
      seg2.start = t2;
      seg2.end = t1;
    }
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg);
    this.stack.list.push(source);
    this.stack.list.push(target);
    this.stack.list.push(seg2);
  },
  "+addSegmentsTargetBesideSource:2:0": 1,
  cleanup$0: function() {
    var t1 = this.visibleVertices;
    t1.clear$0(t1);
  },
  "+cleanup:0:0": 1,
  createVisibilityGraph$1: function(allObstacles) {
    var t1, t2, t3, t4;
    this.stack.list.push(null);
    this.stack.list.push(null);
    t1 = this.stack;
    t2 = this.start;
    t3 = this.end;
    t4 = new D.Segment(null, null);
    t4.start = t2;
    t4.end = t3;
    t1.list.push(t4);
    for (; t1 = this.stack.list, t2 = t1.length, t2 !== 0;) {
      if (0 >= t2)
        throw H.ioore(t1, 0);
      t1 = H.propertyTypeCast(t1.pop(), "$isSegment");
      t2 = this.stack.list;
      if (0 >= t2.length)
        throw H.ioore(t2, 0);
      t2 = H.propertyTypeCast(t2.pop(), "$isObstacle");
      t3 = this.stack.list;
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      this.addSegment$4(t1, t2, H.propertyTypeCast(t3.pop(), "$isObstacle"), allObstacles);
    }
  },
  "+createVisibilityGraph:1:0": 1,
  determineShortestPath$0: function() {
    var vertex, t1, t2, nextVertex, s;
    if (!this.labelGraph$0())
      return false;
    vertex = this.end;
    this.prevCostRatio = J.$div$n(vertex.get$cost(), this.start.getDistance$1(vertex));
    for (t1 = this.segments; t2 = J.getInterceptor(vertex), !t2.$eq(vertex, this.start); vertex = nextVertex) {
      nextVertex = t2.get$label(vertex);
      if (nextVertex == null)
        return false;
      s = new D.Segment(null, null);
      s.start = nextVertex;
      s.end = vertex;
      t1.push(s);
    }
    D.Collections_reverse(t1);
    return true;
  },
  "+determineShortestPath:0:0": 1,
  fullReset$0: function() {
    var t1 = this.visibleVertices;
    t1.clear$0(t1);
    C.JSArray_methods.set$length(this.segments, 0);
    if (J.$eq(this.prevCostRatio, 0))
      this.threshold = J.$mul$n(this.start.getDistance$1(this.end), 1.13);
    else
      this.threshold = J.$mul$n(J.$mul$n(this.prevCostRatio, 1.04), this.start.getDistance$1(this.end));
    t1 = this.visibleObstacles;
    t1.clear$0(t1);
    this.resetPartial$0();
  },
  "+fullReset:0:0": 1,
  generateShortestPath$1: function(allObstacles) {
    this.createVisibilityGraph$1(allObstacles);
    if (this.visibleVertices._liblib1$_length === 0)
      return false;
    return this.determineShortestPath$0();
  },
  "+generateShortestPath:1:0": 1,
  getBendPoints$0: function() {
    return this.bendpoints;
  },
  "+getBendPoints:0:0": 1,
  getEndPoint$0: function() {
    return this.end;
  },
  "+getEndPoint:0:0": 1,
  getPoints$0: function() {
    return this.points;
  },
  "+getPoints:0:0": 1,
  getStartPoint$0: function() {
    return this.start;
  },
  "+getStartPoint:0:0": 1,
  getSubPath$1: function(currentSegment) {
    var t1, newPath, idx, t2;
    t1 = J.get$start$x(currentSegment);
    newPath = D.Path$(null, this.end, t1);
    idx = J.indexOf$1$asx(this.grownSegments, currentSegment);
    t1 = this.grownSegments;
    t2 = J.getInterceptor$asx(t1);
    newPath.grownSegments = t2.getRange$2(t1, idx, t2.get$length(t1));
    this.grownSegments = J.getRange$2$ax(this.grownSegments, 0, J.$add$ns(idx, 1));
    this.end = currentSegment.get$end();
    this.subPath = newPath;
    return newPath;
  },
  "+getSubPath:1:0": 1,
  invertPriorVertices$1: function(currentSegment) {
    var $stop, i, vertex, t1;
    $stop = J.indexOf$1$asx(this.grownSegments, currentSegment);
    if (typeof $stop !== "number")
      throw H.iae($stop);
    i = 0;
    for (; i < $stop; ++i) {
      vertex = J.$index$asx(this.grownSegments, i).get$end();
      t1 = J.getInterceptor$x(vertex);
      if (J.$eq(t1.get$type(vertex), 1))
        t1.set$type(vertex, 2);
      else
        t1.set$type(vertex, 1);
    }
  },
  "+invertPriorVertices:1:0": 1,
  labelGraph$0: function() {
    var vertex, t1, numPermanentNodes, neighborVertex, neighbors, i, newCost, t2, smallestCost, tempVertex, t3;
    vertex = this.start;
    vertex.set$isPermanent(true);
    for (t1 = this.visibleVertices, numPermanentNodes = 1, neighborVertex = null; numPermanentNodes !== t1._liblib1$_length;) {
      neighbors = vertex.get$neighbors();
      if (typeof neighbors !== "string" && (typeof neighbors !== "object" || neighbors === null || neighbors.constructor !== Array && !H.isJsIndexable(neighbors, neighbors[init.dispatchPropertyName])))
        return this.labelGraph$0$bailout(1, vertex, neighbors, numPermanentNodes, t1, neighborVertex);
      for (i = 0; i < neighbors.length; ++i) {
        neighborVertex = neighbors[i];
        if (neighborVertex.get$isPermanent() !== true) {
          newCost = J.$add$ns(vertex.get$cost(), vertex.getDistance$1(neighborVertex));
          t2 = J.getInterceptor$x(neighborVertex);
          if (t2.get$label(neighborVertex) == null) {
            t2.set$label(neighborVertex, vertex);
            neighborVertex.set$cost(newCost);
          } else if (J.$gt$n(neighborVertex.get$cost(), newCost) === true) {
            t2.set$label(neighborVertex, vertex);
            neighborVertex.set$cost(newCost);
          }
        }
      }
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t2._set._first, smallestCost = 0; t2.moveNext$0();) {
        tempVertex = t2._liblib1$_current;
        if (tempVertex.get$isPermanent() !== true)
          if (J.get$label$x(tempVertex) != null)
            t3 = J.$lt$n(tempVertex.get$cost(), smallestCost) === true || J.$eq(smallestCost, 0);
          else
            t3 = false;
        else
          t3 = false;
        if (t3) {
          smallestCost = tempVertex.get$cost();
          vertex = tempVertex;
        }
      }
      vertex.set$isPermanent(true);
      ++numPermanentNodes;
    }
    return true;
  },
  "+labelGraph:0:0": 1,
  labelGraph$0$bailout: function(state0, vertex, neighbors, numPermanentNodes, t1, neighborVertex) {
    switch (state0) {
      case 0:
        vertex = this.start;
        vertex.set$isPermanent(true);
        t1 = this.visibleVertices;
        numPermanentNodes = 1;
        neighborVertex = null;
      case 1:
        var t2, i, t3, newCost, smallestCost, tempVertex;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(numPermanentNodes !== t1._liblib1$_length))
                  break L0;
                neighbors = vertex.get$neighbors();
              case 1:
                state0 = 0;
                if (neighbors == null)
                  return false;
                t2 = J.getInterceptor$asx(neighbors);
                i = 0;
                while (true) {
                  t3 = t2.get$length(neighbors);
                  if (typeof t3 !== "number")
                    throw H.iae(t3);
                  if (!(i < t3))
                    break;
                  neighborVertex = t2.$index(neighbors, i);
                  if (neighborVertex.get$isPermanent() !== true) {
                    newCost = J.$add$ns(vertex.get$cost(), vertex.getDistance$1(neighborVertex));
                    t3 = J.getInterceptor$x(neighborVertex);
                    if (t3.get$label(neighborVertex) == null) {
                      t3.set$label(neighborVertex, vertex);
                      neighborVertex.set$cost(newCost);
                    } else if (J.$gt$n(neighborVertex.get$cost(), newCost) === true) {
                      t3.set$label(neighborVertex, vertex);
                      neighborVertex.set$cost(newCost);
                    }
                  }
                  ++i;
                }
                for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t2._set._first, smallestCost = 0; t2.moveNext$0();) {
                  tempVertex = t2._liblib1$_current;
                  if (tempVertex.get$isPermanent() !== true)
                    if (J.get$label$x(tempVertex) != null)
                      t3 = J.$lt$n(tempVertex.get$cost(), smallestCost) === true || J.$eq(smallestCost, 0);
                    else
                      t3 = false;
                  else
                    t3 = false;
                  if (t3) {
                    smallestCost = tempVertex.get$cost();
                    vertex = tempVertex;
                  }
                }
                vertex.set$isPermanent(true);
                ++numPermanentNodes;
            }
        return true;
    }
  },
  linkVertices$1: function(segment) {
    var t1 = segment.start;
    if (t1.get$neighbors() == null)
      t1.set$neighbors(P.List_List(null, null));
    t1 = segment.end;
    if (t1.get$neighbors() == null)
      t1.set$neighbors(P.List_List(null, null));
    if (J.contains$1$asx(segment.start.get$neighbors(), segment.end) !== true) {
      J.add$1$ax(segment.start.get$neighbors(), segment.end);
      J.add$1$ax(segment.end.get$neighbors(), segment.start);
    }
    t1 = this.visibleVertices;
    t1.add$1(t1, segment.start);
    t1.add$1(t1, segment.end);
  },
  "+linkVertices:1:0": 1,
  reconnectSubPaths$0: function() {
    var t1, changedSegment, t2, t3;
    t1 = this.subPath;
    if (t1 != null) {
      t1.reconnectSubPaths$0();
      changedSegment = J.removeAt$1$ax(this.subPath.grownSegments, 0);
      t1 = this.grownSegments;
      t2 = J.getInterceptor$asx(t1);
      t2.$index(t1, J.$sub$n(t2.get$length(t1), 1)).set$end(changedSegment.get$end());
      J.addAll$1$ax(this.grownSegments, this.subPath.grownSegments);
      t1 = this.subPath.points;
      t1.bounds = null;
      C.JSArray_methods.removeAt$1(t1.points, 0);
      t1 = this.points;
      t2 = t1.points;
      t3 = t2.length;
      t1.bounds = null;
      C.JSArray_methods.removeAt$1(t2, t3 - 1);
      t3 = this.points;
      t3.addAll$1(t3, this.subPath.points);
      t3 = this.visibleObstacles;
      t3.addAll$1(t3, this.subPath.visibleObstacles);
      this.end = this.subPath.end;
      this.subPath = null;
    }
  },
  "+reconnectSubPaths:0:0": 1,
  refreshExcludedObstacles$1: function(allObstacles) {
    var t1, i, o, t2;
    t1 = this.excludedObstacles;
    C.JSArray_methods.set$length(t1, 0);
    for (i = 0; i < allObstacles.length; ++i) {
      o = allObstacles[i];
      o.set$exclude(false);
      t2 = J.getInterceptor$x(o);
      if (t2.containsPoint$1(o, this.start) === true)
        if (o.containsProper$1(this.start) === true)
          o.set$exclude(true);
      if (t2.containsPoint$1(o, this.end) === true)
        if (o.containsProper$1(this.end) === true)
          o.set$exclude(true);
      if (o.get$exclude() === true && !C.JSArray_methods.contains$1(t1, o))
        t1.push(o);
    }
  },
  "+refreshExcludedObstacles:1:0": 1,
  resetPartial$0: function() {
    this.isMarked = false;
    this.isInverted = false;
    this.subPath = null;
    this.isDirty = false;
    J.clear$0$ax(this.grownSegments);
    var t1 = this.points;
    t1.bounds = null;
    C.JSArray_methods.set$length(t1.points, 0);
  },
  "+resetPartial:0:0": 1,
  setEndPoint$1: function(end) {
    var t1, t2, t3;
    t1 = J.getInterceptor(end);
    if (t1.$eq(end, this.end))
      return;
    t2 = t1.get$x(end);
    t1 = t1.get$y(end);
    t3 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t2, t1);
    t3.Vertex$3(t2, t1, null);
    this.end = t3;
    this.isDirty = true;
  },
  "+setEndPoint:1:0": 1,
  setStartPoint$1: function(start) {
    var t1, t2, t3;
    t1 = J.getInterceptor(start);
    if (t1.$eq(start, this.start))
      return;
    t2 = t1.get$x(start);
    t1 = t1.get$y(start);
    t3 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t2, t1);
    t3.Vertex$3(t2, t1, null);
    this.start = t3;
    this.isDirty = true;
  },
  "+setStartPoint:1:0": 1,
  testAndSet$1: function(obs) {
    var t1, t2, seg1, seg2, s, current, next, t3, t4, t5, t6, t7, t8, t9, t10;
    if (this.isDirty)
      return false;
    if (C.JSArray_methods.contains$1(this.excludedObstacles, obs))
      return false;
    t1 = obs.topLeft;
    t2 = obs.bottomRight;
    seg1 = new D.Segment(null, null);
    seg1.start = t1;
    seg1.end = t2;
    t2 = obs.topRight;
    t1 = obs.bottomLeft;
    seg2 = new D.Segment(null, null);
    seg2.start = t2;
    seg2.end = t1;
    for (s = 0; t1 = this.points.points, s < t1.length - 1;) {
      current = t1[s];
      ++s;
      next = t1[s];
      t1 = J.getInterceptor$x(current);
      t2 = t1.get$x(current);
      t3 = t1.get$y(current);
      t4 = J.getInterceptor$x(next);
      t5 = t4.get$x(next);
      t6 = t4.get$y(next);
      t7 = seg1.start;
      t8 = J.getInterceptor$x(t7);
      t9 = t8.get$x(t7);
      t7 = t8.get$y(t7);
      t8 = seg1.end;
      t10 = J.getInterceptor$x(t8);
      if (!D.Geometry_linesIntersect(t9, t7, t10.get$x(t8), t10.get$y(t8), t2, t3, t5, t6)) {
        t2 = t1.get$x(current);
        t3 = t1.get$y(current);
        t5 = t4.get$x(next);
        t6 = t4.get$y(next);
        t7 = seg2.start;
        t8 = J.getInterceptor$x(t7);
        t9 = t8.get$x(t7);
        t7 = t8.get$y(t7);
        t8 = seg2.end;
        t10 = J.getInterceptor$x(t8);
        t1 = D.Geometry_linesIntersect(t9, t7, t10.get$x(t8), t10.get$y(t8), t2, t3, t5, t6) || obs.contains$2(obs, t1.get$x(current), t1.get$y(current)) || obs.contains$2(obs, t4.get$x(next), t4.get$y(next));
      } else
        t1 = true;
      if (t1) {
        this.isDirty = true;
        return true;
      }
    }
    return false;
  },
  "+testAndSet:1:0": 1,
  Path$3$data$end$start: function(data, end, start) {
    var t1, t2, t3;
    t1 = J.getInterceptor(start);
    if (typeof start === "object" && start !== null && !!t1.$isPoint) {
      t1 = start.x;
      t2 = start.y;
      t3 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t1, t2);
      t3.Vertex$3(t1, t2, null);
      t1 = t3;
    } else
      t1 = start;
    this.start = t1;
    t1 = J.getInterceptor(end);
    if (typeof end === "object" && end !== null && !!t1.$isPoint) {
      t1 = end.x;
      t2 = end.y;
      t3 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t1, t2);
      t3.Vertex$3(t1, t2, null);
      t1 = t3;
    } else
      t1 = end;
    this.end = t1;
  },
  static: {
"": "Path_CURRENT-,Path_EPSILON-,Path_NEXT-,Path_OVAL_CONSTANT-",
Path$: function(data, end, start) {
  var t1, t2, t3;
  t1 = P.List_List(null, null);
  t2 = P.List_List(null, null);
  t3 = P.List_List(null, D.Point);
  H.setRuntimeTypeInfo(t3, [D.Point]);
  t3 = new D.Path(null, data, t1, t2, true, false, false, new D.PointList(t3, null), 0, P.List_List(null, null), new D.SegmentStack(P.List_List(null, null)), null, null, null, 0, P.LinkedHashSet_LinkedHashSet(null, null, null, null), P.LinkedHashSet_LinkedHashSet(null, null, null, null));
  t3.Path$3$data$end$start(data, end, start);
  return t3;
},

"+new Path:0:3:data:end:start": 1,

"*": [0, 0, 0]}

},

"+Path": [],

Point: {"": "Object;x*-,y*-",
  clone$0: function(_) {
    return new D.Point(this.x, this.y);
  },
  "+clone:0:0": 1,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor(o);
    if (typeof o === "object" && o !== null && !!t1.$isPoint)
      return J.$eq(o.x, this.x) && J.$eq(o.y, this.y);
    return false;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return J.$xor$n(J.$mul$n(this.x, this.y), J.$add$ns(this.x, this.y));
  },
  "+hashCode": 1,
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  "+toString:0:0": 1,
  getDistance$1: function(p) {
    var t1, dx, dy;
    t1 = J.getInterceptor$x(p);
    dx = J.$sub$n(t1.get$x(p), this.x);
    dy = J.$sub$n(t1.get$y(p), this.y);
    t1 = J.toDouble$0$n(J.$add$ns(J.$mul$n(dx, dx), J.$mul$n(dy, dy)));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    return Math.sqrt(t1);
  },
  "+getDistance:1:0": 1,
  transpose$0: function() {
    var t = this.x;
    this.x = this.y;
    this.y = t;
    return this;
  },
  "+transpose:0:0": 1,
  $isPoint: true
},

"+Point": [],

PointList: {"": "Object;points>-,bounds-",
  addAll$1: function(_, source) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(J.get$points$x(source)), t2 = this.points; t1.moveNext$0() === true;)
      t2.push(J.clone$0$x(t1.get$current()));
  },
  "+addAll:1:0": 1,
  addPoint$1: function(p) {
    this.points.push(J.clone$0$x(p));
  },
  "+addPoint:1:0": 1,
  get$first: function(_) {
    return C.JSArray_methods.get$first(this.points);
  },
  "+first": 1,
  get$last: function(_) {
    return C.JSArray_methods.get$last(this.points);
  },
  "+last": 1,
  $index: function(_, i) {
    var t1 = this.points;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  "+[]:1:0": 1,
  removePoint$1: function(index) {
    this.bounds = null;
    return C.JSArray_methods.removeAt$1(this.points, index);
  },
  "+removePoint:1:0": 1,
  get$length: function(_) {
    return this.points.length;
  },
  "+length": 1,
  transpose$0: function() {
    for (var t1 = this.points, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      t1._liblib$_current.transpose$0();
  },
  "+transpose:0:0": 1
},

"+PointList": [],

PopulateRanks: {"": "GraphVisitor;changes<-",
  visit$1: function(g) {
    var t1, i, t2, node, j, e;
    t1 = g.forestRoot;
    if (t1 != null) {
      for (i = t1.outgoing.list.length - 1; t1 = g.forestRoot, i >= 0; --i) {
        t1 = t1.outgoing.list;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        g.removeEdge$1(t1[i]);
      }
      g.removeNode$1(t1);
    }
    t1 = D.Rank;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    g.ranks = new D.RankList(t2);
    for (t1 = g.nodes, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      node = t1._liblib$_current;
      t2 = g.ranks;
      J.add$1$ax(t2.$index(t2, node.get$rank()), node);
    }
    for (t1 = this.changes, i = 0; t2 = g.nodes.list, i < t2.length; ++i) {
      node = t2[i];
      j = 0;
      while (true) {
        t2 = J.get$length$asx(node.get$outgoing());
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(j < t2))
          break;
        e = J.$index$asx(node.get$outgoing(), j);
        if (J.$gt$n(J.get$length$asx(e), 1) === true)
          t1.push(D.VirtualNodeCreation$(e, g));
        else
          ++j;
      }
    }
  },
  "+visit:1:0": 1,
  revisit$1: function(g) {
    var t1, t2, prev, cur;
    for (t1 = g.ranks, t1 = t1.get$iterator(t1); t1.moveNext$0();)
      for (t2 = J.get$iterator$ax(t1._liblib$_current), prev = null; t2.moveNext$0() === true; prev = cur) {
        cur = t2.get$current();
        J.set$left$x(cur, prev);
        if (prev != null)
          J.set$right$x(prev, cur);
      }
    for (t1 = this.changes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      t1._liblib$_current.revert$0();
  },
  "+revisit:1:0": 1
},

"+PopulateRanks": [],

Rank: {"": "NodeList;bottomPadding@-,height*-,location-,hash-,topPadding@-,total>-,list-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  assignIndices$0: function() {
    var t1, node, mag;
    this.total = 0;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      node = t1._liblib$_current;
      mag = P.min(P.max(1, J.$add$ns(J.get$length$asx(node.get$incoming()), J.get$length$asx(node.get$outgoing()))), 5);
      this.total = this.total + mag;
      J.set$index$x(node, this.total);
      this.total = this.total + mag;
    }
  },
  "+assignIndices:0:0": 1,
  count$0: function() {
    return this.list.length;
  },
  "+count:0:0": 1,
  get$count: function() {
    return new D.Bound_count_Rank(this, D.Rank.prototype.count$0, null, "count$0");
  },
  get$hashCode: function(_) {
    return this.hash;
  },
  "+hashCode": 1,
  setDimensions$2: function($location, rowHeight) {
    var t1, n, t2;
    this.height = rowHeight;
    this.location = $location;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      n = t1._liblib$_current;
      t2 = J.getInterceptor$x(n);
      t2.set$y(n, $location);
      t2.set$height(n, rowHeight);
    }
  },
  "+setDimensions:2:0": 1,
  $isRank: true
},

"+Rank": [],

RankAssignmentSolver: {"": "SpanningTreeVisitor;graph-,spanningTree-,searchDirection-",
  depthFirstCutValue$2: function(edge, count) {
    var n, t1, multiplier, list, cutvalue, i, t2, e, t3;
    if (typeof count !== "number")
      return this.depthFirstCutValue$2$bailout(1, edge, count);
    n = this.getTreeTail$1(edge);
    t1 = n.get$workingInts();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.depthFirstCutValue$2$bailout(2, edge, count, n, t1);
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1[0] = count;
    multiplier = J.$eq(J.get$target$x(edge), n) ? 1 : -1;
    list = n.get$outgoing();
    t1 = J.getInterceptor$asx(list);
    cutvalue = 0;
    i = 0;
    while (true) {
      t2 = t1.get$length(list);
      if (t2 !== (t2 | 0))
        return this.depthFirstCutValue$2$bailout(3, edge, count, n, t1, i, cutvalue, multiplier, list, t2);
      if (!(i < t2))
        break;
      e = t1.$index(list, i);
      if (e.get$tree() === true && !J.$eq(e, edge)) {
        count = this.depthFirstCutValue$2(e, count);
        if (typeof count !== "number")
          return this.depthFirstCutValue$2$bailout(4, edge, count, n, t1, i, cutvalue, multiplier, list, 0, e);
        t2 = e.get$cut();
        if (typeof t2 !== "number")
          return this.depthFirstCutValue$2$bailout(5, edge, count, n, t1, i, cutvalue, multiplier, list, t2, e);
        t3 = e.get$weight();
        if (typeof t3 !== "number")
          return this.depthFirstCutValue$2$bailout(6, edge, count, n, t1, i, cutvalue, multiplier, list, t2, 0, t3);
        cutvalue += (t2 - t3) * multiplier;
      } else {
        t2 = e.get$weight();
        if (typeof t2 !== "number")
          return this.depthFirstCutValue$2$bailout(7, edge, count, n, t1, i, cutvalue, multiplier, list, t2);
        cutvalue -= t2 * multiplier;
      }
      ++i;
    }
    list = n.get$incoming();
    t1 = J.getInterceptor$asx(list);
    i = 0;
    while (true) {
      t2 = t1.get$length(list);
      if (t2 !== (t2 | 0))
        return this.depthFirstCutValue$2$bailout(8, edge, count, n, t1, i, cutvalue, multiplier, list, t2);
      if (!(i < t2))
        break;
      e = t1.$index(list, i);
      if (e.get$tree() === true && !J.$eq(e, edge)) {
        count = this.depthFirstCutValue$2(e, count);
        if (typeof count !== "number")
          return this.depthFirstCutValue$2$bailout(9, edge, count, n, t1, i, cutvalue, multiplier, list, 0, e);
        t2 = e.get$cut();
        if (typeof t2 !== "number")
          return this.depthFirstCutValue$2$bailout(10, edge, count, n, t1, i, cutvalue, multiplier, list, t2, e);
        t3 = e.get$weight();
        if (typeof t3 !== "number")
          return this.depthFirstCutValue$2$bailout(11, edge, count, n, t1, i, cutvalue, multiplier, list, t2, 0, t3);
        cutvalue -= (t2 - t3) * multiplier;
      } else {
        t2 = e.get$weight();
        if (typeof t2 !== "number")
          return this.depthFirstCutValue$2$bailout(12, edge, count, n, t1, i, cutvalue, multiplier, list, t2);
        cutvalue += t2 * multiplier;
      }
      ++i;
    }
    edge.set$cut(cutvalue);
    if (cutvalue < 0) {
      t1 = this.spanningTree;
      t1.add$1(t1, edge);
    }
    t1 = n.get$workingInts();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.depthFirstCutValue$2$bailout(13, 0, count, 0, t1);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t1[1] = count;
    return count + 1;
  },
  "+depthFirstCutValue:2:0": 1,
  depthFirstCutValue$2$bailout: function(state0, edge, count, n, t1, i, cutvalue, multiplier, list, t2, e, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        n = this.getTreeTail$1(edge);
        t1 = n.get$workingInts();
      case 2:
        state0 = 0;
        J.$indexSet$ax(t1, 0, count);
        multiplier = J.$eq(J.get$target$x(edge), n) ? 1 : -1;
        list = n.get$outgoing();
        t1 = J.getInterceptor$asx(list);
        cutvalue = 0;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(list);
              case 3:
                state0 = 0;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                if (!(i < t2))
                  break L0;
                e = t1.$index(list, i);
              default:
                if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && e.get$tree() === true && !J.$eq(e, edge))
                  switch (state0) {
                    case 0:
                      count = this.depthFirstCutValue$2(e, count);
                    case 4:
                      state0 = 0;
                      t2 = e.get$cut();
                    case 5:
                      state0 = 0;
                      t3 = e.get$weight();
                    case 6:
                      state0 = 0;
                      t3 = J.$mul$n(J.$sub$n(t2, t3), multiplier);
                      if (typeof t3 !== "number")
                        throw H.iae(t3);
                      cutvalue += t3;
                  }
                else
                  switch (state0) {
                    case 0:
                      t2 = e.get$weight();
                    case 7:
                      state0 = 0;
                      t2 = J.$mul$n(t2, multiplier);
                      if (typeof t2 !== "number")
                        throw H.iae(t2);
                      cutvalue -= t2;
                  }
                ++i;
            }
        list = n.get$incoming();
        t1 = J.getInterceptor$asx(list);
        i = 0;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(list);
              case 8:
                state0 = 0;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                if (!(i < t2))
                  break L1;
                e = t1.$index(list, i);
              default:
                if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && e.get$tree() === true && !J.$eq(e, edge))
                  switch (state0) {
                    case 0:
                      count = this.depthFirstCutValue$2(e, count);
                    case 9:
                      state0 = 0;
                      t2 = e.get$cut();
                    case 10:
                      state0 = 0;
                      t3 = e.get$weight();
                    case 11:
                      state0 = 0;
                      t3 = J.$mul$n(J.$sub$n(t2, t3), multiplier);
                      if (typeof t3 !== "number")
                        throw H.iae(t3);
                      cutvalue -= t3;
                  }
                else
                  switch (state0) {
                    case 0:
                      t2 = e.get$weight();
                    case 12:
                      state0 = 0;
                      t2 = J.$mul$n(t2, multiplier);
                      if (typeof t2 !== "number")
                        throw H.iae(t2);
                      cutvalue += t2;
                  }
                ++i;
            }
        edge.set$cut(cutvalue);
        if (cutvalue < 0) {
          t1 = this.spanningTree;
          t1.add$1(t1, edge);
        }
        t1 = n.get$workingInts();
      case 13:
        state0 = 0;
        J.$indexSet$ax(t1, 1, count);
        return J.$add$ns(count, 1);
    }
  },
  enter$1: function(branch) {
    var t1, incoming, result, minSlack, i, t2, t3, n, t4, t5, edges, j, e;
    t1 = branch.get$workingData();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.enter$1$bailout(1, branch, t1);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    incoming = !J.$eq(J.get$target$x(t1[1]), branch);
    for (t1 = this.searchDirection, result = null, minSlack = 1073741823, i = 0; t2 = this.graph.nodes.list, t3 = t2.length, i < t3; ++i) {
      if (t1)
        n = t2[i];
      else {
        t4 = t3 - 1 - i;
        if (t4 < 0)
          throw H.ioore(t2, t4);
        n = t2[t4];
      }
      t2 = branch.get$workingInts();
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
        return this.enter$1$bailout(2, branch, t1, n, i, result, minSlack, incoming, t2);
      t3 = t2.length;
      if (0 >= t3)
        throw H.ioore(t2, 0);
      t4 = t2[0];
      if (typeof t4 !== "number")
        return this.enter$1$bailout(3, branch, t1, n, i, result, minSlack, incoming, t4);
      t5 = n.get$workingInts();
      if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !H.isJsIndexable(t5, t5[init.dispatchPropertyName])))
        return this.enter$1$bailout(4, branch, t1, n, i, result, minSlack, incoming, t4, t5);
      if (1 >= t5.length)
        throw H.ioore(t5, 1);
      t5 = t5[1];
      if (typeof t5 !== "number")
        return this.enter$1$bailout(5, branch, t1, n, i, result, minSlack, incoming, t4, t5);
      if (t4 <= t5) {
        if (1 >= t3)
          throw H.ioore(t2, 1);
        t2 = t2[1];
        if (typeof t2 !== "number")
          return this.enter$1$bailout(9, branch, t1, n, i, result, minSlack, incoming, t5, t2);
        t2 = t5 <= t2;
      } else
        t2 = false;
      if (t2) {
        edges = incoming ? n.get$incoming() : n.get$outgoing();
        t2 = J.getInterceptor$asx(edges);
        j = 0;
        while (true) {
          t3 = t2.get$length(edges);
          if (t3 !== (t3 | 0))
            return this.enter$1$bailout(10, branch, t1, n, i, result, minSlack, incoming, t2, t3, j, edges);
          if (!(j < t3))
            break;
          e = t2.$index(edges, j);
          t3 = e.opposite$1(n);
          t4 = branch.get$workingInts();
          if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !H.isJsIndexable(t4, t4[init.dispatchPropertyName])))
            return this.enter$1$bailout(11, branch, t1, n, i, result, minSlack, incoming, t2, t3, j, edges, e, t4);
          if (0 >= t4.length)
            throw H.ioore(t4, 0);
          t4 = t4[0];
          if (typeof t4 !== "number")
            return this.enter$1$bailout(12, branch, t1, n, i, result, minSlack, incoming, t2, t3, j, edges, e, t4);
          t5 = J.$index$asx(t3.get$workingInts(), 1);
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (t4 <= t5) {
            t3 = J.$index$asx(t3.get$workingInts(), 1);
            t4 = branch.get$workingInts();
            if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !H.isJsIndexable(t4, t4[init.dispatchPropertyName])))
              return this.enter$1$bailout(13, branch, t1, n, i, result, minSlack, incoming, t2, t3, j, edges, e, t4);
            if (1 >= t4.length)
              throw H.ioore(t4, 1);
            t4 = J.$le$n(t3, t4[1]) === true;
            t3 = t4;
          } else
            t3 = false;
          if (!t3 && e.get$tree() !== true && J.$lt$n(e.get$slack(), minSlack) === true) {
            minSlack = e.get$slack();
            result = e;
          }
          if (typeof minSlack !== "number")
            return this.enter$1$bailout(14, branch, t1, n, i, result, minSlack, incoming, t2, 0, j, edges);
          ++j;
        }
      }
    }
    return result;
  },
  "+enter:1:0": 1,
  enter$1$bailout: function(state0, branch, t1, n, i, result, minSlack, incoming, t2, t3, j, edges, e, t4) {
    switch (state0) {
      case 0:
        t1 = branch.get$workingData();
      case 1:
        state0 = 0;
        incoming = !J.$eq(J.get$target$x(J.$index$asx(t1, 1)), branch);
        t1 = this.searchDirection;
        result = null;
        minSlack = 1073741823;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.graph.nodes.list;
                t3 = t2.length;
                if (!(i < t3))
                  break L0;
                if (t1)
                  n = t2[i];
                else {
                  t4 = t3 - 1 - i;
                  if (t4 < 0)
                    throw H.ioore(t2, t4);
                  n = t2[t4];
                }
                t2 = branch.get$workingInts();
              case 2:
                state0 = 0;
                t2 = J.$index$asx(t2, 0);
              case 3:
                state0 = 0;
                t3 = n.get$workingInts();
              case 4:
                state0 = 0;
                t3 = J.$index$asx(t3, 1);
              case 5:
                state0 = 0;
              default:
                if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && J.$le$n(t2, t3) === true)
                  switch (state0) {
                    case 0:
                      t2 = n.get$workingInts();
                    case 6:
                      state0 = 0;
                      t2 = J.$index$asx(t2, 1);
                    case 7:
                      state0 = 0;
                      t3 = branch.get$workingInts();
                    case 8:
                      state0 = 0;
                      t3 = J.$index$asx(t3, 1);
                    case 9:
                      state0 = 0;
                      t3 = J.$le$n(t2, t3) === true;
                      t2 = t3;
                  }
                else
                  t2 = false;
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
                if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      edges = incoming ? n.get$incoming() : n.get$outgoing();
                      t2 = J.getInterceptor$asx(edges);
                      j = 0;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t3 = t2.get$length(edges);
                            case 10:
                              state0 = 0;
                              if (typeof t3 !== "number")
                                throw H.iae(t3);
                              if (!(j < t3))
                                break L1;
                              e = t2.$index(edges, j);
                              t3 = e.opposite$1(n);
                              t4 = branch.get$workingInts();
                            case 11:
                              state0 = 0;
                              t4 = J.$index$asx(t4, 0);
                            case 12:
                              state0 = 0;
                            case 13:
                              if (state0 === 13 || state0 === 0 && J.$le$n(t4, J.$index$asx(t3.get$workingInts(), 1)) === true)
                                switch (state0) {
                                  case 0:
                                    t3 = J.$index$asx(t3.get$workingInts(), 1);
                                    t4 = branch.get$workingInts();
                                  case 13:
                                    state0 = 0;
                                    t4 = J.$le$n(t3, J.$index$asx(t4, 1)) === true;
                                    t3 = t4;
                                }
                              else
                                t3 = false;
                              if (!t3 && e.get$tree() !== true && J.$lt$n(e.get$slack(), minSlack) === true) {
                                minSlack = e.get$slack();
                                result = e;
                              }
                            case 14:
                              state0 = 0;
                              ++j;
                          }
                  }
              case 15:
                state0 = 0;
                ++i;
            }
        return result;
    }
  },
  initCutValues$0: function() {
    var t1, root, t2, i, e;
    t1 = this.graph.nodes.list;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    root = t1[0];
    t1 = D.Edge;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    this.spanningTree = new D.EdgeList(t2);
    J.$indexSet$ax(root.get$workingInts(), 0, 1);
    J.$indexSet$ax(root.get$workingInts(), 1, 1);
    i = 0;
    while (true) {
      t1 = J.get$length$asx(root.get$outgoing());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      c$0: {
        e = J.$index$asx(root.get$outgoing(), i);
        if (J.contains$1$asx(J.$index$asx(root.get$workingData(), 0), e) !== true)
          break c$0;
        t1 = this.depthFirstCutValue$2(e, J.$index$asx(root.get$workingInts(), 1));
        J.$indexSet$ax(root.get$workingInts(), 1, t1);
      }
      ++i;
    }
    i = 0;
    while (true) {
      t1 = J.get$length$asx(root.get$incoming());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      c$0: {
        e = J.$index$asx(root.get$incoming(), i);
        if (J.contains$1$asx(J.$index$asx(root.get$workingData(), 0), e) !== true)
          break c$0;
        t1 = this.depthFirstCutValue$2(e, J.$index$asx(root.get$workingInts(), 1));
        J.$indexSet$ax(root.get$workingInts(), 1, t1);
      }
      ++i;
    }
  },
  "+initCutValues:0:0": 1,
  leave$0: function() {
    var result, minCut, weight, i, t1, e;
    for (result = null, minCut = 0, weight = -1, i = 0; t1 = this.spanningTree.list, i < t1.length; ++i) {
      e = t1[i];
      if (J.$lt$n(e.get$cut(), minCut) === true) {
        minCut = e.get$cut();
        weight = e.get$weight();
        result = e;
      } else {
        if (J.$eq(e.get$cut(), minCut) && J.$gt$n(e.get$weight(), weight) === true) {
          weight = e.get$weight();
          result = e;
        }
        if (typeof weight !== "number")
          return this.leave$0$bailout(1, i, result, minCut, weight);
      }
      if (typeof weight !== "number")
        return this.leave$0$bailout(3, i, result, minCut, weight);
      if (typeof minCut !== "number")
        return this.leave$0$bailout(2, i, result, minCut, weight);
    }
    return result;
  },
  "+leave:0:0": 1,
  leave$0$bailout: function(state0, i, result, minCut, weight) {
    switch (state0) {
      case 0:
        result = null;
        minCut = 0;
        weight = -1;
        i = 0;
      default:
        var t1, e;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.spanningTree.list;
                if (!(i < t1.length))
                  break L0;
                e = t1[i];
              case 1:
                if (state0 === 0 && J.$lt$n(e.get$cut(), minCut) === true) {
                  minCut = e.get$cut();
                  weight = e.get$weight();
                  result = e;
                } else
                  switch (state0) {
                    case 0:
                      if (J.$eq(e.get$cut(), minCut) && J.$gt$n(e.get$weight(), weight) === true) {
                        weight = e.get$weight();
                        result = e;
                      }
                    case 1:
                      state0 = 0;
                  }
              case 3:
                state0 = 0;
              case 2:
                state0 = 0;
                ++i;
            }
        return result;
    }
  },
  networkSimplexLoop$0: function() {
    var count, leave, leaveTail, leaveHead, enter, t1, i, enterTail, enterHead, commonAncestor;
    count = 0;
    while (true) {
      leave = this.leave$0();
      if (!(leave != null && count < 900))
        break;
      ++count;
      leaveTail = this.getTreeTail$1(leave);
      leaveHead = this.getTreeHead$1(leave);
      enter = this.enter$1(leaveTail);
      if (enter == null)
        break;
      J.remove$1$ax(J.$index$asx(leaveHead.get$workingData(), 0), leave);
      J.$indexSet$ax(leaveTail.get$workingData(), 1, null);
      leave.set$tree(false);
      t1 = this.spanningTree.list;
      i = C.JSArray_methods.indexOf$1(t1, leave);
      if (!J.$eq(i, -1))
        C.JSArray_methods.removeAt$1(t1, i);
      t1 = J.getInterceptor$x(enter);
      enterTail = t1.get$source(enter);
      if (!(J.$le$n(J.$index$asx(leaveTail.get$workingInts(), 0), J.$index$asx(enterTail.get$workingInts(), 1)) === true && J.$le$n(J.$index$asx(enterTail.get$workingInts(), 1), J.$index$asx(leaveTail.get$workingInts(), 1)) === true))
        enterTail = t1.get$target(enter);
      enterHead = enter.opposite$1(enterTail);
      this.updateSubgraph$1(enterTail);
      J.add$1$ax(J.$index$asx(enterHead.get$workingData(), 0), enter);
      J.$indexSet$ax(enterTail.get$workingData(), 1, enter);
      enter.set$tree(true);
      this.repairCutValues$1(enter);
      commonAncestor = enterHead;
      while (true) {
        if (!!(J.$le$n(J.$index$asx(commonAncestor.get$workingInts(), 0), J.$index$asx(leaveHead.get$workingInts(), 1)) === true && J.$le$n(J.$index$asx(leaveHead.get$workingInts(), 1), J.$index$asx(commonAncestor.get$workingInts(), 1)) === true))
          break;
        this.repairCutValues$1(J.$index$asx(commonAncestor.get$workingData(), 1));
        commonAncestor = this.getTreeParent$1(commonAncestor);
      }
      for (; !J.$eq(leaveHead, commonAncestor);) {
        this.repairCutValues$1(J.$index$asx(leaveHead.get$workingData(), 1));
        leaveHead = this.getTreeParent$1(leaveHead);
      }
      this.updateMinMax$2(commonAncestor, J.$index$asx(commonAncestor.get$workingInts(), 0));
      this.tightenEdge$1(enter);
    }
  },
  "+networkSimplexLoop:0:0": 1,
  repairCutValues$1: function(edge) {
    var t1, i, n, multiplier, list, cutvalue, t2, e, t3;
    t1 = this.spanningTree.list;
    i = C.JSArray_methods.indexOf$1(t1, edge);
    if (typeof i !== "number")
      return this.repairCutValues$1$bailout(1, edge, t1, i);
    if (i !== -1)
      C.JSArray_methods.removeAt$1(t1, i);
    n = this.getTreeTail$1(edge);
    multiplier = J.$eq(J.get$target$x(edge), n) ? 1 : -1;
    list = n.get$outgoing();
    t1 = J.getInterceptor$asx(list);
    cutvalue = 0;
    i = 0;
    while (true) {
      t2 = t1.get$length(list);
      if (t2 !== (t2 | 0))
        return this.repairCutValues$1$bailout(2, edge, t1, i, cutvalue, multiplier, list, n, t2);
      if (!(i < t2))
        break;
      e = t1.$index(list, i);
      t2 = e.get$tree() === true && !J.$eq(e, edge);
      t3 = e.get$weight();
      if (typeof t3 !== "number")
        return this.repairCutValues$1$bailout(3, edge, t1, i, cutvalue, multiplier, list, n, t2, t3, e);
      if (t2) {
        t2 = e.get$cut();
        if (typeof t2 !== "number")
          return this.repairCutValues$1$bailout(4, edge, t1, i, cutvalue, multiplier, list, n, t2, t3);
        cutvalue += (t2 - t3) * multiplier;
      } else
        cutvalue -= t3 * multiplier;
      ++i;
    }
    list = n.get$incoming();
    t1 = J.getInterceptor$asx(list);
    i = 0;
    while (true) {
      t2 = t1.get$length(list);
      if (t2 !== (t2 | 0))
        return this.repairCutValues$1$bailout(5, edge, t1, i, cutvalue, multiplier, list, 0, t2);
      if (!(i < t2))
        break;
      e = t1.$index(list, i);
      t2 = e.get$tree() === true && !J.$eq(e, edge);
      t3 = e.get$weight();
      if (typeof t3 !== "number")
        return this.repairCutValues$1$bailout(6, edge, t1, i, cutvalue, multiplier, list, 0, t2, t3, e);
      if (t2) {
        t2 = e.get$cut();
        if (typeof t2 !== "number")
          return this.repairCutValues$1$bailout(7, edge, t1, i, cutvalue, multiplier, list, 0, t2, t3);
        cutvalue -= (t2 - t3) * multiplier;
      } else
        cutvalue += t3 * multiplier;
      ++i;
    }
    edge.set$cut(cutvalue);
    if (cutvalue < 0) {
      t1 = this.spanningTree;
      t1.add$1(t1, edge);
    }
  },
  "+repairCutValues:1:0": 1,
  repairCutValues$1$bailout: function(state0, edge, t1, i, cutvalue, multiplier, list, n, t2, t3, e) {
    switch (state0) {
      case 0:
        t1 = this.spanningTree.list;
        i = C.JSArray_methods.indexOf$1(t1, edge);
      case 1:
        state0 = 0;
        if (!J.$eq(i, -1))
          C.JSArray_methods.removeAt$1(t1, i);
        n = this.getTreeTail$1(edge);
        multiplier = J.$eq(J.get$target$x(edge), n) ? 1 : -1;
        list = n.get$outgoing();
        t1 = J.getInterceptor$asx(list);
        cutvalue = 0;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(list);
              case 2:
                state0 = 0;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                if (!(i < t2))
                  break L0;
                e = t1.$index(list, i);
                t2 = e.get$tree() === true && !J.$eq(e, edge);
                t3 = e.get$weight();
              case 3:
                state0 = 0;
              case 4:
                if (state0 === 4 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      t2 = e.get$cut();
                    case 4:
                      state0 = 0;
                      t3 = J.$mul$n(J.$sub$n(t2, t3), multiplier);
                      if (typeof t3 !== "number")
                        throw H.iae(t3);
                      cutvalue += t3;
                  }
                else {
                  t2 = J.$mul$n(t3, multiplier);
                  if (typeof t2 !== "number")
                    throw H.iae(t2);
                  cutvalue -= t2;
                }
                ++i;
            }
        list = n.get$incoming();
        t1 = J.getInterceptor$asx(list);
        i = 0;
      case 5:
      case 6:
      case 7:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(list);
              case 5:
                state0 = 0;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                if (!(i < t2))
                  break L1;
                e = t1.$index(list, i);
                t2 = e.get$tree() === true && !J.$eq(e, edge);
                t3 = e.get$weight();
              case 6:
                state0 = 0;
              case 7:
                if (state0 === 7 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      t2 = e.get$cut();
                    case 7:
                      state0 = 0;
                      t3 = J.$mul$n(J.$sub$n(t2, t3), multiplier);
                      if (typeof t3 !== "number")
                        throw H.iae(t3);
                      cutvalue -= t3;
                  }
                else {
                  t2 = J.$mul$n(t3, multiplier);
                  if (typeof t2 !== "number")
                    throw H.iae(t2);
                  cutvalue += t2;
                }
                ++i;
            }
        edge.set$cut(cutvalue);
        if (cutvalue < 0) {
          t1 = this.spanningTree;
          t1.add$1(t1, edge);
        }
    }
  },
  tightenEdge$1: function(edge) {
    var tail, delta, i, t1, n, t2, t3, t4;
    tail = this.getTreeTail$1(edge);
    delta = edge.get$slack();
    if (typeof delta !== "number")
      return this.tightenEdge$1$bailout(1, tail, delta, edge);
    if (J.$eq(tail, J.get$target$x(edge)))
      delta = -delta;
    for (i = 0; t1 = this.graph.nodes.list, i < t1.length; ++i) {
      n = t1[i];
      t1 = tail.get$workingInts();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.tightenEdge$1$bailout(2, tail, delta, 0, i, n, t1);
      t2 = t1.length;
      if (0 >= t2)
        throw H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof t3 !== "number")
        return this.tightenEdge$1$bailout(3, tail, delta, 0, i, n, t3);
      t4 = n.get$workingInts();
      if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !H.isJsIndexable(t4, t4[init.dispatchPropertyName])))
        return this.tightenEdge$1$bailout(4, tail, delta, 0, i, n, t3, t4);
      if (1 >= t4.length)
        throw H.ioore(t4, 1);
      t4 = t4[1];
      if (typeof t4 !== "number")
        return this.tightenEdge$1$bailout(5, tail, delta, 0, i, n, t3, t4);
      if (t3 <= t4) {
        if (1 >= t2)
          throw H.ioore(t1, 1);
        t1 = t1[1];
        if (typeof t1 !== "number")
          return this.tightenEdge$1$bailout(9, tail, delta, 0, i, n, t4, t1);
        t1 = t4 <= t1;
      } else
        t1 = false;
      if (t1) {
        t1 = n.get$rank();
        if (typeof t1 !== "number")
          return this.tightenEdge$1$bailout(10, tail, delta, 0, i, n, t1);
        n.set$rank(t1 + delta);
      }
    }
  },
  "+tightenEdge:1:0": 1,
  tightenEdge$1$bailout: function(state0, tail, delta, edge, i, n, t1, t2) {
    switch (state0) {
      case 0:
        tail = this.getTreeTail$1(edge);
        delta = edge.get$slack();
      case 1:
        state0 = 0;
        if (J.$eq(tail, J.get$target$x(edge)))
          delta = J.$negate$n(delta);
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.graph.nodes.list;
                if (!(i < t1.length))
                  break L0;
                n = t1[i];
                t1 = tail.get$workingInts();
              case 2:
                state0 = 0;
                t1 = J.$index$asx(t1, 0);
              case 3:
                state0 = 0;
                t2 = n.get$workingInts();
              case 4:
                state0 = 0;
                t2 = J.$index$asx(t2, 1);
              case 5:
                state0 = 0;
              default:
                if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && J.$le$n(t1, t2) === true)
                  switch (state0) {
                    case 0:
                      t1 = n.get$workingInts();
                    case 6:
                      state0 = 0;
                      t1 = J.$index$asx(t1, 1);
                    case 7:
                      state0 = 0;
                      t2 = tail.get$workingInts();
                    case 8:
                      state0 = 0;
                      t2 = J.$index$asx(t2, 1);
                    case 9:
                      state0 = 0;
                      t2 = J.$le$n(t1, t2) === true;
                      t1 = t2;
                  }
                else
                  t1 = false;
              case 10:
                if (state0 === 10 || state0 === 0 && t1)
                  switch (state0) {
                    case 0:
                      t1 = n.get$rank();
                    case 10:
                      state0 = 0;
                      n.set$rank(J.$add$ns(t1, delta));
                  }
                ++i;
            }
    }
  },
  updateMinMax$2: function(root, count) {
    var t1, edges, i, t2;
    if (typeof count !== "number")
      return this.updateMinMax$2$bailout(1, root, count);
    t1 = root.get$workingInts();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.updateMinMax$2$bailout(2, root, count, t1);
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1[0] = count;
    t1 = root.get$workingData();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.updateMinMax$2$bailout(3, root, count, t1);
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    edges = t1[0];
    t1 = J.getInterceptor$asx(edges);
    i = 0;
    while (true) {
      t2 = t1.get$length(edges);
      if (t2 !== (t2 | 0))
        return this.updateMinMax$2$bailout(4, root, count, t1, i, edges, t2);
      if (!(i < t2))
        break;
      count = this.updateMinMax$2(this.getTreeTail$1(t1.$index(edges, i)), count);
      if (typeof count !== "number")
        return this.updateMinMax$2$bailout(5, root, count, t1, i, edges);
      ++i;
    }
    t1 = root.get$workingInts();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.updateMinMax$2$bailout(6, 0, count, t1);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t1[1] = count;
    return count + 1;
  },
  "+updateMinMax:2:0": 1,
  updateMinMax$2$bailout: function(state0, root, count, t1, i, edges, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = root.get$workingInts();
      case 2:
        state0 = 0;
        J.$indexSet$ax(t1, 0, count);
        t1 = root.get$workingData();
      case 3:
        state0 = 0;
        edges = J.$index$asx(t1, 0);
        t1 = J.getInterceptor$asx(edges);
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(edges);
              case 4:
                state0 = 0;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                if (!(i < t2))
                  break L0;
                count = this.updateMinMax$2(this.getTreeTail$1(t1.$index(edges, i)), count);
              case 5:
                state0 = 0;
                ++i;
            }
        t1 = root.get$workingInts();
      case 6:
        state0 = 0;
        J.$indexSet$ax(t1, 1, count);
        return J.$add$ns(count, 1);
    }
  },
  updateSubgraph$1: function(root) {
    var t1, flip, rootParent;
    t1 = root.get$workingData();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.updateSubgraph$1$bailout(1, root, t1);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    flip = t1[1];
    if (flip != null) {
      rootParent = this.getTreeParent$1(root);
      t1 = rootParent.get$workingData();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.updateSubgraph$1$bailout(2, root, t1, flip, rootParent);
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      J.remove$1$ax(t1[0], flip);
      this.updateSubgraph$1(rootParent);
      t1 = root.get$workingData();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
        return this.updateSubgraph$1$bailout(3, root, t1, flip, rootParent);
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      t1[1] = null;
      t1 = rootParent.get$workingData();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
        return this.updateSubgraph$1$bailout(4, root, t1, flip);
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      t1[1] = flip;
      this.repairCutValues$1(flip);
      t1 = root.get$workingData();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.updateSubgraph$1$bailout(5, 0, t1, flip);
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      J.add$1$ax(t1[0], flip);
    }
  },
  "+updateSubgraph:1:0": 1,
  updateSubgraph$1$bailout: function(state0, root, t1, flip, rootParent) {
    switch (state0) {
      case 0:
        t1 = root.get$workingData();
      case 1:
        state0 = 0;
        flip = J.$index$asx(t1, 1);
      default:
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && flip != null)
          switch (state0) {
            case 0:
              rootParent = this.getTreeParent$1(root);
              t1 = rootParent.get$workingData();
            case 2:
              state0 = 0;
              J.remove$1$ax(J.$index$asx(t1, 0), flip);
              this.updateSubgraph$1(rootParent);
              t1 = root.get$workingData();
            case 3:
              state0 = 0;
              J.$indexSet$ax(t1, 1, null);
              t1 = rootParent.get$workingData();
            case 4:
              state0 = 0;
              J.$indexSet$ax(t1, 1, flip);
              this.repairCutValues$1(flip);
              t1 = root.get$workingData();
            case 5:
              state0 = 0;
              J.add$1$ax(J.$index$asx(t1, 0), flip);
          }
    }
  },
  visit$1: function(graph) {
    this.graph = graph;
    this.initCutValues$0();
    this.networkSimplexLoop$0();
    if (graph.forestRoot == null)
      graph.nodes.normalizeRanks$0();
    else
      this.normalizeForest$0();
  },
  "+visit:1:0": 1,
  normalizeForest$0: function() {
    var t1, t2, tree, rootEdges, stack, i, node, neighbors, neighbor;
    t1 = D.Node0;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    tree = new D.NodeList(t2);
    this.graph.nodes.resetFlags$0();
    this.graph.forestRoot.flag = true;
    rootEdges = this.graph.forestRoot.outgoing;
    stack = P.List_List(null, null);
    for (t1 = rootEdges.list, i = 0; i < t1.length; ++i) {
      node = J.get$target$x(t1[i]);
      node.set$flag(true);
      stack.push(node);
      for (; t2 = stack.length, t2 !== 0;) {
        if (0 >= t2)
          throw H.ioore(stack, 0);
        node = stack.pop();
        tree.add$1(tree, node);
        neighbors = node.iteratorNeighbors$0();
        for (; neighbors.hasNext$0() === true;) {
          neighbor = neighbors.next$0();
          if (neighbor.get$flag() !== true) {
            neighbor.set$flag(true);
            stack.push(neighbor);
          }
        }
      }
      tree.normalizeRanks$0();
      tree.clear$0(tree);
    }
  },
  "+normalizeForest:0:0": 1
},

"+RankAssignmentSolver": [],

RankList: {"": "ListBase0;list-",
  $index: function(_, rank) {
    var t1, t2, t3, t4;
    t1 = this.list;
    if (typeof rank !== "number")
      throw H.iae(rank);
    if (rank !== (rank | 0))
      return this.$$index$bailout1(1, t1, rank);
    for (; t2 = t1.length, t2 <= rank;) {
      t2 = H.Primitives_objectHashCode(new P.Object());
      t3 = D.Node0;
      t4 = P.List_List(null, t3);
      t4.$builtinTypeInfo = [t3];
      t1.push(new D.Rank(0, 0, 0, t2, 0, 0, t4));
    }
    if (rank < 0 || rank >= t2)
      throw H.ioore(t1, rank);
    return t1[rank];
  },
  "+[]:1:0": 1,
  $$index$bailout1: function(state0, t1, rank) {
    switch (state0) {
      case 0:
        t1 = this.list;
        if (typeof rank !== "number")
          throw H.iae(rank);
      case 1:
        var t2, t3, t4;
        state0 = 0;
        for (; t2 = t1.length, t2 <= rank;) {
          t2 = H.Primitives_objectHashCode(new P.Object());
          t3 = D.Node0;
          t4 = P.List_List(null, t3);
          t4.$builtinTypeInfo = [t3];
          t1.push(new D.Rank(0, 0, 0, t2, 0, 0, t4));
        }
        if (rank >>> 0 !== rank || rank >= t2)
          throw H.ioore(t1, rank);
        return t1[rank];
    }
  },
  $asList: function() {
    return [D.Rank];
  },
  $asIterable: function() {
    return [D.Rank];
  }
},

"+RankList": [],

RankSorter: {"": "Object;flipflop-,node<-,rankSize-,prevRankSize-,nextRankSize-,currentRow-,rank@-,progress-,g-",
  assignIncomingSortValues$0: function() {
    var t1, t2, n;
    this.rankSize = J.toDouble$0$n(J.get$total$x(this.rank));
    t1 = this.g.ranks;
    this.prevRankSize = J.toDouble$0$n(J.get$total$x(t1.$index(t1, this.currentRow - 1)));
    t1 = this.currentRow;
    t2 = this.g.ranks;
    if (t1 < t2.list.length - 1)
      this.nextRankSize = J.toDouble$0$n(J.get$total$x(t2.$index(t2, t1 + 1)));
    n = 0;
    while (true) {
      t1 = this.rank.count$0();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(n < t1))
        break;
      this.node = J.$index$asx(this.rank, n);
      this.sortValueIncoming$0();
      ++n;
    }
  },
  "+assignIncomingSortValues:0:0": 1,
  assignOutgoingSortValues$0: function() {
    var t1, t2, n;
    this.rankSize = J.toDouble$0$n(J.get$total$x(this.rank));
    t1 = this.g.ranks;
    this.prevRankSize = J.toDouble$0$n(J.get$total$x(t1.$index(t1, this.currentRow + 1)));
    t1 = this.currentRow;
    if (t1 > 1) {
      t2 = this.g.ranks;
      this.nextRankSize = J.toDouble$0$n(J.get$total$x(t2.$index(t2, t1 - 1)));
    }
    n = 0;
    while (true) {
      t1 = this.rank.count$0();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(n < t1))
        break;
      this.node = J.$index$asx(this.rank, n);
      this.sortValueOutgoing$0();
      ++n;
    }
  },
  "+assignOutgoingSortValues:0:0": 1,
  evaluateNodeIncoming$0: function() {
    var incoming, t1, change, i, t2, i0, e, n, l, r, dl, dr;
    incoming = this.node.get$incoming();
    t1 = J.getInterceptor$asx(incoming);
    do {
      change = false;
      i = 0;
      while (true) {
        t2 = J.$sub$n(t1.get$length(incoming), 1);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(i < t2))
          break;
        i0 = i + 1;
        if (J.$gt$n(incoming.getSourceIndex$1(i), incoming.getSourceIndex$1(i0)) === true) {
          e = t1.$index(incoming, i);
          t1.$indexSet(incoming, i, t1.$index(incoming, i0));
          t1.$indexSet(incoming, i0, e);
          change = true;
        }
        i = i0;
      }
    } while (change);
    n = t1.get$length(incoming);
    t1 = J.getInterceptor(n);
    if (t1.$eq(n, 0))
      return J.$div$n(J.$mul$n(J.get$index$x(this.node), this.prevRankSize), this.rankSize);
    if (J.$eq(t1.$mod(n, 2), 1))
      return J.toDouble$0$n(incoming.getSourceIndex$1(t1.$tdiv(n, 2)));
    l = incoming.getSourceIndex$1(J.$sub$n(t1.$tdiv(n, 2), 1));
    r = incoming.getSourceIndex$1(t1.$tdiv(n, 2));
    if (this.progress >= 0.8 && t1.$gt(n, 2) === true) {
      t2 = J.getInterceptor$n(l);
      dl = t2.$sub(l, incoming.getSourceIndex$1(0));
      dr = J.$sub$n(incoming.getSourceIndex$1(t1.$sub(n, 1)), r);
      t1 = J.getInterceptor$n(dl);
      if (t1.$lt(dl, dr) === true)
        return t2.toDouble$0(l);
      if (t1.$gt(dl, dr) === true)
        return J.toDouble$0$n(r);
    }
    t1 = this.progress;
    if (t1 > 0.25 && t1 < 0.75)
      if (Math.random() < 0.5)
        return J.$div$n(J.$add$ns(J.$add$ns(l, l), r), 3);
      else
        return J.$div$n(J.$add$ns(J.$add$ns(r, r), l), 3);
    return J.$div$n(J.$add$ns(l, r), 2);
  },
  "+evaluateNodeIncoming:0:0": 1,
  evaluateNodeOutgoing$0: function() {
    var outgoing, t1, change, i, t2, i0, e, n, l, r, dl, dr;
    outgoing = this.node.get$outgoing();
    t1 = J.getInterceptor$asx(outgoing);
    do {
      change = false;
      i = 0;
      while (true) {
        t2 = J.$sub$n(t1.get$length(outgoing), 1);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(i < t2))
          break;
        i0 = i + 1;
        if (J.$gt$n(outgoing.getTargetIndex$1(i), outgoing.getTargetIndex$1(i0)) === true) {
          e = t1.$index(outgoing, i);
          t1.$indexSet(outgoing, i, t1.$index(outgoing, i0));
          t1.$indexSet(outgoing, i0, e);
          change = true;
        }
        i = i0;
      }
    } while (change);
    n = t1.get$length(outgoing);
    t1 = J.getInterceptor(n);
    if (t1.$eq(n, 0))
      return J.$div$n(J.$mul$n(J.get$index$x(this.node), this.prevRankSize), this.rankSize);
    if (J.$eq(t1.$mod(n, 2), 1))
      return J.toDouble$0$n(outgoing.getTargetIndex$1(t1.$tdiv(n, 2)));
    l = outgoing.getTargetIndex$1(J.$sub$n(t1.$tdiv(n, 2), 1));
    r = outgoing.getTargetIndex$1(t1.$tdiv(n, 2));
    if (this.progress >= 0.8 && t1.$gt(n, 2) === true) {
      t2 = J.getInterceptor$n(l);
      dl = t2.$sub(l, outgoing.getTargetIndex$1(0));
      dr = J.$sub$n(outgoing.getTargetIndex$1(t1.$sub(n, 1)), r);
      t1 = J.getInterceptor$n(dl);
      if (t1.$lt(dl, dr) === true)
        return t2.toDouble$0(l);
      if (t1.$gt(dl, dr) === true)
        return J.toDouble$0$n(r);
    }
    t1 = this.progress;
    if (t1 > 0.25 && t1 < 0.75)
      return J.$div$n(Math.random() < 0.5 ? J.$add$ns(J.$add$ns(l, l), r) : J.$add$ns(J.$add$ns(r, r), l), 3);
    return J.$div$n(J.$add$ns(l, r), 2);
  },
  "+evaluateNodeOutgoing:0:0": 1,
  init$1: function(g) {
    var i, t1;
    this.g = g;
    for (i = 0; t1 = g.ranks, i < t1.list.length; ++i) {
      this.rank = t1.$index(t1, i);
      this.rank.assignIndices$0();
    }
  },
  "+init:1:0": 1,
  sort$0: function(_) {
    var change, i, t1;
    do {
      change = false;
      i = 0;
      while (true) {
        t1 = J.$sub$n(J.get$length$asx(this.rank), 1);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(i < t1))
          break;
        change = this.swap$1(i) || change;
        ++i;
      }
      if (!change)
        break;
      i = J.$sub$n(J.get$length$asx(this.rank), 2);
      if (typeof i !== "number")
        return this.sort$0$bailout(1, i);
      change = false;
      for (; i >= 0; --i)
        change = this.swap$1(i) || change;
    } while (change);
  },
  "+sort:0:0": 1,
  sort$0$bailout: function(state0, i) {
    switch (state0) {
      case 0:
      case 1:
        var change, t1;
        L0:
          while (true)
            switch (state0) {
              case 0:
                change = false;
                i = 0;
                while (true) {
                  t1 = J.$sub$n(J.get$length$asx(this.rank), 1);
                  if (typeof t1 !== "number")
                    throw H.iae(t1);
                  if (!(i < t1))
                    break;
                  change = this.swap$1(i) || change;
                  ++i;
                }
                if (!change)
                  break L0;
                i = J.$sub$n(J.get$length$asx(this.rank), 2);
              case 1:
                state0 = 0;
                change = false;
                for (; t1 = J.getInterceptor$n(i), t1.$ge(i, 0) === true; i = t1.$sub(i, 1))
                  change = this.swap$1(i) || change;
                if (!change)
                  break L0;
            }
    }
  },
  swap$1: function(i) {
    var t1, t2, left, t3, right, t4;
    if (typeof i !== "number")
      return this.swap$1$bailout(1, i);
    t1 = this.rank;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.swap$1$bailout(2, i, t1);
    t2 = t1.length;
    if (i >>> 0 !== i || i >= t2)
      throw H.ioore(t1, i);
    left = t1[i];
    t3 = i + 1;
    if (t3 >= t2)
      throw H.ioore(t1, t3);
    right = t1[t3];
    t2 = left.get$sortValue();
    if (typeof t2 !== "number")
      return this.swap$1$bailout(4, i, t2, left, C.JSInt_methods, right);
    t4 = right.get$sortValue();
    if (typeof t4 !== "number")
      return this.swap$1$bailout(5, i, t2, left, C.JSInt_methods, right, t4);
    if (t2 <= t4)
      return false;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.swap$1$bailout(6, i, t1, left, C.JSInt_methods, right);
    t1[i] = right;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.swap$1$bailout(7, i, t1, left, C.JSInt_methods);
    t1[t3] = left;
    return true;
  },
  "+swap:1:0": 1,
  swap$1$bailout: function(state0, i, t1, left, t2, right, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.rank;
      case 2:
        state0 = 0;
        left = J.$index$asx(t1, i);
        t1 = this.rank;
      case 3:
        state0 = 0;
        t2 = J.getInterceptor$ns(i);
        right = J.$index$asx(t1, t2.$add(i, 1));
        t1 = left.get$sortValue();
      case 4:
        state0 = 0;
        t3 = right.get$sortValue();
      case 5:
        state0 = 0;
        if (J.$le$n(t1, t3) === true)
          return false;
        t1 = this.rank;
      case 6:
        state0 = 0;
        J.$indexSet$ax(t1, i, right);
        t1 = this.rank;
      case 7:
        state0 = 0;
        J.$indexSet$ax(t1, t2.$add(i, 1), left);
        return true;
    }
  },
  sortValueIncoming$0: function() {
    var value, t1, t2, t3;
    this.node.set$sortValue(this.evaluateNodeIncoming$0());
    value = this.evaluateNodeOutgoing$0();
    if (typeof value !== "number")
      return this.sortValueIncoming$0$bailout(1, value);
    if (value < 0) {
      t1 = J.get$index$x(this.node);
      if (typeof t1 !== "number")
        return this.sortValueIncoming$0$bailout(2, 0, t1);
      t2 = this.nextRankSize;
      if (typeof t2 !== "number")
        return this.sortValueIncoming$0$bailout(3, 0, t1, t2);
      t3 = this.rankSize;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      value = t1 * t2 / t3;
    }
    t1 = this.node;
    t2 = t1.get$sortValue();
    if (typeof t2 !== "number")
      return this.sortValueIncoming$0$bailout(4, value, t1, t2);
    t1.set$sortValue(t2 + value * this.progress);
  },
  "+sortValueIncoming:0:0": 1,
  sortValueIncoming$0$bailout: function(state0, value, t1, t2) {
    switch (state0) {
      case 0:
        this.node.set$sortValue(this.evaluateNodeIncoming$0());
        value = this.evaluateNodeOutgoing$0();
      case 1:
        state0 = 0;
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && J.$lt$n(value, 0) === true)
          switch (state0) {
            case 0:
              t1 = J.get$index$x(this.node);
            case 2:
              state0 = 0;
              t2 = this.nextRankSize;
            case 3:
              state0 = 0;
              t2 = J.$mul$n(t1, t2);
              t1 = this.rankSize;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              value = J.$div$n(t2, t1);
          }
        t1 = this.node;
        t2 = t1.get$sortValue();
      case 4:
        state0 = 0;
        t1.set$sortValue(J.$add$ns(t2, J.$mul$n(value, this.progress)));
    }
  },
  sortValueOutgoing$0: function() {
    var value, t1, t2, t3;
    this.node.set$sortValue(this.evaluateNodeOutgoing$0());
    value = this.evaluateNodeIncoming$0();
    if (typeof value !== "number")
      return this.sortValueOutgoing$0$bailout(1, value);
    if (value < 0) {
      t1 = J.get$index$x(this.node);
      if (typeof t1 !== "number")
        return this.sortValueOutgoing$0$bailout(2, 0, t1);
      t2 = this.nextRankSize;
      if (typeof t2 !== "number")
        return this.sortValueOutgoing$0$bailout(3, 0, t1, t2);
      t3 = this.rankSize;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      value = t1 * t2 / t3;
    }
    t1 = this.node;
    t2 = t1.get$sortValue();
    if (typeof t2 !== "number")
      return this.sortValueOutgoing$0$bailout(4, value, t1, t2);
    t1.set$sortValue(t2 + value * this.progress);
  },
  "+sortValueOutgoing:0:0": 1,
  sortValueOutgoing$0$bailout: function(state0, value, t1, t2) {
    switch (state0) {
      case 0:
        this.node.set$sortValue(this.evaluateNodeOutgoing$0());
        value = this.evaluateNodeIncoming$0();
      case 1:
        state0 = 0;
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && J.$lt$n(value, 0) === true)
          switch (state0) {
            case 0:
              t1 = J.get$index$x(this.node);
            case 2:
              state0 = 0;
              t2 = this.nextRankSize;
            case 3:
              state0 = 0;
              t2 = J.$mul$n(t1, t2);
              t1 = this.rankSize;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              value = J.$div$n(t2, t1);
          }
        t1 = this.node;
        t2 = t1.get$sortValue();
      case 4:
        state0 = 0;
        t1.set$sortValue(J.$add$ns(t2, J.$mul$n(value, this.progress)));
    }
  }
},

"+RankSorter": [],

Rectangle: {"": "Object;height*-,width*-,x*-,y*-",
  height$0: function($receiver) {
    return this.height.call$0();
  },
  width$0: function($receiver) {
    return this.width.call$0();
  },
  bottom$0: function(_) {
    return J.$add$ns(this.y, this.height);
  },
  "+bottom:0:0": 1,
  get$bottom: function(_receiver) {
    return new D.Bound_bottom_Rectangle(this, D.Rectangle.prototype.bottom$0, _receiver, "bottom$0");
  },
  contains$2: function(_, x, y) {
    var t1 = J.getInterceptor$n(y);
    if (t1.$ge(y, this.y) === true)
      if (t1.$lt(y, J.$add$ns(this.y, this.height)) === true) {
        t1 = J.getInterceptor$n(x);
        t1 = t1.$ge(x, this.x) === true && t1.$lt(x, J.$add$ns(this.x, this.width)) === true;
      } else
        t1 = false;
    else
      t1 = false;
    return t1;
  },
  "+contains:2:0": 1,
  containsPoint$1: function(_, p) {
    var t1 = J.getInterceptor$x(p);
    return this.contains$2(this, t1.get$x(p), t1.get$y(p));
  },
  "+containsPoint:1:0": 1,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor(o);
    if (typeof o === "object" && o !== null && !!t1.$isRectangle)
      return J.$eq(this.x, o.x) && J.$eq(this.y, o.y) && J.$eq(this.width, o.width) && J.$eq(this.height, o.height);
    return false;
  },
  "+==:1:0": 1,
  getCenter$0: function() {
    return new D.Point(J.$add$ns(this.x, J.$tdiv$n(this.width, 2)), J.$add$ns(this.y, J.$tdiv$n(this.height, 2)));
  },
  "+getCenter:0:0": 1,
  clone$0: function(_) {
    var t1, t2, t3;
    t1 = this.x;
    t2 = this.y;
    t3 = this.width;
    return new D.Rectangle(this.height, t3, t1, t2);
  },
  "+clone:0:0": 1,
  getPosition$1: function(p) {
    var t1, result;
    t1 = J.getInterceptor$x(p);
    if (this.contains$2(this, t1.get$x(p), t1.get$y(p)))
      return 0;
    if (J.$lt$n(t1.get$x(p), this.x) === true)
      result = 8;
    else
      result = J.$ge$n(t1.get$x(p), J.$add$ns(this.x, this.width)) === true ? 16 : 0;
    if (J.$lt$n(t1.get$y(p), this.y) === true)
      result = (result | 1) >>> 0;
    else if (J.$ge$n(t1.get$y(p), J.$add$ns(this.y, this.height)) === true)
      result = (result | 4) >>> 0;
    return result;
  },
  "+getPosition:1:0": 1,
  get$hashCode: function(_) {
    return J.$xor$n(J.$xor$n(J.$mul$n(J.$add$ns(this.x, this.height), J.$add$ns(this.y, this.width)), this.x), this.y);
  },
  "+hashCode": 1,
  intersect$1: function(rect) {
    var t1, x1, x2, y1, y2;
    t1 = J.getInterceptor$x(rect);
    x1 = P.max(this.x, t1.get$x(rect));
    x2 = P.min(J.$add$ns(this.x, this.width), J.$add$ns(t1.get$x(rect), t1.get$width(rect)));
    y1 = P.max(this.y, t1.get$y(rect));
    y2 = P.min(J.$add$ns(this.y, this.height), J.$add$ns(t1.get$y(rect), t1.get$height(rect)));
    t1 = x2 - x1;
    if (t1 < 0 || y2 - y1 < 0) {
      this.height = 0;
      this.width = 0;
      this.y = 0;
      this.x = 0;
      return this;
    } else {
      this.x = x1;
      this.y = y1;
      this.width = t1;
      this.height = y2 - y1;
      return this;
    }
  },
  "+intersect:1:0": 1,
  intersects$1: function(_, rect) {
    var t1, t2, t3;
    t1 = this.x;
    t2 = this.y;
    t3 = this.width;
    t2 = new D.Rectangle(this.height, t3, t1, t2).intersect$1(rect);
    return !(J.$le$n(t2.width, 0) === true || J.$le$n(t2.height, 0) === true);
  },
  "+intersects:1:0": 1,
  isEmpty$0: function(_) {
    return J.$le$n(this.width, 0) === true || J.$le$n(this.height, 0) === true;
  },
  "+isEmpty:0:0": 1,
  get$isEmpty: function(_receiver) {
    return new D.Bound_isEmpty_Rectangle(this, D.Rectangle.prototype.isEmpty$0, _receiver, "isEmpty$0");
  },
  right$0: function(_) {
    return J.$add$ns(this.x, this.width);
  },
  "+right:0:0": 1,
  get$right: function(_receiver) {
    return new D.Bound_right_Rectangle(this, D.Rectangle.prototype.right$0, _receiver, "right$0");
  },
  toString$0: function(_) {
    return "Rectangle(?)";
  },
  "+toString:0:0": 1,
  transpose$0: function() {
    var temp = this.x;
    this.x = this.y;
    this.y = temp;
    temp = this.width;
    this.width = this.height;
    this.height = temp;
    return this;
  },
  "+transpose:0:0": 1,
  union$2: function(_, x1, y1) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$n(x1);
    t2 = t1.$lt(x1, this.x);
    t3 = this.width;
    t4 = this.x;
    if (t2 === true) {
      this.width = J.$add$ns(t3, J.$sub$n(t4, x1));
      this.x = x1;
    } else if (t1.$ge(x1, J.$add$ns(t4, t3)) === true)
      this.width = J.$sub$n(t1.$add(x1, 1), this.x);
    t1 = J.getInterceptor$n(y1);
    t2 = t1.$lt(y1, this.y);
    t3 = this.height;
    t4 = this.y;
    if (t2 === true) {
      this.height = J.$add$ns(t3, J.$sub$n(t4, y1));
      this.y = y1;
    } else if (t1.$ge(y1, J.$add$ns(t4, t3)) === true)
      this.height = J.$sub$n(t1.$add(y1, 1), this.y);
    return this;
  },
  "+union:2:0": 1,
  $isRectangle: true
},

"+Rectangle": [],

RevertableChange: {"": "Object;",
  revert$0: function() {
  },
  "+revert:0:0": 1
},

"+RevertableChange": [],

RouteEdges: {"": "GraphVisitor;",
  revisit$1: function(g) {
    var i, t1, edge, t2, list;
    for (i = 0; t1 = g.edges.list, i < t1.length; ++i) {
      edge = t1[i];
      t1 = J.getInterceptor$x(edge);
      t1.set$start(edge, new D.Point(J.$add$ns(edge.get$sourceOffset(), J.get$x$x(t1.get$source(edge))), J.$add$ns(J.get$y$x(t1.get$source(edge)), J.get$height$x(t1.get$source(edge)))));
      edge.set$end(new D.Point(J.$add$ns(edge.get$targetOffset(), J.get$x$x(t1.get$target(edge))), J.get$y$x(t1.get$target(edge))));
      if (edge.get$vNodes() != null)
        D.RouteEdges_routeLongEdge(edge, g);
      else {
        t2 = P.List_List(null, D.Point);
        t2.$builtinTypeInfo = [D.Point];
        list = new D.PointList(t2, null);
        t2 = list.points;
        t2.push(J.clone$0$x(t1.get$start(edge)));
        t2.push(J.clone$0$x(edge.get$end()));
        edge.setPoints$1(list);
      }
    }
  },
  "+revisit:1:0": 1,
  static: {
RouteEdges_routeLongEdge: function(edge, g) {
  var router, t1, t2, t3, t4, t5, t6, path, P1, P2, o, padding, i, node, neighbor;
  router = new D.ShortestPathRouter(4, false, null, null, null, null, null, null, null);
  router.userPaths = P.List_List(null, null);
  router.workingPaths = P.List_List(null, null);
  router.pathsToChildPaths = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  router.userObstacles = P.List_List(null, null);
  t1 = J.getInterceptor$x(edge);
  t2 = t1.get$start(edge);
  t3 = edge.get$end();
  t4 = P.List_List(null, null);
  t5 = P.List_List(null, null);
  t6 = P.List_List(null, D.Point);
  t6.$builtinTypeInfo = [D.Point];
  path = new D.Path(null, null, t4, t5, true, false, false, new D.PointList(t6, null), 0, P.List_List(null, null), new D.SegmentStack(P.List_List(null, null)), null, null, null, 0, P.LinkedHashSet_LinkedHashSet(null, null, null, null), P.LinkedHashSet_LinkedHashSet(null, null, null, null));
  t4 = J.getInterceptor(t2);
  if (typeof t2 === "object" && t2 !== null && !!t4.$isPoint) {
    t4 = t2.x;
    t2 = t2.y;
    t5 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t4, t2);
    t5.origX = t4;
    t5.origY = t2;
    t5.obs = null;
    t2 = t5;
  }
  path.start = t2;
  t2 = J.getInterceptor(t3);
  if (typeof t3 === "object" && t3 !== null && !!t2.$isPoint) {
    t2 = t3.x;
    t3 = t3.y;
    t4 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t2, t3);
    t4.origX = t2;
    t4.origY = t3;
    t4.obs = null;
    t2 = t4;
  } else
    t2 = t3;
  path.end = t2;
  router.userPaths.push(path);
  router.workingPaths.push(path);
  P1 = new D.Point(-100000, 2);
  P2 = new D.Point(100000, 2);
  o = null;
  padding = null;
  i = 0;
  while (true) {
    t2 = J.get$length$asx(edge.get$vNodes());
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    t2 = edge.get$vNodes();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
      return D.RouteEdges_routeLongEdge$bailout(1, i, router, P2, t1, edge, g, P1, o, padding, t2, path);
    if (i >= t2.length)
      throw H.ioore(t2, i);
    node = t2[i];
    t2 = J.getInterceptor$x(node);
    if (t2.get$left(node) != null) {
      neighbor = t2.get$left(node);
      t3 = J.getInterceptor$x(neighbor);
      t4 = t3.get$x(neighbor);
      t5 = t3.get$y(neighbor);
      t6 = t3.get$width(neighbor);
      o = new D.Rectangle(t3.get$height(neighbor), t6, t4, t5);
      padding = t3.get$padding(neighbor) == null ? g.defaultPadding : t3.get$padding(neighbor);
      t3 = o.width;
      if (typeof t3 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(2, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t3);
      t4 = J.getInterceptor$x(padding);
      t5 = J.$add$ns(t4.get$right(padding), t4.get$left(padding));
      if (typeof t5 !== "number")
        throw H.iae(t5);
      o.width = t3 + t5;
      t5 = o.width;
      if (typeof t5 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(3, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t5, t4);
      t3 = t1.get$padding(edge);
      if (typeof t3 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(4, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t5, t4, t3);
      o.width = t5 + t3 * 2;
      t3 = o.x;
      if (typeof t3 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(5, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, 0, t4, t3);
      t4 = J.$add$ns(t4.get$left(padding), t1.get$padding(edge));
      if (typeof t4 !== "number")
        throw H.iae(t4);
      o.x = t3 - t4;
      t4 = new D.Point(o.x, o.y);
      t3 = t4.x;
      if (typeof t3 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(6, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, 0, t4, t3);
      t5 = P1.x;
      if (typeof t5 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(7, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t5, t4, t3);
      t4.x = t3 + t5;
      t5 = t4.y;
      if (typeof t5 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(8, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t5, t4);
      t3 = P1.y;
      if (typeof t3 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(9, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t5, t4, t3);
      t4.y = t5 + t3;
      o.union$2(o, t4.x, t4.y);
      t4 = new D.Obstacle(false, null, null, null, null, null, null, 0, 0, 0, 0);
      t4.init$1(o);
      t4.router = router;
      router.userObstacles.push(t4);
      router.testAndDirtyPaths$1(t4);
    }
    if (t2.get$right(node) != null) {
      neighbor = t2.get$right(node);
      t2 = J.getInterceptor$x(neighbor);
      t3 = t2.get$x(neighbor);
      t4 = t2.get$y(neighbor);
      t5 = t2.get$width(neighbor);
      o = new D.Rectangle(t2.get$height(neighbor), t5, t3, t4);
      padding = t2.get$padding(neighbor) == null ? g.defaultPadding : t2.get$padding(neighbor);
      t2 = o.width;
      if (typeof t2 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(10, i, router, P2, t1, edge, g, P1, o, padding, t2, path);
      t3 = J.getInterceptor$x(padding);
      t4 = J.$add$ns(t3.get$right(padding), t3.get$left(padding));
      if (typeof t4 !== "number")
        throw H.iae(t4);
      o.width = t2 + t4;
      t4 = o.width;
      if (typeof t4 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(11, i, router, P2, t1, edge, g, P1, o, padding, t4, path, 0, t3);
      t2 = t1.get$padding(edge);
      if (typeof t2 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(12, i, router, P2, t1, edge, g, P1, o, padding, t4, path, 0, t3, t2);
      o.width = t4 + t2 * 2;
      t2 = o.x;
      if (typeof t2 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(13, i, router, P2, t1, edge, g, P1, o, padding, 0, path, 0, t3, t2);
      t3 = J.$add$ns(t3.get$left(padding), t1.get$padding(edge));
      if (typeof t3 !== "number")
        throw H.iae(t3);
      o.x = t2 - t3;
      t3 = new D.Point(o.x, o.y);
      t2 = t3.x;
      if (typeof t2 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(14, i, router, P2, t1, edge, g, P1, o, padding, 0, path, 0, t3, t2);
      t4 = P2.x;
      if (typeof t4 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(15, i, router, P2, t1, edge, g, P1, o, padding, t4, path, 0, t3, t2);
      t3.x = t2 + t4;
      t4 = t3.y;
      if (typeof t4 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(16, i, router, P2, t1, edge, g, P1, o, padding, t4, path, 0, t3);
      t2 = P2.y;
      if (typeof t2 !== "number")
        return D.RouteEdges_routeLongEdge$bailout(17, i, router, P2, t1, edge, g, P1, o, padding, t4, path, 0, t3, t2);
      t3.y = t4 + t2;
      o.union$2(o, t3.x, t3.y);
      t3 = new D.Obstacle(false, null, null, null, null, null, null, 0, 0, 0, 0);
      t3.init$1(o);
      t3.router = router;
      router.userObstacles.push(t3);
      router.testAndDirtyPaths$1(t3);
    }
    ++i;
  }
  router.spacing = 0;
  router.solve$0();
  edge.setPoints$1(path.points);
},

"+routeLongEdge:2:0": 1,

RouteEdges_routeLongEdge$bailout: function(state0, i, router, P2, t1, edge, g, P1, o, padding, t2, path, node, t3, t4, t5) {
  switch (state0) {
    case 0:
      router = new D.ShortestPathRouter(4, false, null, null, null, null, null, null, null);
      router.userPaths = P.List_List(null, null);
      router.workingPaths = P.List_List(null, null);
      router.pathsToChildPaths = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      router.userObstacles = P.List_List(null, null);
      t1 = J.getInterceptor$x(edge);
      t2 = t1.get$start(edge);
      t3 = edge.get$end();
      t4 = P.List_List(null, null);
      t5 = P.List_List(null, null);
      t6 = P.List_List(null, D.Point);
      t6.$builtinTypeInfo = [D.Point];
      path = new D.Path(null, null, t4, t5, true, false, false, new D.PointList(t6, null), 0, P.List_List(null, null), new D.SegmentStack(P.List_List(null, null)), null, null, null, 0, P.LinkedHashSet_LinkedHashSet(null, null, null, null), P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t4.$isPoint) {
        t4 = t2.x;
        t2 = t2.y;
        t5 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t4, t2);
        t5.origX = t4;
        t5.origY = t2;
        t5.obs = null;
        t2 = t5;
      }
      path.start = t2;
      t2 = J.getInterceptor(t3);
      if (typeof t3 === "object" && t3 !== null && !!t2.$isPoint) {
        t2 = t3.x;
        t3 = t3.y;
        t4 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, t2, t3);
        t4.origX = t2;
        t4.origY = t3;
        t4.obs = null;
        t2 = t4;
      } else
        t2 = t3;
      path.end = t2;
      router.userPaths.push(path);
      router.workingPaths.push(path);
      P1 = new D.Point(-100000, 2);
      P2 = new D.Point(100000, 2);
      o = null;
      padding = null;
      i = 0;
    default:
      var t6, neighbor;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t2 = J.get$length$asx(edge.get$vNodes());
              if (typeof t2 !== "number")
                throw H.iae(t2);
              if (!(i < t2))
                break L0;
              t2 = edge.get$vNodes();
            case 1:
              state0 = 0;
              node = J.$index$asx(t2, i);
              t2 = J.getInterceptor$x(node);
            default:
              if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && t2.get$left(node) != null)
                switch (state0) {
                  case 0:
                    neighbor = t2.get$left(node);
                    t3 = J.getInterceptor$x(neighbor);
                    t4 = t3.get$x(neighbor);
                    t5 = t3.get$y(neighbor);
                    t6 = t3.get$width(neighbor);
                    o = new D.Rectangle(t3.get$height(neighbor), t6, t4, t5);
                    padding = t3.get$padding(neighbor) == null ? g.defaultPadding : t3.get$padding(neighbor);
                    t3 = o.width;
                  case 2:
                    state0 = 0;
                    t4 = J.getInterceptor$x(padding);
                    o.width = J.$add$ns(t3, J.$add$ns(t4.get$right(padding), t4.get$left(padding)));
                    t3 = o.width;
                  case 3:
                    state0 = 0;
                    t5 = t1.get$padding(edge);
                  case 4:
                    state0 = 0;
                    o.width = J.$add$ns(t3, J.$mul$n(t5, 2));
                    t5 = o.x;
                  case 5:
                    state0 = 0;
                    o.x = J.$sub$n(t5, J.$add$ns(t4.get$left(padding), t1.get$padding(edge)));
                    t4 = new D.Point(o.x, o.y);
                    t5 = t4.x;
                  case 6:
                    state0 = 0;
                    t3 = P1.x;
                  case 7:
                    state0 = 0;
                    t4.x = J.$add$ns(t5, t3);
                    t3 = t4.y;
                  case 8:
                    state0 = 0;
                    t5 = P1.y;
                  case 9:
                    state0 = 0;
                    t4.y = J.$add$ns(t3, t5);
                    o.union$2(o, t4.x, t4.y);
                    t4 = new D.Obstacle(false, null, null, null, null, null, null, 0, 0, 0, 0);
                    t4.init$1(o);
                    t4.router = router;
                    router.userObstacles.push(t4);
                    router.testAndDirtyPaths$1(t4);
                }
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
              if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 0 && t2.get$right(node) != null)
                switch (state0) {
                  case 0:
                    neighbor = t2.get$right(node);
                    t2 = J.getInterceptor$x(neighbor);
                    t3 = t2.get$x(neighbor);
                    t4 = t2.get$y(neighbor);
                    t5 = t2.get$width(neighbor);
                    o = new D.Rectangle(t2.get$height(neighbor), t5, t3, t4);
                    padding = t2.get$padding(neighbor) == null ? g.defaultPadding : t2.get$padding(neighbor);
                    t2 = o.width;
                  case 10:
                    state0 = 0;
                    t3 = J.getInterceptor$x(padding);
                    o.width = J.$add$ns(t2, J.$add$ns(t3.get$right(padding), t3.get$left(padding)));
                    t2 = o.width;
                  case 11:
                    state0 = 0;
                    t4 = t1.get$padding(edge);
                  case 12:
                    state0 = 0;
                    o.width = J.$add$ns(t2, J.$mul$n(t4, 2));
                    t4 = o.x;
                  case 13:
                    state0 = 0;
                    o.x = J.$sub$n(t4, J.$add$ns(t3.get$left(padding), t1.get$padding(edge)));
                    t3 = new D.Point(o.x, o.y);
                    t4 = t3.x;
                  case 14:
                    state0 = 0;
                    t2 = P2.x;
                  case 15:
                    state0 = 0;
                    t3.x = J.$add$ns(t4, t2);
                    t2 = t3.y;
                  case 16:
                    state0 = 0;
                    t4 = P2.y;
                  case 17:
                    state0 = 0;
                    t3.y = J.$add$ns(t2, t4);
                    o.union$2(o, t3.x, t3.y);
                    t3 = new D.Obstacle(false, null, null, null, null, null, null, 0, 0, 0, 0);
                    t3.init$1(o);
                    t3.router = router;
                    router.userObstacles.push(t3);
                    router.testAndDirtyPaths$1(t3);
                }
              ++i;
          }
      router.spacing = 0;
      router.solve$0();
      edge.setPoints$1(path.points);
  }
}}

},

"+RouteEdges": [],

Segment: {"": "Object;start*-,end@-",
  cosine$1: function(otherSegment) {
    var t1, cos;
    t1 = J.getInterceptor$x(otherSegment);
    cos = J.$div$n(J.$add$ns(J.$mul$n(J.$sub$n(J.get$x$x(this.start), J.get$x$x(this.end)), J.$sub$n(J.get$x$x(otherSegment.get$end()), J.get$x$x(t1.get$start(otherSegment)))), J.$mul$n(J.$sub$n(J.get$y$x(this.start), J.get$y$x(this.end)), J.$sub$n(J.get$y$x(otherSegment.get$end()), J.get$y$x(t1.get$start(otherSegment))))), J.$mul$n(this.end.getDistance$1(this.start), otherSegment.getLength$0()));
    if (J.$lt$n(J.toDouble$0$n(J.$sub$n(J.$mul$n(J.$sub$n(J.get$x$x(this.start), J.get$x$x(this.end)), J.$sub$n(J.get$y$x(otherSegment.get$end()), J.get$y$x(t1.get$start(otherSegment)))), J.$mul$n(J.$sub$n(J.get$y$x(this.start), J.get$y$x(this.end)), J.$sub$n(J.get$x$x(otherSegment.get$end()), J.get$x$x(t1.get$start(otherSegment)))))), 0) === true) {
      if (typeof cos !== "number")
        throw H.iae(cos);
      return 1 + cos;
    }
    if (typeof cos !== "number")
      throw H.iae(cos);
    return -(1 + cos);
  },
  "+cosine:1:0": 1,
  crossProduct$1: function(otherSegment) {
    return J.$sub$n(J.$mul$n(J.$sub$n(J.get$x$x(this.start), J.get$x$x(this.end)), J.$sub$n(J.get$y$x(otherSegment.end), J.get$y$x(this.end))), J.$mul$n(J.$sub$n(J.get$y$x(this.start), J.get$y$x(this.end)), J.$sub$n(J.get$x$x(otherSegment.end), J.get$x$x(this.end))));
  },
  "+crossProduct:1:0": 1,
  getLength$0: function() {
    return this.end.getDistance$1(this.start);
  },
  "+getLength:0:0": 1,
  getSlope$0: function() {
    var t1, t2, t3;
    t1 = J.$ge$n(J.$sub$n(J.get$x$x(this.end), J.get$x$x(this.start)), 0);
    t2 = this.end;
    t3 = this.start;
    if (t1 === true)
      return J.toDouble$0$n(J.$sub$n(J.get$y$x(t2), J.get$y$x(t3)));
    else
      return J.$negate$n(J.toDouble$0$n(J.$sub$n(J.get$y$x(t2), J.get$y$x(t3))));
  },
  "+getSlope:0:0": 1,
  intersects$4: function(_, sx, sy, tx, ty) {
    var t1, t2, t3, t4;
    t1 = this.start;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$x(t1);
    t1 = t2.get$y(t1);
    t2 = this.end;
    t4 = J.getInterceptor$x(t2);
    return D.Geometry_linesIntersect(t3, t1, t4.get$x(t2), t4.get$y(t2), sx, sy, tx, ty);
  },
  "+intersects:4:0": 1,
  toString$0: function(_) {
    return H.S(this.start) + "---";
  },
  "+toString:0:0": 1,
  $isSegment: true
},

"+Segment": [],

ShortestPathRouter: {"": "Object;spacing-,growPassChangedObstacles-,orderedPaths-,pathsToChildPaths-,stack-,subPaths-,userObstacles-,userPaths-,workingPaths-",
  bendPaths$0: function() {
    var i, t1, path, v, t2, vertex;
    for (i = 0; t1 = this.orderedPaths, i < t1.length; ++i) {
      path = t1[i];
      t1 = J.getInterceptor$x(path);
      t1.get$points(path).addPoint$1(new D.Point(J.get$x$x(t1.get$start(path)), J.get$y$x(t1.get$start(path))));
      v = 0;
      while (true) {
        t2 = J.get$length$asx(path.get$grownSegments());
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(v < t2))
          break;
        vertex = J.$index$asx(path.get$grownSegments(), v).get$end();
        if (vertex != null) {
          t2 = J.$sub$n(J.get$length$asx(path.get$grownSegments()), 1);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t2 = v < t2;
        } else
          t2 = false;
        if (t2)
          if (J.$eq(J.get$type$x(vertex), 1)) {
            vertex.set$count(J.$add$ns(vertex.get$count(), 1));
            t1.get$points(path).addPoint$1(vertex.bend$1(vertex.get$count()));
          } else {
            t1.get$points(path).addPoint$1(vertex.bend$1(vertex.get$totalCount()));
            vertex.set$totalCount(J.$sub$n(vertex.get$totalCount(), 1));
          }
        ++v;
      }
      t1.get$points(path).addPoint$1(new D.Point(J.get$x$x(path.get$end()), J.get$y$x(path.get$end())));
    }
  },
  "+bendPaths:0:0": 1,
  checkVertexForIntersections$1: function(vertex) {
    var t1, sideLength, t2, t3, y, x, r, xDist, yDist, o, obs, t4, t5, pos;
    t1 = vertex.get$nearestObstacle();
    if (typeof t1 !== "number")
      return this.checkVertexForIntersections$1$bailout(1, vertex, t1);
    if (t1 !== 0 || vertex.get$nearestObstacleChecked() === true)
      return;
    t1 = vertex.get$totalCount();
    if (typeof t1 !== "number")
      return this.checkVertexForIntersections$1$bailout(2, vertex, t1);
    sideLength = 2 * (t1 * this.spacing) + 1;
    t1 = vertex.get$positionOnObstacle();
    if (typeof t1 !== "number")
      return this.checkVertexForIntersections$1$bailout(3, vertex, t1, sideLength);
    t2 = J.getInterceptor$x(vertex);
    t3 = t2.get$y(vertex);
    if ((t1 & 1) > 0) {
      if (typeof t3 !== "number")
        return this.checkVertexForIntersections$1$bailout(4, vertex, t3, sideLength);
      y = t3 - sideLength;
    } else {
      if (typeof t3 !== "number")
        return this.checkVertexForIntersections$1$bailout(5, vertex, 0, sideLength, t3);
      y = t3;
    }
    x = t2.get$x(vertex);
    if ((t1 & 16) > 0)
      ;
    else {
      if (typeof x !== "number")
        return this.checkVertexForIntersections$1$bailout(7, vertex, x, sideLength, y);
      x -= sideLength;
    }
    r = new D.Rectangle(sideLength, sideLength, x, y);
    for (xDist = null, yDist = null, o = 0; t1 = this.userObstacles, o < t1.length; ++o) {
      obs = t1[o];
      t1 = J.getInterceptor(obs);
      if (!t1.$eq(obs, vertex.get$obs())) {
        t3 = r.x;
        t4 = r.y;
        t5 = r.width;
        t4 = new D.Rectangle(r.height, t5, t3, t4).intersect$1(obs);
        t3 = t4.width;
        if (typeof t3 !== "number")
          return this.checkVertexForIntersections$1$bailout(8, vertex, t2, 0, 0, o, xDist, yDist, t1, obs, t4, t3, r);
        if (!(t3 <= 0)) {
          t3 = t4.height;
          if (typeof t3 !== "number")
            return this.checkVertexForIntersections$1$bailout(9, vertex, t2, 0, 0, o, xDist, yDist, t1, obs, 0, t3, r);
          t3 = t3 <= 0;
        } else
          t3 = true;
        t3 = !t3;
      } else
        t3 = false;
      if (t3) {
        pos = obs.getPosition$1(vertex);
        if (typeof pos !== "number")
          return this.checkVertexForIntersections$1$bailout(10, vertex, t2, 0, 0, o, xDist, yDist, t1, obs, 0, 0, r, pos);
        if (pos === 0)
          continue;
        t3 = (pos & 1) > 0;
        t4 = t2.get$y(vertex);
        if (typeof t4 !== "number")
          return this.checkVertexForIntersections$1$bailout(11, vertex, t2, 0, 0, o, 0, 0, t1, obs, t3, C.JSNumber_methods, r, pos, t4);
        if (t3) {
          t3 = t1.get$y(obs);
          if (typeof t3 !== "number")
            return this.checkVertexForIntersections$1$bailout(12, vertex, t2, 0, 0, o, 0, 0, t1, obs, t3, C.JSNumber_methods, r, pos, t4);
          yDist = t3 - t4;
        } else {
          t3 = t1.bottom$0(obs);
          if (typeof t3 !== "number")
            return this.checkVertexForIntersections$1$bailout(13, vertex, t2, 0, 0, o, 0, 0, t1, obs, t3, C.JSNumber_methods, r, pos, t4);
          yDist = t4 - t3 + 1;
        }
        t3 = (pos & 16) > 0;
        t4 = t2.get$x(vertex);
        if (typeof t4 !== "number")
          return this.checkVertexForIntersections$1$bailout(14, vertex, t2, 0, 0, o, 0, yDist, t1, obs, t4, t3, r);
        if (t3) {
          t1 = t1.right$0(obs);
          if (typeof t1 !== "number")
            return this.checkVertexForIntersections$1$bailout(15, vertex, t2, 0, 0, o, 0, yDist, t1, 0, t4, 0, r);
          xDist = t4 - t1 + 1;
        } else {
          t1 = t1.get$x(obs);
          if (typeof t1 !== "number")
            return this.checkVertexForIntersections$1$bailout(16, vertex, t2, 0, 0, o, 0, yDist, t1, 0, t4, 0, r);
          xDist = t1 - t4;
        }
        t1 = P.max(xDist, yDist);
        t3 = vertex.get$nearestObstacle();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (t1 < t3 || t3 === 0) {
          vertex.set$nearestObstacle(P.max(xDist, yDist));
          vertex.updateOffset$0();
        }
      }
    }
    vertex.set$nearestObstacleChecked(true);
  },
  "+checkVertexForIntersections:1:0": 1,
  checkVertexForIntersections$1$bailout: function(state0, vertex, t1, sideLength, y, o, xDist, yDist, t2, obs, t4, t3, r, pos, t5) {
    switch (state0) {
      case 0:
        t1 = vertex.get$nearestObstacle();
      case 1:
        state0 = 0;
        if (!J.$eq(t1, 0) || vertex.get$nearestObstacleChecked() === true)
          return;
        t1 = vertex.get$totalCount();
      case 2:
        state0 = 0;
        t1 = J.$mul$n(t1, this.spacing);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        sideLength = 2 * t1 + 1;
        t1 = vertex.get$positionOnObstacle();
      case 3:
        state0 = 0;
        t2 = J.getInterceptor$x(vertex);
      default:
        if (state0 === 4 || state0 === 0 && J.$gt$n(J.$and$n(t1, 1), 0) === true)
          switch (state0) {
            case 0:
              t1 = t2.get$y(vertex);
            case 4:
              state0 = 0;
              y = J.$sub$n(t1, sideLength);
          }
        else
          switch (state0) {
            case 0:
              y = t2.get$y(vertex);
            case 5:
              state0 = 0;
          }
        t1 = vertex.get$positionOnObstacle();
      case 6:
        state0 = 0;
        t2 = J.getInterceptor$x(vertex);
      case 7:
        if (state0 === 0 && J.$gt$n(J.$and$n(t1, 16), 0) === true)
          x = t2.get$x(vertex);
        else
          switch (state0) {
            case 0:
              t1 = t2.get$x(vertex);
            case 7:
              state0 = 0;
              x = J.$sub$n(t1, sideLength);
          }
        r = new D.Rectangle(sideLength, sideLength, x, y);
        t1 = J.getInterceptor$x(vertex);
        xDist = null;
        yDist = null;
        o = 0;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        var x;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.userObstacles;
                if (!(o < t2.length))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      obs = t2[o];
                      t2 = J.getInterceptor(obs);
                    default:
                      if (state0 === 9 || state0 === 8 || state0 === 0 && !t2.$eq(obs, vertex.get$obs()))
                        switch (state0) {
                          case 0:
                            t3 = r.x;
                            t4 = r.y;
                            t5 = r.width;
                            t4 = new D.Rectangle(r.height, t5, t3, t4).intersect$1(obs);
                            t3 = t4.width;
                          case 8:
                            state0 = 0;
                          case 9:
                            if (state0 === 9 || state0 === 0 && J.$le$n(t3, 0) !== true)
                              switch (state0) {
                                case 0:
                                  t3 = t4.height;
                                case 9:
                                  state0 = 0;
                                  t3 = J.$le$n(t3, 0) === true;
                              }
                            else
                              t3 = true;
                            t3 = !t3;
                        }
                      else
                        t3 = false;
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                      if (state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 0 && t3)
                        switch (state0) {
                          case 0:
                            pos = obs.getPosition$1(vertex);
                          case 10:
                            state0 = 0;
                            t3 = J.getInterceptor(pos);
                            if (t3.$eq(pos, 0))
                              break c$0;
                            t4 = J.$gt$n(t3.$and(pos, 1), 0) === true;
                            t5 = t1.get$y(vertex);
                          case 11:
                            state0 = 0;
                          default:
                            if (state0 === 12 || state0 === 0 && t4)
                              switch (state0) {
                                case 0:
                                  t4 = t2.get$y(obs);
                                case 12:
                                  state0 = 0;
                                  yDist = J.$sub$n(t4, t5);
                              }
                            else
                              switch (state0) {
                                case 0:
                                  t4 = t2.bottom$0(obs);
                                case 13:
                                  state0 = 0;
                                  yDist = J.$add$ns(J.$sub$n(t5, t4), 1);
                              }
                            t3 = J.$gt$n(t3.$and(pos, 16), 0) === true;
                            t4 = t1.get$x(vertex);
                          case 14:
                            state0 = 0;
                          case 15:
                          case 16:
                            if (state0 === 15 || state0 === 0 && t3)
                              switch (state0) {
                                case 0:
                                  t2 = t2.right$0(obs);
                                case 15:
                                  state0 = 0;
                                  xDist = J.$add$ns(J.$sub$n(t4, t2), 1);
                              }
                            else
                              switch (state0) {
                                case 0:
                                  t2 = t2.get$x(obs);
                                case 16:
                                  state0 = 0;
                                  xDist = J.$sub$n(t2, t4);
                              }
                            t2 = P.max(xDist, yDist);
                            t3 = vertex.get$nearestObstacle();
                            if (typeof t3 !== "number")
                              throw H.iae(t3);
                            if (t2 < t3 || t3 === 0) {
                              vertex.set$nearestObstacle(P.max(xDist, yDist));
                              vertex.updateOffset$0();
                            }
                        }
                  }
                }
                ++o;
            }
        vertex.set$nearestObstacleChecked(true);
    }
  },
  checkVertexIntersections$0: function() {
    var i, t1, path, s;
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i) {
      path = t1[i];
      s = 0;
      while (true) {
        t1 = J.$sub$n(J.get$length$asx(path.get$segments()), 1);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(s < t1))
          break;
        this.checkVertexForIntersections$1(J.$index$asx(path.get$segments(), s).get$end());
        ++s;
      }
    }
  },
  "+checkVertexIntersections:0:0": 1,
  cleanup$0: function() {
    var i, t1;
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i)
      t1[i].cleanup$0();
  },
  "+cleanup:0:0": 1,
  countVertices$0: function() {
    var i, t1, path, v;
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i) {
      path = t1[i];
      v = 0;
      while (true) {
        t1 = J.$sub$n(J.get$length$asx(path.get$segments()), 1);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(v < t1))
          break;
        t1 = J.$index$asx(path.get$segments(), v).get$end();
        t1.set$totalCount(J.$add$ns(t1.get$totalCount(), 1));
        ++v;
      }
    }
  },
  "+countVertices:0:0": 1,
  getNearestVertex$3: function(v1, v2, segment) {
    var t1, t2, t3;
    t1 = J.getInterceptor$x(segment);
    t2 = t1.get$start(segment).getDistance$1(v1);
    if (typeof t2 !== "number")
      return this.getNearestVertex$3$bailout(1, v2, v1, segment, t1, t2);
    t3 = segment.get$end().getDistance$1(v1);
    if (typeof t3 !== "number")
      return this.getNearestVertex$3$bailout(2, v2, v1, segment, t1, t2, t3);
    t3 = t2 + t3;
    t1 = t1.get$start(segment).getDistance$1(v2);
    if (typeof t1 !== "number")
      return this.getNearestVertex$3$bailout(3, v2, v1, segment, t1, 0, t3);
    t2 = segment.get$end().getDistance$1(v2);
    if (typeof t2 !== "number")
      return this.getNearestVertex$3$bailout(4, v2, v1, 0, t1, t2, t3);
    if (t3 > t1 + t2)
      return v2;
    else
      return v1;
  },
  "+getNearestVertex:3:0": 1,
  getNearestVertex$3$bailout: function(state0, v2, v1, segment, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = J.getInterceptor$x(segment);
        t2 = t1.get$start(segment).getDistance$1(v1);
      case 1:
        state0 = 0;
        t3 = segment.get$end().getDistance$1(v1);
      case 2:
        state0 = 0;
        t3 = J.$add$ns(t2, t3);
        t1 = t1.get$start(segment).getDistance$1(v2);
      case 3:
        state0 = 0;
        t2 = segment.get$end().getDistance$1(v2);
      case 4:
        state0 = 0;
        if (J.$gt$n(t3, J.$add$ns(t1, t2)) === true)
          return v2;
        else
          return v1;
    }
  },
  growObstacles$0: function() {
    this.growPassChangedObstacles = false;
    for (var i = 0; i < 2; ++i)
      if (i === 0 || this.growPassChangedObstacles)
        this.growObstaclesPass$0();
  },
  "+growObstacles:0:0": 1,
  growObstaclesPass$0: function() {
    var i, t1, path, e, s, currentSegments, counter;
    for (i = 0; t1 = this.userObstacles, i < t1.length; ++i)
      t1[i].growVertices$0();
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i) {
      path = t1[i];
      e = 0;
      while (true) {
        t1 = J.get$length$asx(path.get$excludedObstacles());
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(e < t1))
          break;
        t1 = path.get$excludedObstacles();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
          return this.growObstaclesPass$0$bailout(1, e, t1, path, i);
        if (e >= t1.length)
          throw H.ioore(t1, e);
        t1[e].set$exclude(true);
        ++e;
      }
      t1 = J.get$length$asx(path.get$grownSegments());
      if (typeof t1 !== "number")
        return this.growObstaclesPass$0$bailout(2, 0, t1, path, i);
      if (t1 === 0) {
        s = 0;
        while (true) {
          t1 = J.get$length$asx(path.get$segments());
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (!(s < t1))
            break;
          t1 = path.get$segments();
          if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
            return this.growObstaclesPass$0$bailout(3, 0, t1, path, i, s);
          if (s >= t1.length)
            throw H.ioore(t1, s);
          this.testOffsetSegmentForIntersections$3(t1[s], -1, path);
          ++s;
        }
      } else {
        currentSegments = P.List_List$from(path.get$grownSegments(), true, null);
        for (counter = 0, s = 0; s < currentSegments.length; ++s)
          counter += this.testOffsetSegmentForIntersections$3(currentSegments[s], s + counter, path);
      }
      e = 0;
      while (true) {
        t1 = J.get$length$asx(path.get$excludedObstacles());
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(e < t1))
          break;
        t1 = path.get$excludedObstacles();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
          return this.growObstaclesPass$0$bailout(4, e, t1, path, i);
        if (e >= t1.length)
          throw H.ioore(t1, e);
        t1[e].set$exclude(false);
        ++e;
      }
    }
    for (i = 0; t1 = this.userObstacles, i < t1.length; ++i)
      t1[i].shrinkVertices$0();
  },
  "+growObstaclesPass:0:0": 1,
  growObstaclesPass$0$bailout: function(state0, e, t1, path, i, s) {
    switch (state0) {
      case 0:
        for (i = 0; t1 = this.userObstacles, i < t1.length; ++i)
          t1[i].growVertices$0();
        i = 0;
      default:
        var currentSegments, counter;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.workingPaths;
                if (!(i < t1.length))
                  break L0;
                path = t1[i];
                e = 0;
              case 1:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t1 = J.get$length$asx(path.get$excludedObstacles());
                        if (typeof t1 !== "number")
                          throw H.iae(t1);
                        if (!(e < t1))
                          break L1;
                        t1 = path.get$excludedObstacles();
                      case 1:
                        state0 = 0;
                        J.$index$asx(t1, e).set$exclude(true);
                        ++e;
                    }
                t1 = J.get$length$asx(path.get$grownSegments());
              case 2:
                state0 = 0;
              case 3:
                if (state0 === 3 || state0 === 0 && J.$eq(t1, 0))
                  switch (state0) {
                    case 0:
                      s = 0;
                    case 3:
                      L2:
                        while (true)
                          switch (state0) {
                            case 0:
                              t1 = J.get$length$asx(path.get$segments());
                              if (typeof t1 !== "number")
                                throw H.iae(t1);
                              if (!(s < t1))
                                break L2;
                              t1 = path.get$segments();
                            case 3:
                              state0 = 0;
                              this.testOffsetSegmentForIntersections$3(J.$index$asx(t1, s), -1, path);
                              ++s;
                          }
                  }
                else {
                  currentSegments = P.List_List$from(path.get$grownSegments(), true, null);
                  for (counter = 0, s = 0; s < currentSegments.length; ++s)
                    counter += this.testOffsetSegmentForIntersections$3(currentSegments[s], s + counter, path);
                }
                e = 0;
              case 4:
                L3:
                  while (true)
                    switch (state0) {
                      case 0:
                        t1 = J.get$length$asx(path.get$excludedObstacles());
                        if (typeof t1 !== "number")
                          throw H.iae(t1);
                        if (!(e < t1))
                          break L3;
                        t1 = path.get$excludedObstacles();
                      case 4:
                        state0 = 0;
                        J.$index$asx(t1, e).set$exclude(false);
                        ++e;
                    }
                ++i;
            }
        for (i = 0; t1 = this.userObstacles, i < t1.length; ++i)
          t1[i].shrinkVertices$0();
    }
  },
  labelPath$1: function(path) {
    var agree, v, t1, t2, segment, nextSegment, vertex, crossProduct, t3, newPath, i, nextPath;
    agree = false;
    v = 0;
    while (true) {
      t1 = J.get$length$asx(path.get$grownSegments());
      if (typeof t1 !== "number")
        return this.labelPath$1$bailout(1, path, agree, v, t1);
      if (!(v < t1 - 1))
        break;
      t1 = path.get$grownSegments();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.labelPath$1$bailout(2, path, agree, v, t1);
      t2 = t1.length;
      if (v >= t2)
        throw H.ioore(t1, v);
      segment = t1[v];
      ++v;
      if (v >= t2)
        throw H.ioore(t1, v);
      nextSegment = t1[v];
      vertex = segment.get$end();
      t1 = vertex.get$obs().get$center();
      t2 = new D.Segment(null, null);
      t2.start = vertex;
      t2.end = t1;
      crossProduct = segment.crossProduct$1(t2);
      if (typeof crossProduct !== "number")
        return this.labelPath$1$bailout(4, path, agree, v, 0, segment, vertex, nextSegment, crossProduct);
      t1 = J.getInterceptor$x(vertex);
      t2 = t1.get$type(vertex);
      if (typeof t2 !== "number")
        return this.labelPath$1$bailout(5, path, agree, v, t1, segment, vertex, nextSegment, crossProduct, t2);
      if (t2 === 0)
        this.labelVertex$3(segment, crossProduct, path);
      else {
        t1 = path.get$isInverted() === true;
        if (!t1)
          if (!(crossProduct > 0 && t2 === 2))
            t3 = crossProduct < 0 && t2 === 1;
          else
            t3 = true;
        else
          t3 = false;
        if (t3)
          if (agree) {
            t1 = this.stack;
            newPath = path.getSubPath$1(segment);
            this.workingPaths.push(newPath);
            this.subPaths.push(newPath);
            t1.push(newPath);
            return;
          } else {
            path.set$isInverted(true);
            path.invertPriorVertices$1(segment);
          }
        else {
          if (t1)
            if (!(crossProduct < 0 && t2 === 2))
              t1 = crossProduct > 0 && t2 === 1;
            else
              t1 = true;
          else
            t1 = false;
          if (t1) {
            t1 = this.stack;
            newPath = path.getSubPath$1(segment);
            this.workingPaths.push(newPath);
            this.subPaths.push(newPath);
            t1.push(newPath);
            return;
          }
          agree = true;
        }
      }
      if (vertex.get$paths() != null) {
        i = 0;
        while (true) {
          t1 = J.get$length$asx(vertex.get$paths());
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (!(i < t1))
            break;
          t1 = vertex.get$paths();
          if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
            return this.labelPath$1$bailout(10, path, agree, v, t1, segment, vertex, nextSegment, 0, 0, 0, i);
          if (i >= t1.length)
            throw H.ioore(t1, i);
          nextPath = t1[i];
          if (nextPath.get$isMarked() !== true) {
            nextPath.set$isMarked(true);
            this.stack.push(nextPath);
          }
          ++i;
        }
      }
      vertex.addPath$3(path, segment, nextSegment);
    }
  },
  "+labelPath:1:0": 1,
  labelPath$1$bailout: function(state0, path, agree, v, t1, segment, vertex, nextSegment, crossProduct, t2, t3, i) {
    switch (state0) {
      case 0:
        agree = false;
        v = 0;
      default:
        var newPath, nextPath;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = J.get$length$asx(path.get$grownSegments());
              case 1:
                state0 = 0;
                t1 = J.$sub$n(t1, 1);
                if (typeof t1 !== "number")
                  throw H.iae(t1);
                if (!(v < t1))
                  break L0;
                t1 = path.get$grownSegments();
              case 2:
                state0 = 0;
                segment = J.$index$asx(t1, v);
                t1 = path.get$grownSegments();
              case 3:
                state0 = 0;
                ++v;
                nextSegment = J.$index$asx(t1, v);
                vertex = segment.get$end();
                t1 = vertex.get$obs().get$center();
                t2 = new D.Segment(null, null);
                t2.start = vertex;
                t2.end = t1;
                crossProduct = segment.crossProduct$1(t2);
              case 4:
                state0 = 0;
                t1 = J.getInterceptor$x(vertex);
                t2 = t1.get$type(vertex);
              case 5:
                state0 = 0;
              default:
                if (state0 === 0 && J.$eq(t2, 0))
                  this.labelVertex$3(segment, crossProduct, path);
                else
                  switch (state0) {
                    case 0:
                    default:
                      if (state0 === 7 || state0 === 6 || state0 === 0 && path.get$isInverted() !== true)
                        switch (state0) {
                          case 0:
                            t2 = J.getInterceptor$n(crossProduct);
                          case 6:
                            if (state0 === 6 || state0 === 0 && t2.$gt(crossProduct, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3 = t1.get$type(vertex);
                                case 6:
                                  state0 = 0;
                                  t3 = J.$eq(t3, 2);
                              }
                            else
                              t3 = false;
                          case 7:
                            if (state0 === 7 || state0 === 0 && !t3)
                              switch (state0) {
                                case 0:
                                case 7:
                                  if (state0 === 7 || state0 === 0 && t2.$lt(crossProduct, 0) === true)
                                    switch (state0) {
                                      case 0:
                                        t2 = t1.get$type(vertex);
                                      case 7:
                                        state0 = 0;
                                        t2 = J.$eq(t2, 1);
                                    }
                                  else
                                    t2 = false;
                              }
                            else
                              t2 = true;
                        }
                      else
                        t2 = false;
                    case 8:
                    case 9:
                      if (state0 === 0 && t2)
                        if (agree) {
                          t1 = this.stack;
                          newPath = path.getSubPath$1(segment);
                          this.workingPaths.push(newPath);
                          this.subPaths.push(newPath);
                          t1.push(newPath);
                          return;
                        } else {
                          path.set$isInverted(true);
                          path.invertPriorVertices$1(segment);
                        }
                      else
                        switch (state0) {
                          case 0:
                          default:
                            if (state0 === 9 || state0 === 8 || state0 === 0 && path.get$isInverted() === true)
                              switch (state0) {
                                case 0:
                                  t2 = J.getInterceptor$n(crossProduct);
                                case 8:
                                  if (state0 === 8 || state0 === 0 && t2.$lt(crossProduct, 0) === true)
                                    switch (state0) {
                                      case 0:
                                        t3 = t1.get$type(vertex);
                                      case 8:
                                        state0 = 0;
                                        t3 = J.$eq(t3, 2);
                                    }
                                  else
                                    t3 = false;
                                case 9:
                                  if (state0 === 9 || state0 === 0 && !t3)
                                    switch (state0) {
                                      case 0:
                                      case 9:
                                        if (state0 === 9 || state0 === 0 && t2.$gt(crossProduct, 0) === true)
                                          switch (state0) {
                                            case 0:
                                              t1 = t1.get$type(vertex);
                                            case 9:
                                              state0 = 0;
                                              t1 = J.$eq(t1, 1);
                                          }
                                        else
                                          t1 = false;
                                    }
                                  else
                                    t1 = true;
                              }
                            else
                              t1 = false;
                            if (t1) {
                              t1 = this.stack;
                              newPath = path.getSubPath$1(segment);
                              this.workingPaths.push(newPath);
                              this.subPaths.push(newPath);
                              t1.push(newPath);
                              return;
                            }
                            agree = true;
                        }
                  }
              case 10:
                if (state0 === 10 || state0 === 0 && vertex.get$paths() != null)
                  switch (state0) {
                    case 0:
                      i = 0;
                    case 10:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t1 = J.get$length$asx(vertex.get$paths());
                              if (typeof t1 !== "number")
                                throw H.iae(t1);
                              if (!(i < t1))
                                break L1;
                              t1 = vertex.get$paths();
                            case 10:
                              state0 = 0;
                              nextPath = J.$index$asx(t1, i);
                              if (nextPath.get$isMarked() !== true) {
                                nextPath.set$isMarked(true);
                                this.stack.push(nextPath);
                              }
                              ++i;
                          }
                  }
                vertex.addPath$3(path, segment, nextSegment);
            }
    }
  },
  labelPaths$0: function() {
    var i, t1, path, t2;
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i) {
      path = t1[i];
      this.stack.push(path);
    }
    for (; t1 = this.stack, t2 = t1.length, t2 !== 0;) {
      if (0 >= t2)
        throw H.ioore(t1, 0);
      path = t1.pop();
      if (path.get$isMarked() !== true) {
        path.set$isMarked(true);
        this.labelPath$1(path);
      }
    }
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i)
      t1[i].set$isMarked(false);
  },
  "+labelPaths:0:0": 1,
  labelVertex$3: function(segment, crossProduct, path) {
    var t1, t2;
    if (typeof crossProduct !== "number")
      return this.labelVertex$3$bailout(1, segment, path, crossProduct);
    if (crossProduct > 0)
      if (path.get$isInverted() === true)
        J.set$type$x(segment.get$end(), 2);
      else
        J.set$type$x(segment.get$end(), 1);
    else if (crossProduct < 0)
      if (path.get$isInverted() === true)
        J.set$type$x(segment.get$end(), 1);
      else
        J.set$type$x(segment.get$end(), 2);
    else {
      t1 = J.getInterceptor$x(segment);
      t2 = J.get$type$x(t1.get$start(segment));
      if (typeof t2 !== "number")
        return this.labelVertex$3$bailout(2, segment, 0, 0, t1, t2);
      if (t2 !== 0)
        J.set$type$x(segment.get$end(), J.get$type$x(t1.get$start(segment)));
      else
        J.set$type$x(segment.get$end(), 1);
    }
  },
  "+labelVertex:3:0": 1,
  labelVertex$3$bailout: function(state0, segment, path, crossProduct, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = J.getInterceptor$n(crossProduct);
      case 2:
        if (state0 === 0 && t1.$gt(crossProduct, 0) === true)
          if (path.get$isInverted() === true)
            J.set$type$x(segment.get$end(), 2);
          else
            J.set$type$x(segment.get$end(), 1);
        else
          switch (state0) {
            case 0:
            case 2:
              if (state0 === 0 && t1.$lt(crossProduct, 0) === true)
                if (path.get$isInverted() === true)
                  J.set$type$x(segment.get$end(), 1);
                else
                  J.set$type$x(segment.get$end(), 2);
              else
                switch (state0) {
                  case 0:
                    t1 = J.getInterceptor$x(segment);
                    t2 = J.get$type$x(t1.get$start(segment));
                  case 2:
                    state0 = 0;
                    if (!J.$eq(t2, 0))
                      J.set$type$x(segment.get$end(), J.get$type$x(t1.get$start(segment)));
                    else
                      J.set$type$x(segment.get$end(), 1);
                }
          }
    }
  },
  orderPath$1: function(path) {
    var v, t1, vertex, thisAngle, i, vPath, otherAngle;
    if (path.get$isMarked() === true)
      return;
    path.set$isMarked(true);
    v = 0;
    while (true) {
      t1 = J.get$length$asx(path.get$grownSegments());
      if (typeof t1 !== "number")
        return this.orderPath$1$bailout(1, v, path, t1);
      if (!(v < t1 - 1))
        break;
      t1 = path.get$grownSegments();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.orderPath$1$bailout(2, v, path, t1);
      if (v >= t1.length)
        throw H.ioore(t1, v);
      vertex = t1[v].get$end();
      t1 = vertex.get$cachedCosines();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.orderPath$1$bailout(3, v, path, t1, vertex);
      if (path >>> 0 !== path || path >= t1.length)
        throw H.ioore(t1, path);
      thisAngle = t1[path];
      if (typeof thisAngle !== "number")
        return this.orderPath$1$bailout(4, v, path, 0, vertex, thisAngle);
      path.get$isInverted();
      i = 0;
      while (true) {
        t1 = J.get$length$asx(vertex.get$paths());
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(i < t1))
          break;
        t1 = vertex.get$paths();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
          return this.orderPath$1$bailout(5, v, path, t1, vertex, thisAngle, i);
        if (i >= t1.length)
          throw H.ioore(t1, i);
        vPath = t1[i];
        if (vPath.get$isMarked() !== true) {
          t1 = vertex.get$cachedCosines();
          if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
            return this.orderPath$1$bailout(6, v, path, t1, vertex, thisAngle, i, vPath);
          if (vPath >>> 0 !== vPath || vPath >= t1.length)
            throw H.ioore(t1, vPath);
          otherAngle = t1[vPath].doubleValue$0();
          if (typeof otherAngle !== "number")
            return this.orderPath$1$bailout(7, v, path, 0, vertex, thisAngle, i, vPath, otherAngle);
          vPath.get$isInverted();
          if (otherAngle < thisAngle)
            this.orderPath$1(vPath);
        }
        ++i;
      }
      ++v;
    }
    this.orderedPaths.push(path);
  },
  "+orderPath:1:0": 1,
  orderPath$1$bailout: function(state0, v, path, t1, vertex, thisAngle, i, vPath, otherAngle) {
    switch (state0) {
      case 0:
        if (path.get$isMarked() === true)
          return;
        path.set$isMarked(true);
        v = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = J.get$length$asx(path.get$grownSegments());
              case 1:
                state0 = 0;
                t1 = J.$sub$n(t1, 1);
                if (typeof t1 !== "number")
                  throw H.iae(t1);
                if (!(v < t1))
                  break L0;
                t1 = path.get$grownSegments();
              case 2:
                state0 = 0;
                vertex = J.$index$asx(t1, v).get$end();
                t1 = vertex.get$cachedCosines();
              case 3:
                state0 = 0;
                thisAngle = J.$index$asx(t1, path);
              case 4:
                state0 = 0;
                if (path.get$isInverted() === true)
                  thisAngle = J.$negate$n(thisAngle);
                i = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t1 = J.get$length$asx(vertex.get$paths());
                        if (typeof t1 !== "number")
                          throw H.iae(t1);
                        if (!(i < t1))
                          break L1;
                        t1 = vertex.get$paths();
                      case 5:
                        state0 = 0;
                        vPath = J.$index$asx(t1, i);
                      default:
                        if (state0 === 7 || state0 === 6 || state0 === 0 && vPath.get$isMarked() !== true)
                          switch (state0) {
                            case 0:
                              t1 = vertex.get$cachedCosines();
                            case 6:
                              state0 = 0;
                              otherAngle = J.$index$asx(t1, vPath).doubleValue$0();
                            case 7:
                              state0 = 0;
                              if (J.$lt$n(vPath.get$isInverted() === true ? J.$negate$n(otherAngle) : otherAngle, thisAngle) === true)
                                this.orderPath$1(vPath);
                          }
                        ++i;
                    }
                ++v;
            }
        this.orderedPaths.push(path);
    }
  },
  orderPaths$0: function() {
    var i, t1;
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i)
      this.orderPath$1(t1[i]);
  },
  "+orderPaths:0:0": 1,
  recombineChildrenPaths$0: function() {
    var t1, t2, path, childPaths, childPath, i, t3, t4;
    for (t1 = this.pathsToChildPaths, t2 = new P.LinkedHashMapKeyIterable(t1), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]), t2 = t2._map, t2 = new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), t2._cell = t2._map._first; t2.moveNext$0();) {
      path = t2._liblib1$_current;
      path.fullReset$0();
      t1 = this.pathsToChildPaths;
      childPaths = t1.$index(t1, path);
      if (typeof childPaths !== "string" && (typeof childPaths !== "object" || childPaths === null || childPaths.constructor !== Array && !H.isJsIndexable(childPaths, childPaths[init.dispatchPropertyName])))
        return this.recombineChildrenPaths$0$bailout(1, path, childPaths, t2);
      for (t1 = J.getInterceptor$x(path), childPath = null, i = 0; t3 = childPaths.length, t4 = t1.get$points(path), i < t3; ++i) {
        childPath = childPaths[i];
        J.addAll$1$ax(t4, childPath.getPoints$0());
        t3 = t1.get$points(path);
        t3.removePoint$1(J.$sub$n(J.get$length$asx(t3), 1));
        J.addAll$1$ax(path.get$segments(), childPath.get$segments());
        J.addAll$1$ax(path.get$visibleObstacles(), childPath.get$visibleObstacles());
      }
      t4.addPoint$1(J.get$last$ax(J.get$points$x(childPath)));
    }
  },
  "+recombineChildrenPaths:0:0": 1,
  recombineChildrenPaths$0$bailout: function(state0, path, childPaths, t2) {
    switch (state0) {
      case 0:
        t1 = this.pathsToChildPaths;
        t2 = new P.LinkedHashMapKeyIterable(t1);
        H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
        t2 = t2._map;
        t2 = new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null);
        t2._cell = t2._map._first;
      case 1:
        var t1, t3, childPath, i, t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t2.moveNext$0())
                  break L0;
                path = t2._liblib1$_current;
                path.fullReset$0();
                t1 = this.pathsToChildPaths;
                childPaths = t1.$index(t1, path);
              case 1:
                state0 = 0;
                t1 = J.getInterceptor$asx(childPaths);
                t3 = J.getInterceptor$x(path);
                childPath = null;
                i = 0;
                while (true) {
                  t4 = t1.get$length(childPaths);
                  if (typeof t4 !== "number")
                    throw H.iae(t4);
                  if (!(i < t4))
                    break;
                  childPath = t1.$index(childPaths, i);
                  J.addAll$1$ax(t3.get$points(path), childPath.getPoints$0());
                  t4 = t3.get$points(path);
                  t4.removePoint$1(J.$sub$n(J.get$length$asx(t4), 1));
                  J.addAll$1$ax(path.get$segments(), childPath.get$segments());
                  J.addAll$1$ax(path.get$visibleObstacles(), childPath.get$visibleObstacles());
                  ++i;
                }
                t3.get$points(path).addPoint$1(J.get$last$ax(J.get$points$x(childPath)));
            }
    }
  },
  recombineSubpaths$0: function() {
    var p, t1;
    for (p = 0; t1 = this.orderedPaths, p < t1.length; ++p)
      t1[p].reconnectSubPaths$0();
    D.Collections_removeAll(t1, this.subPaths);
    D.Collections_removeAll(this.workingPaths, this.subPaths);
    this.subPaths = null;
  },
  "+recombineSubpaths:0:0": 1,
  resetObstacleExclusions$0: function() {
    var i, t1;
    for (i = 0; t1 = this.userObstacles, i < t1.length; ++i)
      t1[i].set$exclude(false);
  },
  "+resetObstacleExclusions:0:0": 1,
  resetVertices$0: function() {
    var i, t1, path;
    for (i = 0; t1 = this.userObstacles, i < t1.length; ++i)
      J.reset$0$x(t1[i]);
    for (i = 0; t1 = this.workingPaths, i < t1.length; ++i) {
      path = t1[i];
      J.get$start$x(path).fullReset$0();
      path.get$end().fullReset$0();
    }
  },
  "+resetVertices:0:0": 1,
  solve$0: function() {
    this.solveDirtyPaths$0();
    this.countVertices$0();
    this.checkVertexIntersections$0();
    this.growObstacles$0();
    this.subPaths = P.List_List(null, null);
    this.stack = P.List_List(null, null);
    this.labelPaths$0();
    this.stack = null;
    this.orderedPaths = P.List_List(null, null);
    this.orderPaths$0();
    this.bendPaths$0();
    this.recombineSubpaths$0();
    this.orderedPaths = null;
    this.subPaths = null;
    this.recombineChildrenPaths$0();
    this.cleanup$0();
    return P.List_List$from(this.userPaths, true, null);
  },
  "+solve:0:0": 1,
  solveDirtyPaths$0: function() {
    var i, t1, path, children, prevCount, numSolved;
    for (i = 0; t1 = this.userPaths, i < t1.length; ++i) {
      path = t1[i];
      if (!path.isDirty)
        continue;
      t1 = this.pathsToChildPaths;
      children = t1.$index(t1, path);
      if (children == null) {
        children = [];
        prevCount = 1;
      } else
        prevCount = J.get$length$asx(children);
      path.getBendPoints$0();
      this.refreshChildrenEndpoints$2(path, !J.$eq(prevCount, 1) ? this.regenerateChildPaths$4(path, children, prevCount, 1) : children);
    }
    for (numSolved = 0, i = 0; t1 = this.workingPaths, i < t1.length; ++i) {
      path = t1[i];
      path.refreshExcludedObstacles$1(this.userObstacles);
      if (path.get$isDirty() !== true) {
        path.resetPartial$0();
        continue;
      }
      ++numSolved;
      path.fullReset$0();
      if (path.generateShortestPath$1(this.userObstacles) !== true || J.$gt$n(path.get$end().get$cost(), path.get$threshold()) === true) {
        this.resetVertices$0();
        path.fullReset$0();
        path.set$threshold(0);
        path.generateShortestPath$1(this.userObstacles);
      }
      this.resetVertices$0();
    }
    this.resetObstacleExclusions$0();
    if (numSolved === 0)
      this.resetVertices$0();
    return numSolved;
  },
  "+solveDirtyPaths:0:0": 1,
  refreshChildrenEndpoints$2: function(path, children) {
    var previous, bendpoints, t1, t2, i, t3, next, child;
    if (typeof children !== "string" && (typeof children !== "object" || children === null || children.constructor !== Array && !H.isJsIndexable(children, children[init.dispatchPropertyName])))
      return this.refreshChildrenEndpoints$2$bailout(1, children, path);
    previous = path.getStartPoint$0();
    bendpoints = path.getBendPoints$0();
    for (t1 = J.getInterceptor(children), t2 = J.getInterceptor$asx(bendpoints), i = 0; i < children.length; ++i, previous = next) {
      t3 = t2.get$length(bendpoints);
      if (t3 !== (t3 | 0))
        return this.refreshChildrenEndpoints$2$bailout(2, children, path, i, previous, t1, t2, bendpoints, t3);
      next = i < t3 ? t2.$index(bendpoints, i) : path.getEndPoint$0();
      if (i >= children.length)
        throw H.ioore(children, i);
      child = children[i];
      child.setStartPoint$1(previous);
      child.setEndPoint$1(next);
    }
  },
  "+refreshChildrenEndpoints:2:0": 1,
  refreshChildrenEndpoints$2$bailout: function(state0, children, path, i, previous, t1, t2, bendpoints, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        previous = path.getStartPoint$0();
        bendpoints = path.getBendPoints$0();
        t1 = J.getInterceptor$asx(children);
        t2 = J.getInterceptor$asx(bendpoints);
        i = 0;
      case 2:
        var next, child;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = t1.get$length(children);
                if (typeof t3 !== "number")
                  throw H.iae(t3);
                if (!(i < t3))
                  break L0;
                t3 = t2.get$length(bendpoints);
              case 2:
                state0 = 0;
                if (typeof t3 !== "number")
                  throw H.iae(t3);
                next = i < t3 ? t2.$index(bendpoints, i) : path.getEndPoint$0();
                child = t1.$index(children, i);
                child.setStartPoint$1(previous);
                child.setEndPoint$1(next);
                ++i;
                previous = next;
            }
    }
  },
  regenerateChildPaths$4: function(path, children, currentSize, newSize) {
    var t1, i, t2, t3, child;
    if (typeof children !== "object" || children === null || (children.constructor !== Array || !!children.immutable$list) && !H.isJsIndexable(children, children[init.dispatchPropertyName]))
      return this.regenerateChildPaths$4$bailout(1, newSize, path, children, currentSize);
    if (typeof currentSize !== "number")
      return this.regenerateChildPaths$4$bailout(1, newSize, path, children, currentSize);
    if (typeof newSize !== "number")
      return this.regenerateChildPaths$4$bailout(1, newSize, path, children, currentSize);
    if (currentSize === 1) {
      t1 = this.workingPaths;
      i = C.JSArray_methods.indexOf$1(t1, path);
      if (typeof i !== "number")
        return this.regenerateChildPaths$4$bailout(2, newSize, path, 0, 0, t1, i);
      if (i !== -1)
        C.JSArray_methods.removeAt$1(t1, i);
      children = P.List_List(newSize, null);
      t1 = this.pathsToChildPaths;
      t1.$indexSet(t1, path, children);
      currentSize = 0;
    } else if (newSize === 1) {
      D.Collections_removeAll(this.workingPaths, children);
      this.workingPaths.push(path);
      t1 = this.pathsToChildPaths;
      t1.remove$1(t1, path);
      return [];
    }
    for (; currentSize < newSize;) {
      t1 = P.List_List(null, null);
      t2 = P.List_List(null, null);
      t3 = P.List_List(null, D.Point);
      t3.$builtinTypeInfo = [D.Point];
      child = new D.Path(null, null, t1, t2, true, false, false, new D.PointList(t3, null), 0, P.List_List(null, null), new D.SegmentStack(P.List_List(null, null)), null, null, null, 0, P.LinkedHashSet_LinkedHashSet(null, null, null, null), P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      child.start = null;
      child.end = null;
      this.workingPaths.push(child);
      C.JSArray_methods.add$1(children, child);
      ++currentSize;
    }
    for (; currentSize > newSize;) {
      child = C.JSArray_methods.removeLast$0(children);
      t1 = this.workingPaths;
      i = C.JSArray_methods.indexOf$1(t1, child);
      if (typeof i !== "number")
        return this.regenerateChildPaths$4$bailout(3, newSize, 0, children, currentSize, C.JSArray_methods, i, C.JSNumber_methods, t1);
      if (i !== -1)
        C.JSArray_methods.removeAt$1(t1, i);
      --currentSize;
    }
    return children;
  },
  "+regenerateChildPaths:4:0": 1,
  regenerateChildPaths$4$bailout: function(state0, newSize, path, children, currentSize, t1, i, t2, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && J.$eq(currentSize, 1))
          switch (state0) {
            case 0:
              t1 = this.workingPaths;
              i = C.JSArray_methods.indexOf$1(t1, path);
            case 2:
              state0 = 0;
              if (!J.$eq(i, -1))
                C.JSArray_methods.removeAt$1(t1, i);
              children = P.List_List(newSize, null);
              t1 = this.pathsToChildPaths;
              t1.$indexSet(t1, path, children);
              currentSize = 0;
          }
        else if (J.$eq(newSize, 1)) {
          D.Collections_removeAll(this.workingPaths, children);
          this.workingPaths.push(path);
          t1 = this.pathsToChildPaths;
          t1.remove$1(t1, path);
          return [];
        }
        for (t1 = J.getInterceptor$ax(children); t2 = J.getInterceptor$n(currentSize), t2.$lt(currentSize, newSize) === true;) {
          t3 = P.List_List(null, null);
          t4 = P.List_List(null, null);
          t5 = P.List_List(null, D.Point);
          t5.$builtinTypeInfo = [D.Point];
          child = new D.Path(null, null, t3, t4, true, false, false, new D.PointList(t5, null), 0, P.List_List(null, null), new D.SegmentStack(P.List_List(null, null)), null, null, null, 0, P.LinkedHashSet_LinkedHashSet(null, null, null, null), P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          child.start = null;
          child.end = null;
          this.workingPaths.push(child);
          t1.add$1(children, child);
          currentSize = t2.$add(currentSize, 1);
        }
      case 3:
        var t4, t5, child;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = J.getInterceptor$n(currentSize);
                if (!(t2.$gt(currentSize, newSize) === true))
                  break L0;
                child = t1.removeLast$0(children);
                t3 = this.workingPaths;
                i = C.JSArray_methods.indexOf$1(t3, child);
              case 3:
                state0 = 0;
                if (!J.$eq(i, -1))
                  C.JSArray_methods.removeAt$1(t3, i);
                currentSize = t2.$sub(currentSize, 1);
            }
        return children;
    }
  },
  testOffsetSegmentForIntersections$3: function(segment, index, path) {
    var t1, i, t2, obs, offset, t3, t4, t5, t6, vertex, vRect, newSegmentStart, newSegmentEnd;
    for (t1 = J.getInterceptor$x(segment), i = 0; t2 = this.userObstacles, i < t2.length; ++i) {
      obs = t2[i];
      if (J.$eq(segment.get$end().get$obs(), obs) || J.$eq(t1.get$start(segment).get$obs(), obs) || obs.get$exclude() === true)
        continue;
      offset = this.spacing;
      t2 = segment.getSlope$0();
      if (typeof t2 !== "number")
        return this.testOffsetSegmentForIntersections$3$bailout(1, i, index, path, segment, t1, offset, obs, t2);
      if (t2 < 0) {
        t2 = J.getInterceptor$x(obs);
        t3 = J.get$x$x(t2.get$topLeft(obs));
        if (typeof t3 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(2, i, index, path, segment, t1, offset, obs, t2, t3);
        t3 -= offset;
        t4 = J.get$y$x(t2.get$topLeft(obs));
        if (typeof t4 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(3, i, index, path, segment, t1, offset, obs, t2, t3, t4);
        t4 -= offset;
        t5 = J.get$x$x(t2.get$bottomRight(obs));
        if (typeof t5 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(4, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5);
        t5 += offset;
        t6 = J.get$y$x(t2.get$bottomRight(obs));
        if (typeof t6 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(5, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5, t6);
        if (t1.intersects$4(segment, t3, t4, t5, t6 + offset) === true)
          vertex = this.getNearestVertex$3(t2.get$topLeft(obs), t2.get$bottomRight(obs), segment);
        else {
          t2 = J.get$x$x(obs.get$bottomLeft());
          if (typeof t2 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(6, i, index, path, segment, t1, offset, obs, t2);
          t2 -= offset;
          t3 = J.get$y$x(obs.get$bottomLeft());
          if (typeof t3 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(7, i, index, path, segment, t1, offset, obs, t2, t3);
          t3 += offset;
          t4 = J.get$x$x(obs.get$topRight());
          if (typeof t4 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(8, i, index, path, segment, t1, offset, obs, t2, t3, t4);
          t4 += offset;
          t5 = J.get$y$x(obs.get$topRight());
          if (typeof t5 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(9, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5);
          vertex = t1.intersects$4(segment, t2, t3, t4, t5 - offset) === true ? this.getNearestVertex$3(obs.get$bottomLeft(), obs.get$topRight(), segment) : null;
        }
      } else {
        t2 = J.get$x$x(obs.get$bottomLeft());
        if (typeof t2 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(10, i, index, path, segment, t1, offset, obs, t2);
        t2 -= offset;
        t3 = J.get$y$x(obs.get$bottomLeft());
        if (typeof t3 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(11, i, index, path, segment, t1, offset, obs, t2, t3);
        t3 += offset;
        t4 = J.get$x$x(obs.get$topRight());
        if (typeof t4 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(12, i, index, path, segment, t1, offset, obs, t2, t3, t4);
        t4 += offset;
        t5 = J.get$y$x(obs.get$topRight());
        if (typeof t5 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(13, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5);
        if (t1.intersects$4(segment, t2, t3, t4, t5 - offset) === true)
          vertex = this.getNearestVertex$3(obs.get$bottomLeft(), obs.get$topRight(), segment);
        else {
          t2 = J.getInterceptor$x(obs);
          t3 = J.get$x$x(t2.get$topLeft(obs));
          if (typeof t3 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(14, i, index, path, segment, t1, offset, obs, t2, t3);
          t3 -= offset;
          t4 = J.get$y$x(t2.get$topLeft(obs));
          if (typeof t4 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(15, i, index, path, segment, t1, offset, obs, t2, t3, t4);
          t4 -= offset;
          t5 = J.get$x$x(t2.get$bottomRight(obs));
          if (typeof t5 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(16, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5);
          t5 += offset;
          t6 = J.get$y$x(t2.get$bottomRight(obs));
          if (typeof t6 !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(17, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5, t6);
          vertex = t1.intersects$4(segment, t3, t4, t5, t6 + offset) === true ? this.getNearestVertex$3(t2.get$topLeft(obs), t2.get$bottomRight(obs), segment) : null;
        }
      }
      if (vertex != null) {
        vRect = vertex.getDeformedRectangle$1(offset);
        if (segment.get$end().get$obs() != null)
          if (J.intersects$1$x(vRect, segment.get$end().getDeformedRectangle$1(offset)) === true)
            continue;
        if (t1.get$start(segment).get$obs() != null)
          if (J.intersects$1$x(vRect, t1.get$start(segment).getDeformedRectangle$1(offset)) === true)
            continue;
        newSegmentStart = new D.Segment(null, null);
        newSegmentStart.start = t1.get$start(segment);
        newSegmentStart.end = vertex;
        t2 = segment.get$end();
        newSegmentEnd = new D.Segment(null, null);
        newSegmentEnd.start = vertex;
        newSegmentEnd.end = t2;
        t2 = vertex.get$totalCount();
        if (typeof t2 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(18, 0, index, path, segment, t1, 0, 0, t2, 0, 0, 0, 0, newSegmentEnd, newSegmentStart, vertex);
        vertex.set$totalCount(t2 + 1);
        vertex.set$nearestObstacleChecked(false);
        vertex.shrink$0();
        this.checkVertexForIntersections$1(vertex);
        vertex.grow$0();
        t2 = vertex.get$nearestObstacle();
        if (typeof t2 !== "number")
          return this.testOffsetSegmentForIntersections$3$bailout(19, 0, index, path, segment, t1, 0, 0, t2, 0, 0, 0, 0, newSegmentEnd, newSegmentStart, vertex);
        if (t2 !== 0)
          vertex.updateOffset$0();
        this.growPassChangedObstacles = true;
        t2 = path.get$grownSegments();
        if (index !== -1) {
          t3 = J.getInterceptor$asx(t2);
          i = t3.indexOf$1(t2, segment);
          if (typeof i !== "number")
            return this.testOffsetSegmentForIntersections$3$bailout(20, i, index, path, segment, t1, 0, 0, t2, t3, 0, 0, 0, newSegmentEnd, newSegmentStart);
          if (i !== -1)
            t3.removeAt$1(t2, i);
          path.get$grownSegments().insertRange$3(index, 1, newSegmentStart);
          path.get$grownSegments().insertRange$3(index + 1, 1, newSegmentEnd);
        } else {
          J.add$1$ax(t2, newSegmentStart);
          J.add$1$ax(path.get$grownSegments(), newSegmentEnd);
        }
        return 1;
      }
    }
    if (index === -1)
      J.add$1$ax(path.get$grownSegments(), segment);
    return 0;
  },
  "+testOffsetSegmentForIntersections:3:0": 1,
  testOffsetSegmentForIntersections$3$bailout: function(state0, i, index, path, segment, t1, offset, obs, t2, t3, t4, t5, t6, newSegmentEnd, newSegmentStart, vertex) {
    switch (state0) {
      case 0:
        t1 = J.getInterceptor$x(segment);
        i = 0;
      default:
        var vRect;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.userObstacles;
                if (!(i < t2.length))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      obs = t2[i];
                      if (J.$eq(segment.get$end().get$obs(), obs) || J.$eq(t1.get$start(segment).get$obs(), obs) || obs.get$exclude() === true)
                        break c$0;
                      offset = this.spacing;
                      t2 = segment.getSlope$0();
                    case 1:
                      state0 = 0;
                    default:
                      if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && J.$lt$n(t2, 0) === true)
                        switch (state0) {
                          case 0:
                            t2 = J.getInterceptor$x(obs);
                            t3 = J.get$x$x(t2.get$topLeft(obs));
                          case 2:
                            state0 = 0;
                            t3 = J.$sub$n(t3, offset);
                            t4 = J.get$y$x(t2.get$topLeft(obs));
                          case 3:
                            state0 = 0;
                            t4 = J.$sub$n(t4, offset);
                            t5 = J.get$x$x(t2.get$bottomRight(obs));
                          case 4:
                            state0 = 0;
                            t5 = J.$add$ns(t5, offset);
                            t6 = J.get$y$x(t2.get$bottomRight(obs));
                          case 5:
                            state0 = 0;
                          default:
                            if (state0 === 0 && t1.intersects$4(segment, t3, t4, t5, J.$add$ns(t6, offset)) === true)
                              vertex = this.getNearestVertex$3(t2.get$topLeft(obs), t2.get$bottomRight(obs), segment);
                            else
                              switch (state0) {
                                case 0:
                                  t2 = J.get$x$x(obs.get$bottomLeft());
                                case 6:
                                  state0 = 0;
                                  t2 = J.$sub$n(t2, offset);
                                  t3 = J.get$y$x(obs.get$bottomLeft());
                                case 7:
                                  state0 = 0;
                                  t3 = J.$add$ns(t3, offset);
                                  t4 = J.get$x$x(obs.get$topRight());
                                case 8:
                                  state0 = 0;
                                  t4 = J.$add$ns(t4, offset);
                                  t5 = J.get$y$x(obs.get$topRight());
                                case 9:
                                  state0 = 0;
                                  vertex = t1.intersects$4(segment, t2, t3, t4, J.$sub$n(t5, offset)) === true ? this.getNearestVertex$3(obs.get$bottomLeft(), obs.get$topRight(), segment) : null;
                              }
                        }
                      else
                        switch (state0) {
                          case 0:
                            t2 = J.get$x$x(obs.get$bottomLeft());
                          case 10:
                            state0 = 0;
                            t2 = J.$sub$n(t2, offset);
                            t3 = J.get$y$x(obs.get$bottomLeft());
                          case 11:
                            state0 = 0;
                            t3 = J.$add$ns(t3, offset);
                            t4 = J.get$x$x(obs.get$topRight());
                          case 12:
                            state0 = 0;
                            t4 = J.$add$ns(t4, offset);
                            t5 = J.get$y$x(obs.get$topRight());
                          case 13:
                            state0 = 0;
                          default:
                            if (state0 === 0 && t1.intersects$4(segment, t2, t3, t4, J.$sub$n(t5, offset)) === true)
                              vertex = this.getNearestVertex$3(obs.get$bottomLeft(), obs.get$topRight(), segment);
                            else
                              switch (state0) {
                                case 0:
                                  t2 = J.getInterceptor$x(obs);
                                  t3 = J.get$x$x(t2.get$topLeft(obs));
                                case 14:
                                  state0 = 0;
                                  t3 = J.$sub$n(t3, offset);
                                  t4 = J.get$y$x(t2.get$topLeft(obs));
                                case 15:
                                  state0 = 0;
                                  t4 = J.$sub$n(t4, offset);
                                  t5 = J.get$x$x(t2.get$bottomRight(obs));
                                case 16:
                                  state0 = 0;
                                  t5 = J.$add$ns(t5, offset);
                                  t6 = J.get$y$x(t2.get$bottomRight(obs));
                                case 17:
                                  state0 = 0;
                                  vertex = t1.intersects$4(segment, t3, t4, t5, J.$add$ns(t6, offset)) === true ? this.getNearestVertex$3(t2.get$topLeft(obs), t2.get$bottomRight(obs), segment) : null;
                              }
                        }
                    case 18:
                    case 19:
                    case 20:
                      if (state0 === 20 || state0 === 19 || state0 === 18 || state0 === 0 && vertex != null)
                        switch (state0) {
                          case 0:
                            vRect = vertex.getDeformedRectangle$1(offset);
                            if (segment.get$end().get$obs() != null)
                              if (J.intersects$1$x(vRect, segment.get$end().getDeformedRectangle$1(offset)) === true)
                                break c$0;
                            if (t1.get$start(segment).get$obs() != null)
                              if (J.intersects$1$x(vRect, t1.get$start(segment).getDeformedRectangle$1(offset)) === true)
                                break c$0;
                            newSegmentStart = new D.Segment(null, null);
                            newSegmentStart.start = t1.get$start(segment);
                            newSegmentStart.end = vertex;
                            t2 = segment.get$end();
                            newSegmentEnd = new D.Segment(null, null);
                            newSegmentEnd.start = vertex;
                            newSegmentEnd.end = t2;
                            t2 = vertex.get$totalCount();
                          case 18:
                            state0 = 0;
                            vertex.set$totalCount(J.$add$ns(t2, 1));
                            vertex.set$nearestObstacleChecked(false);
                            vertex.shrink$0();
                            this.checkVertexForIntersections$1(vertex);
                            vertex.grow$0();
                            t2 = vertex.get$nearestObstacle();
                          case 19:
                            state0 = 0;
                            if (!J.$eq(t2, 0))
                              vertex.updateOffset$0();
                            this.growPassChangedObstacles = true;
                            t2 = path.get$grownSegments();
                          case 20:
                            if (state0 === 20 || state0 === 0 && index !== -1)
                              switch (state0) {
                                case 0:
                                  t3 = J.getInterceptor$asx(t2);
                                  i = t3.indexOf$1(t2, segment);
                                case 20:
                                  state0 = 0;
                                  if (!J.$eq(i, -1))
                                    t3.removeAt$1(t2, i);
                                  path.get$grownSegments().insertRange$3(index, 1, newSegmentStart);
                                  path.get$grownSegments().insertRange$3(index + 1, 1, newSegmentEnd);
                              }
                            else {
                              J.add$1$ax(t2, newSegmentStart);
                              J.add$1$ax(path.get$grownSegments(), newSegmentEnd);
                            }
                            return 1;
                        }
                  }
                }
                ++i;
            }
        if (index === -1)
          J.add$1$ax(path.get$grownSegments(), segment);
        return 0;
    }
  },
  testAndDirtyPaths$1: function(obs) {
    var result, i, t1;
    for (result = false, i = 0; t1 = this.workingPaths, i < t1.length; ++i)
      result = t1[i].testAndSet$1(obs) === true || result;
    return result;
  },
  "+testAndDirtyPaths:1:0": 1,
  static: {
"": "ShortestPathRouter_NUM_GROW_PASSES-",
}

},

"+ShortestPathRouter": [],

SpanningTreeVisitor: {"": "GraphVisitor;",
  getTreeHead$1: function(edge) {
    var t1, t2;
    t1 = J.getInterceptor$x(edge);
    t2 = t1.get$source(edge).get$workingData();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
      return this.getTreeHead$1$bailout(1, t1, edge, t2);
    if (1 >= t2.length)
      throw H.ioore(t2, 1);
    if (J.$eq(t2[1], edge))
      return t1.get$target(edge);
    return t1.get$source(edge);
  },
  "+getTreeHead:1:0": 1,
  getTreeHead$1$bailout: function(state0, t1, edge, t2) {
    if (J.$eq(J.$index$asx(t2, 1), edge))
      return t1.get$target(edge);
    return t1.get$source(edge);
  },
  getTreeParent$1: function(node) {
    var t1, e;
    t1 = node.get$workingData();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.getTreeParent$1$bailout(1, node, t1);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    e = t1[1];
    if (e == null)
      return;
    return e.opposite$1(node);
  },
  "+getTreeParent:1:0": 1,
  getTreeParent$1$bailout: function(state0, node, t1) {
    var e = J.$index$asx(t1, 1);
    if (e == null)
      return;
    return e.opposite$1(node);
  },
  getTreeTail$1: function(edge) {
    var t1, t2;
    t1 = J.getInterceptor$x(edge);
    t2 = t1.get$source(edge).get$workingData();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !H.isJsIndexable(t2, t2[init.dispatchPropertyName])))
      return this.getTreeTail$1$bailout(1, t1, edge, t2);
    if (1 >= t2.length)
      throw H.ioore(t2, 1);
    if (J.$eq(t2[1], edge))
      return t1.get$source(edge);
    return t1.get$target(edge);
  },
  "+getTreeTail:1:0": 1,
  getTreeTail$1$bailout: function(state0, t1, edge, t2) {
    if (J.$eq(J.$index$asx(t2, 1), edge))
      return t1.get$source(edge);
    return t1.get$target(edge);
  }
},

"+SpanningTreeVisitor": [],

TightSpanningTreeSolver: {"": "SpanningTreeVisitor;graph-,candidates-,members-",
  visit$1: function(graph) {
    this.graph = graph;
    this.init$0();
    this.solve$0();
  },
  "+visit:1:0": 1,
  addEdge$1: function(edge) {
    var delta, t1, node, t2;
    delta = edge.get$slack();
    if (typeof delta !== "number")
      return this.addEdge$1$bailout(1, edge, delta);
    edge.set$tree(true);
    t1 = J.getInterceptor$x(edge);
    if (t1.get$target(edge).get$flag() === true) {
      delta = -delta;
      node = t1.get$source(edge);
      t2 = node.get$workingData();
      if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !H.isJsIndexable(t2, t2[init.dispatchPropertyName]))
        return this.addEdge$1$bailout(2, edge, delta, node, t1, t2);
      if (1 >= t2.length)
        throw H.ioore(t2, 1);
      t2[1] = edge;
      t1 = t1.get$target(edge).get$workingData();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.addEdge$1$bailout(3, edge, delta, node, t1);
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      J.add$1$ax(t1[0], edge);
    } else {
      node = t1.get$target(edge);
      t2 = node.get$workingData();
      if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !H.isJsIndexable(t2, t2[init.dispatchPropertyName]))
        return this.addEdge$1$bailout(4, edge, delta, node, t1, t2);
      if (1 >= t2.length)
        throw H.ioore(t2, 1);
      t2[1] = edge;
      t1 = t1.get$source(edge).get$workingData();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.addEdge$1$bailout(5, edge, delta, node, t1);
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      J.add$1$ax(t1[0], edge);
    }
    this.members.adjustRankSimple$1(delta);
    this.addNode$1(node);
    return node;
  },
  "+addEdge:1:0": 1,
  addEdge$1$bailout: function(state0, edge, delta, node, t1, t2) {
    switch (state0) {
      case 0:
        delta = edge.get$slack();
      case 1:
        state0 = 0;
        edge.set$tree(true);
        t1 = J.getInterceptor$x(edge);
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && t1.get$target(edge).get$flag() === true)
          switch (state0) {
            case 0:
              delta = J.$negate$n(delta);
              node = t1.get$source(edge);
              t2 = node.get$workingData();
            case 2:
              state0 = 0;
              J.$indexSet$ax(t2, 1, edge);
              t1 = t1.get$target(edge).get$workingData();
            case 3:
              state0 = 0;
              J.add$1$ax(J.$index$asx(t1, 0), edge);
          }
        else
          switch (state0) {
            case 0:
              node = t1.get$target(edge);
              t2 = node.get$workingData();
            case 4:
              state0 = 0;
              J.$indexSet$ax(t2, 1, edge);
              t1 = t1.get$source(edge).get$workingData();
            case 5:
              state0 = 0;
              J.add$1$ax(J.$index$asx(t1, 0), edge);
          }
        this.members.adjustRankSimple$1(delta);
        this.addNode$1(node);
        return node;
    }
  },
  addNode$1: function(node) {
    var list, t1, t2, i, t3, e, i0;
    node.set$flag(true);
    list = node.get$incoming();
    t1 = J.getInterceptor$asx(list);
    t2 = this.candidates;
    i = 0;
    while (true) {
      t3 = t1.get$length(list);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (!(i < t3))
        break;
      e = t1.$index(list, i);
      if (J.get$source$x(e).get$flag() !== true) {
        if (e.get$flag() !== true) {
          e.set$flag(true);
          t2.push(e);
        }
      } else {
        i0 = C.JSArray_methods.indexOf$1(t2, e);
        if (!J.$eq(i0, -1))
          C.JSArray_methods.removeAt$1(t2, i0);
      }
      ++i;
    }
    list = node.get$outgoing();
    t1 = J.getInterceptor$asx(list);
    i = 0;
    while (true) {
      t3 = t1.get$length(list);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (!(i < t3))
        break;
      e = t1.$index(list, i);
      if (J.get$target$x(e).get$flag() !== true) {
        if (e.get$flag() !== true) {
          e.set$flag(true);
          t2.push(e);
        }
      } else {
        i0 = C.JSArray_methods.indexOf$1(t2, e);
        if (!J.$eq(i0, -1))
          C.JSArray_methods.removeAt$1(t2, i0);
      }
      ++i;
    }
    t1 = this.members;
    t1.add$1(t1, node);
  },
  "+addNode:1:0": 1,
  init$0: function() {
    var i, t1, t2, t3;
    this.graph.edges.resetFlags$1(true);
    this.graph.nodes.resetFlags$0();
    for (i = 0; t1 = this.graph.nodes.list, i < t1.length; ++i) {
      t1 = t1[i].get$workingData();
      t2 = D.Edge;
      t3 = P.List_List(null, t2);
      t3.$builtinTypeInfo = [t2];
      J.$indexSet$ax(t1, 0, new D.EdgeList(t3));
    }
  },
  "+init:0:0": 1,
  solve$0: function() {
    var t1, root, t2, t3, t4, minSlack, minEdge, i, edge, slack;
    t1 = this.graph.nodes.list;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    root = t1[0];
    J.$indexSet$ax(root.get$workingData(), 1, null);
    this.addNode$1(root);
    for (t1 = this.members.list, t2 = this.candidates; t3 = t1.length, t4 = this.graph.nodes, t3 < t4.list.length;) {
      if (t2.length === 0)
        throw H.wrapException("graph is not fully connected");
      minSlack = 1073741823;
      minEdge = null;
      i = 0;
      while (true) {
        if (!(i < t2.length && J.$gt$n(minSlack, 0) === true))
          break;
        if (i >= t2.length)
          throw H.ioore(t2, i);
        edge = t2[i];
        slack = edge.get$slack();
        if (J.$lt$n(slack, minSlack) === true) {
          minEdge = edge;
          minSlack = slack;
        }
        ++i;
      }
      this.addEdge$1(minEdge);
    }
    t4.normalizeRanks$0();
  },
  "+solve:0:0": 1
},

"+TightSpanningTreeSolver": [],

TransposeMetrics: {"": "GraphVisitor;",
  visit$1: function(g) {
    var t1, t2, i, node, temp;
    if (g.direction === 4)
      return;
    t1 = g.defaultPadding;
    t2 = new D.Insets(0, 0, 0, 0);
    t2.Insets$4(t1.top, t1.left, t1.bottom, t1.right);
    g.defaultPadding = t2.transpose$0();
    for (i = 0; t1 = g.nodes.list, i < t1.length; ++i) {
      node = t1[i];
      t1 = J.getInterceptor$x(node);
      temp = t1.get$width(node);
      t1.set$width(node, t1.get$height(node));
      t1.set$height(node, temp);
      if (t1.get$padding(node) != null)
        t1.set$padding(node, t1.get$padding(node).getTransposed$0());
    }
  },
  "+visit:1:0": 1,
  revisit$1: function(g) {
    var t1, t2, temp, i, node, edge, bends, b, vnode;
    if (g.direction === 4)
      return;
    t1 = g.defaultPadding;
    t2 = new D.Insets(0, 0, 0, 0);
    t2.Insets$4(t1.top, t1.left, t1.bottom, t1.right);
    g.defaultPadding = t2.transpose$0();
    for (temp = null, i = 0; t1 = g.nodes.list, i < t1.length; ++i) {
      node = t1[i];
      t1 = J.getInterceptor$x(node);
      temp = t1.get$width(node);
      t1.set$width(node, t1.get$height(node));
      t1.set$height(node, temp);
      temp = t1.get$y(node);
      t1.set$y(node, t1.get$x(node));
      t1.set$x(node, temp);
      if (t1.get$padding(node) != null)
        t1.set$padding(node, t1.get$padding(node).getTransposed$0());
    }
    for (i = 0; t1 = g.edges.list, i < t1.length; ++i) {
      edge = t1[i];
      t1 = J.getInterceptor$x(edge);
      t1.get$start(edge).transpose$0();
      edge.get$end().transpose$0();
      t1.get$points(edge).transpose$0();
      bends = J.get$list$x(edge.get$vNodes());
      if (typeof bends !== "string" && (typeof bends !== "object" || bends === null || bends.constructor !== Array && !H.isJsIndexable(bends, bends[init.dispatchPropertyName])))
        return this.revisit$1$bailout1(1, i, temp, bends, g);
      for (b = 0; b < bends.length; ++b) {
        vnode = bends[b];
        t1 = J.getInterceptor$x(vnode);
        temp = t1.get$y(vnode);
        t1.set$y(vnode, t1.get$x(vnode));
        t1.set$x(vnode, temp);
        temp = t1.get$width(vnode);
        t1.set$width(vnode, t1.get$height(vnode));
        t1.set$height(vnode, temp);
      }
    }
    g.size.transpose$0();
  },
  "+revisit:1:0": 1,
  revisit$1$bailout1: function(state0, i, temp, bends, g) {
    switch (state0) {
      case 0:
        if (g.direction === 4)
          return;
        t1 = g.defaultPadding;
        t2 = new D.Insets(0, 0, 0, 0);
        t2.Insets$4(t1.top, t1.left, t1.bottom, t1.right);
        g.defaultPadding = t2.transpose$0();
        for (temp = null, i = 0; t1 = g.nodes.list, i < t1.length; ++i) {
          node = t1[i];
          t1 = J.getInterceptor$x(node);
          temp = t1.get$width(node);
          t1.set$width(node, t1.get$height(node));
          t1.set$height(node, temp);
          temp = t1.get$y(node);
          t1.set$y(node, t1.get$x(node));
          t1.set$x(node, temp);
          if (t1.get$padding(node) != null)
            t1.set$padding(node, t1.get$padding(node).getTransposed$0());
        }
        i = 0;
      case 1:
        var t1, t2, node, edge, b, vnode;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = g.edges.list;
                if (!(i < t1.length))
                  break L0;
              case 1:
                c$0: {
                  switch (state0) {
                    case 0:
                      edge = t1[i];
                      t1 = J.getInterceptor$x(edge);
                      t1.get$start(edge).transpose$0();
                      edge.get$end().transpose$0();
                      t1.get$points(edge).transpose$0();
                      bends = J.get$list$x(edge.get$vNodes());
                    case 1:
                      state0 = 0;
                      if (bends == null)
                        break c$0;
                      t1 = J.getInterceptor$asx(bends);
                      b = 0;
                      while (true) {
                        t2 = t1.get$length(bends);
                        if (typeof t2 !== "number")
                          throw H.iae(t2);
                        if (!(b < t2))
                          break;
                        vnode = t1.$index(bends, b);
                        t2 = J.getInterceptor$x(vnode);
                        temp = t2.get$y(vnode);
                        t2.set$y(vnode, t2.get$x(vnode));
                        t2.set$x(vnode, temp);
                        temp = t2.get$width(vnode);
                        t2.set$width(vnode, t2.get$height(vnode));
                        t2.set$height(vnode, temp);
                        ++b;
                      }
                  }
                }
                ++i;
            }
        g.size.transpose$0();
    }
  }
},

"+TransposeMetrics": [],

Vertex: {"": "Point;neighbors@-,isPermanent@-,label*-,cost@-,nearestObstacle@-,offset>-,type*-,count@-,totalCount@-,obs<-,paths<-,nearestObstacleChecked@-,cachedCosines<-,positionOnObstacle<-,origX-,origY-,x-,y-",
  offset$0: function($receiver) {
    return this.offset.call$0();
  },
  count$0: function() {
    return this.count.call$0();
  },
  addPath$3: function(path, start, end) {
    var t1;
    if (this.paths == null) {
      this.paths = P.List_List(null, null);
      this.cachedCosines = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    }
    if (!J.contains$1$asx(this.paths, path))
      this.paths.push(path);
    t1 = this.cachedCosines;
    t1.$indexSet(t1, path, start.cosine$1(end));
  },
  "+addPath:3:0": 1,
  bend$1: function(modifier) {
    var point, t1, t2, t3, t4;
    point = new D.Point(this.x, this.y);
    t1 = this.positionOnObstacle;
    t2 = J.getInterceptor$n(modifier);
    t3 = point.y;
    t4 = this.offset;
    if ((t1 & 1) > 0)
      point.y = J.$sub$n(t3, J.toInt$0$nx(t2.$mul(modifier, t4)));
    else
      point.y = J.$add$ns(t3, J.toInt$0$nx(t2.$mul(modifier, t4)));
    t1 = this.positionOnObstacle;
    t2 = J.getInterceptor$n(modifier);
    t3 = point.x;
    t4 = this.offset;
    if ((t1 & 16) > 0)
      point.x = J.$add$ns(t3, J.toInt$0$nx(t2.$mul(modifier, t4)));
    else
      point.x = J.$sub$n(t3, J.toInt$0$nx(t2.$mul(modifier, t4)));
    return point;
  },
  "+bend:1:0": 1,
  fullReset$0: function() {
    this.totalCount = 0;
    this.type = 0;
    this.count = 0;
    this.cost = 0;
    this.offset = this.getSpacing$0();
    this.nearestObstacle = 0;
    this.label = null;
    this.nearestObstacleChecked = false;
    this.isPermanent = false;
    var t1 = this.neighbors;
    if (t1 != null)
      J.set$length$asx(t1, 0);
    t1 = this.cachedCosines;
    if (t1 != null)
      t1.clear$0(t1);
    t1 = this.paths;
    if (t1 != null)
      J.set$length$asx(t1, 0);
  },
  "+fullReset:0:0": 1,
  getDeformedRectangle$1: function(extraOffset) {
    var rect = new D.Rectangle(0, 0, 0, 0);
    if ((this.positionOnObstacle & 1) > 0) {
      rect.y = J.$sub$n(this.y, extraOffset);
      rect.height = J.$add$ns(J.$sub$n(this.origY, this.y), extraOffset);
    } else {
      rect.y = this.origY;
      rect.height = J.$add$ns(J.$sub$n(this.y, this.origY), extraOffset);
    }
    if ((this.positionOnObstacle & 16) > 0) {
      rect.x = this.origX;
      rect.width = J.$add$ns(J.$sub$n(this.x, this.origX), extraOffset);
    } else {
      rect.x = J.$sub$n(this.x, extraOffset);
      rect.width = J.$add$ns(J.$sub$n(this.origX, this.x), extraOffset);
    }
    return rect;
  },
  "+getDeformedRectangle:1:0": 1,
  getSpacing$0: function() {
    var t1 = this.obs;
    if (t1 == null)
      return 0;
    return t1.router.spacing;
  },
  "+getSpacing:0:0": 1,
  grow$0: function() {
    var t1, modifier, t2;
    t1 = this.nearestObstacle;
    modifier = t1 === 0 ? J.$mul$n(this.totalCount, this.getSpacing$0()) : C.JSNumber_methods.$tdiv(t1, 2) - 1;
    t1 = this.positionOnObstacle;
    t2 = this.y;
    if ((t1 & 1) > 0)
      this.y = J.$sub$n(t2, modifier);
    else
      this.y = J.$add$ns(t2, modifier);
    t1 = this.positionOnObstacle;
    t2 = this.x;
    if ((t1 & 16) > 0)
      this.x = J.$add$ns(t2, modifier);
    else
      this.x = J.$sub$n(t2, modifier);
  },
  "+grow:0:0": 1,
  shrink$0: function() {
    this.x = this.origX;
    this.y = this.origY;
  },
  "+shrink:0:0": 1,
  updateOffset$0: function() {
    var t1, t2;
    t1 = this.nearestObstacle;
    if (t1 !== 0) {
      t2 = this.totalCount;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      this.offset = (t1 / 2 - 1) / t2;
    }
  },
  "+updateOffset:0:0": 1,
  toString$0: function(_) {
    return "V(" + H.S(this.origX);
  },
  "+toString:0:0": 1,
  Vertex$3: function(x, y, obs) {
    this.origX = x;
    this.origY = y;
    this.obs = obs;
  },
  static: {
"": "Vertex_NOT_SET-,Vertex_INNIE-,Vertex_OUTIE-",
Vertex$: function(x, y, obs) {
  var t1 = new D.Vertex(null, false, null, 0, 0, 0, 0, 0, 0, null, null, false, null, -1, 0, 0, x, y);
  t1.Vertex$3(x, y, obs);
  return t1;
},

"+new Vertex:3:0": 1}

},

"+Vertex": [],

VerticalPlacement: {"": "GraphVisitor;",
  visit$1: function(g) {
    var currentY, t1, pad, row, t2, t3, t4, rank, rowHeight, n, node;
    currentY = g.margin.top;
    if (typeof currentY !== "number")
      return this.visit$1$bailout1(1, g, currentY);
    t1 = P.List_List$filled(g.ranks.list.length + 1, 0, J.JSInt);
    H.setRuntimeTypeInfo(t1, [J.JSInt]);
    g.rankLocations = t1;
    for (pad = null, row = 0; t1 = g.ranks, t2 = t1.list.length, t3 = g.rankLocations, t4 = t3.length, row < t2; ++row) {
      if (row >= t4)
        throw H.ioore(t3, row);
      t3[row] = currentY;
      rank = t1.$index(t1, row);
      rank.set$bottomPadding(0);
      rank.set$topPadding(0);
      t1 = J.getInterceptor$asx(rank);
      rowHeight = 0;
      n = 0;
      while (true) {
        t2 = t1.get$length(rank);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(n < t2))
          break;
        node = t1.$index(rank, n);
        t2 = J.getInterceptor$x(node);
        pad = t2.get$padding(node) == null ? g.defaultPadding : t2.get$padding(node);
        rowHeight = P.max(t2.get$height(node), rowHeight);
        t2 = J.getInterceptor$x(pad);
        rank.set$topPadding(P.max(t2.get$top(pad), rank.get$topPadding()));
        rank.set$bottomPadding(P.max(t2.get$bottom(pad), rank.get$bottomPadding()));
        ++n;
      }
      t2 = rank.get$topPadding();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      currentY += t2;
      rank.setDimensions$2(currentY, rowHeight);
      t1 = J.$add$ns(t1.get$height(rank), rank.get$bottomPadding());
      if (typeof t1 !== "number")
        throw H.iae(t1);
      currentY += t1;
    }
    if (row >= t4)
      throw H.ioore(t3, row);
    t3[row] = currentY;
    g.size.height = currentY;
  },
  "+visit:1:0": 1,
  visit$1$bailout1: function(state0, g, currentY) {
    var t1, pad, row, t2, t3, rank, rowHeight, n, node;
    t1 = P.List_List$filled(g.ranks.list.length + 1, 0, J.JSInt);
    H.setRuntimeTypeInfo(t1, [J.JSInt]);
    g.rankLocations = t1;
    for (pad = null, row = 0; t1 = g.ranks, t2 = t1.list.length, t3 = g.rankLocations, row < t2; ++row) {
      if (row >= t3.length)
        throw H.ioore(t3, row);
      t3[row] = currentY;
      rank = t1.$index(t1, row);
      rank.set$bottomPadding(0);
      rank.set$topPadding(0);
      t1 = J.getInterceptor$asx(rank);
      rowHeight = 0;
      n = 0;
      while (true) {
        t2 = t1.get$length(rank);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(n < t2))
          break;
        node = t1.$index(rank, n);
        t2 = J.getInterceptor$x(node);
        pad = t2.get$padding(node) == null ? g.defaultPadding : t2.get$padding(node);
        rowHeight = P.max(t2.get$height(node), rowHeight);
        t2 = J.getInterceptor$x(pad);
        rank.set$topPadding(P.max(t2.get$top(pad), rank.get$topPadding()));
        rank.set$bottomPadding(P.max(t2.get$bottom(pad), rank.get$bottomPadding()));
        ++n;
      }
      currentY = J.$add$ns(currentY, rank.get$topPadding());
      rank.setDimensions$2(currentY, rowHeight);
      currentY = J.$add$ns(currentY, J.$add$ns(t1.get$height(rank), rank.get$bottomPadding()));
    }
    if (row >= t3.length)
      throw H.ioore(t3, row);
    t3[row] = currentY;
    g.size.height = currentY;
  }
},

"+VerticalPlacement": [],

VirtualNodeCreation: {"": "RevertableChange;edge-,graph-,nodes>-,edges-",
  edge$1: function(arg0) {
    return this.edge.call$1(arg0);
  },
  revert$0: function() {
    var t1, t2, t3, t4, t5, i;
    t1 = this.edge;
    t2 = this.edges;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t3 = J.getInterceptor$x(t1);
    t3.set$start(t1, t2[0].start);
    t2 = this.edges;
    t4 = t2.length;
    t5 = t4 - 1;
    if (t5 < 0)
      throw H.ioore(t2, t5);
    t1.set$end(t2[t5].end);
    t5 = D.Node0;
    t2 = P.List_List(null, t5);
    H.setRuntimeTypeInfo(t2, [t5]);
    t1.set$vNodes(new D.NodeList(t2));
    for (t2 = this.graph, i = 0; t4 = this.edges, i < t4.length; ++i)
      t2.removeEdge$1(t4[i]);
    for (i = 0; t4 = this.nodes, i < t4.length; ++i) {
      J.add$1$ax(t1.get$vNodes(), t4[i]);
      t4 = this.nodes;
      if (i >= t4.length)
        throw H.ioore(t4, i);
      t4 = t4[i];
      t5 = t2.nodes;
      t5.remove$1(t5, t4);
      t5 = t2.ranks;
      J.remove$1$ax(t5.$index(t5, t4.get$rank()), t4);
    }
    J.add$1$ax(t3.get$source(t1).get$outgoing(), t1);
    J.add$1$ax(t3.get$target(t1).get$incoming(), t1);
    t2 = t2.edges;
    t2.add$1(t2, t1);
  },
  "+revert:0:0": 1,
  VirtualNodeCreation$2: function(edge, graph) {
    var t1, t2, size, offset, prevNode, t3, padding, i, t4, t5, t6, t7, t8, t9, currentNode, currentEdge;
    t1 = this.edge;
    t2 = J.getInterceptor$x(t1);
    size = J.$sub$n(J.$sub$n(t2.get$target(t1).get$rank(), t2.get$source(t1).get$rank()), 1);
    offset = J.$add$ns(t2.get$source(t1).get$rank(), 1);
    if (typeof offset !== "number")
      return this.VirtualNodeCreation$2$bailout2(1, t1, offset, t2, size);
    prevNode = t2.get$source(t1);
    t3 = P.List_List(size, D.Node0);
    H.setRuntimeTypeInfo(t3, [D.Node0]);
    this.nodes = t3;
    t3 = P.List_List(J.$add$ns(size, 1), D.Edge);
    H.setRuntimeTypeInfo(t3, [D.Edge]);
    this.edges = t3;
    padding = D.Insets$(0, t2.get$padding(t1), 0, t2.get$padding(t1));
    if (typeof size !== "number")
      throw H.iae(size);
    t3 = this.graph;
    i = 0;
    for (; i < size; ++i, prevNode = currentNode) {
      t4 = this.nodes;
      t5 = "Virtual" + i + ":" + H.S(t1);
      t6 = D.Edge;
      t7 = P.List_List(null, t6);
      t7.$builtinTypeInfo = [t6];
      t6 = D.Edge;
      t8 = P.List_List(null, t6);
      t8.$builtinTypeInfo = [t6];
      t6 = P.List_List(3, P.Object);
      t6.$builtinTypeInfo = [P.Object];
      t9 = P.List_List$filled(4, 0, J.JSInt);
      t9.$builtinTypeInfo = [J.JSInt];
      currentNode = new D.Node0(0, 0, 50, 40, null, t5, false, new D.EdgeList(t7), new D.EdgeList(t8), 0, 0, 0, null, null, t6, t9);
      if (i >= t4.length)
        throw H.ioore(t4, i);
      t4[i] = currentNode;
      currentNode.width = 1;
      currentNode.height = 0;
      currentNode.padding = padding;
      t4 = offset + i;
      currentNode.rank = t4;
      t5 = t3.ranks;
      J.add$1$ax(t5.$index(t5, t4), currentNode);
      currentEdge = new D.Edge(0, null, 1, null, false, false, 10, null, prevNode, null, currentNode, false, null, J.$mul$n(t1.get$weight(), 8));
      J.add$1$ax(currentEdge.source.get$outgoing(), currentEdge);
      J.add$1$ax(currentEdge.target.get$incoming(), currentEdge);
      if (i === 0)
        currentEdge.weight = J.$mul$n(t1.get$weight(), 2);
      t4 = t3.edges;
      t5 = this.edges;
      if (i >= t5.length)
        throw H.ioore(t5, i);
      t5[i] = currentEdge;
      t4.add$1(t4, currentEdge);
      t4 = t3.nodes;
      t4.add$1(t4, currentNode);
    }
    currentEdge = new D.Edge(0, null, 1, null, false, false, 10, null, prevNode, null, t2.get$target(t1), false, null, J.$mul$n(t1.get$weight(), 2));
    J.add$1$ax(currentEdge.source.get$outgoing(), currentEdge);
    J.add$1$ax(currentEdge.target.get$incoming(), currentEdge);
    t2 = t3.edges;
    t4 = this.edges;
    t5 = t4.length;
    t6 = t5 - 1;
    if (t6 < 0)
      throw H.ioore(t4, t6);
    t4[t6] = currentEdge;
    t2.add$1(t2, currentEdge);
    t3.removeEdge$1(t1);
  },
  VirtualNodeCreation$2$bailout2: function(state0, t1, offset, t2, size) {
    var prevNode, t3, padding, t4, i, t5, t6, t7, t8, t9, t10, currentNode, currentEdge;
    prevNode = t2.get$source(t1);
    t3 = P.List_List(size, D.Node0);
    H.setRuntimeTypeInfo(t3, [D.Node0]);
    this.nodes = t3;
    t3 = P.List_List(J.$add$ns(size, 1), D.Edge);
    H.setRuntimeTypeInfo(t3, [D.Edge]);
    this.edges = t3;
    padding = D.Insets$(0, t2.get$padding(t1), 0, t2.get$padding(t1));
    if (typeof size !== "number")
      throw H.iae(size);
    t3 = this.graph;
    t4 = J.getInterceptor$ns(offset);
    i = 0;
    for (; i < size; ++i, prevNode = currentNode) {
      t5 = this.nodes;
      t6 = "Virtual" + i + ":" + H.S(t1);
      t7 = D.Edge;
      t8 = P.List_List(null, t7);
      t8.$builtinTypeInfo = [t7];
      t7 = D.Edge;
      t9 = P.List_List(null, t7);
      t9.$builtinTypeInfo = [t7];
      t7 = P.List_List(3, P.Object);
      t7.$builtinTypeInfo = [P.Object];
      t10 = P.List_List$filled(4, 0, J.JSInt);
      t10.$builtinTypeInfo = [J.JSInt];
      currentNode = new D.Node0(0, 0, 50, 40, null, t6, false, new D.EdgeList(t8), new D.EdgeList(t9), 0, 0, 0, null, null, t7, t10);
      if (i >= t5.length)
        throw H.ioore(t5, i);
      t5[i] = currentNode;
      currentNode.width = 1;
      currentNode.height = 0;
      currentNode.padding = padding;
      currentNode.rank = t4.$add(offset, i);
      t5 = t3.ranks;
      J.add$1$ax(t5.$index(t5, t4.$add(offset, i)), currentNode);
      currentEdge = new D.Edge(0, null, 1, null, false, false, 10, null, prevNode, null, currentNode, false, null, J.$mul$n(t1.get$weight(), 8));
      J.add$1$ax(currentEdge.source.get$outgoing(), currentEdge);
      J.add$1$ax(currentEdge.target.get$incoming(), currentEdge);
      if (i === 0)
        currentEdge.weight = J.$mul$n(t1.get$weight(), 2);
      t5 = t3.edges;
      t6 = this.edges;
      if (i >= t6.length)
        throw H.ioore(t6, i);
      t6[i] = currentEdge;
      t5.add$1(t5, currentEdge);
      t5 = t3.nodes;
      t5.add$1(t5, currentNode);
    }
    currentEdge = new D.Edge(0, null, 1, null, false, false, 10, null, prevNode, null, t2.get$target(t1), false, null, J.$mul$n(t1.get$weight(), 2));
    J.add$1$ax(currentEdge.source.get$outgoing(), currentEdge);
    J.add$1$ax(currentEdge.target.get$incoming(), currentEdge);
    t2 = t3.edges;
    t4 = this.edges;
    t5 = t4.length;
    t6 = t5 - 1;
    if (t6 < 0)
      throw H.ioore(t4, t6);
    t4[t6] = currentEdge;
    t2.add$1(t2, currentEdge);
    t3.removeEdge$1(t1);
  },
  static: {
"": "VirtualNodeCreation_INNER_EDGE_X-,VirtualNodeCreation_LONG_EDGE_X-",
VirtualNodeCreation$: function(edge, graph) {
  var t1 = new D.VirtualNodeCreation(edge, graph, null, null);
  t1.VirtualNodeCreation$2(edge, graph);
  return t1;
},

"+new VirtualNodeCreation:2:0": 1}

},

"+VirtualNodeCreation": [],

ListBase0: {"": "ListBase;list>-",
  $index: function(_, index) {
    var t1 = this.list;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 1,
  $indexSet: function(_, index, value) {
    var t1 = this.list;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    t1[index] = value;
  },
  "+[]=:2:0": 1,
  get$length: function(_) {
    return this.list.length;
  },
  "+length": 1,
  set$length: function(_, value) {
    C.JSArray_methods.set$length(this.list, value);
  },
  "+length=": 1,
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

"+ListBase": []}],
["graph", "package:irhydra/src/ui/graph.dart", , D, {
display0: function(pane, blocks, attachRef, blockTicks) {
  var g, t1, loopNesting, hotness, maxPercentage, block, svg, t2, t3, t4, t5, node, t6, t7, t8, t9, t10, t11, idx, rect, label, edge, color;
  g = D._toDirectedGraph(blocks);
  t1 = new D.DirectedGraphLayout(P.List_List(null, null));
  t1.init$0();
  t1.visit$1(g);
  loopNesting = D._computeLoopNesting(blocks);
  if (blockTicks != null) {
    hotness = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = blockTicks.get$values(blockTicks);
    maxPercentage = t1.fold$2(t1, 0, P.max$closure);
    if (typeof maxPercentage !== "number")
      return D.display0$bailout(1, hotness, maxPercentage, blockTicks, attachRef, loopNesting, pane, g);
    for (t1 = new P.LinkedHashMapKeyIterable(blockTicks), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(blockTicks, "_LinkedHashMap", 0)]), t1 = t1._map, t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t1._cell = t1._map._first; t1.moveNext$0();) {
      block = t1._liblib1$_current;
      hotness.$indexSet(hotness, block, J.ceil$0$nx(J.$mul$n(J.$div$n(blockTicks.$index(blockTicks, block), maxPercentage), 5)));
    }
  } else
    hotness = null;
  t1 = J.getInterceptor$x(pane);
  J.clear$0$ax(t1.get$nodes(pane));
  svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  t2 = g.size;
  t3 = J.getInterceptor$x(svg);
  t3.set$attributes(svg, H.fillLiteralMap(["height", H.S(J.$add$ns(t2.height, 50)), "width", H.S(J.$add$ns(t2.width, 50)), "version", "1.1"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  for (t2 = g.nodes, t2 = t2.get$iterator(t2), t4 = hotness == null, t5 = loopNesting.length; t2.moveNext$0();) {
    node = t2._liblib$_current;
    t6 = J.getInterceptor$x(node);
    block = t6.get$data(node);
    t7 = t6.get$x(node);
    t8 = t6.get$y(node);
    t9 = t6.get$width(node);
    t10 = t6.get$height(node);
    t11 = J.getInterceptor$x(block);
    if (t4) {
      t11 = t11.get$id(block);
      if (t11 >>> 0 !== t11 || t11 >= t5)
        throw H.ioore(loopNesting, t11);
      t11 = loopNesting[t11];
    } else
      t11 = hotness.$index(hotness, t11.get$name(block));
    $.get$BREWER_PALETTE();
    idx = P.min(t11, 7) - 1;
    if (J.$eq(t11, 0))
      t11 = "white";
    else {
      t11 = $.get$BREWER_PALETTE();
      if (idx >>> 0 !== idx || idx >= 7)
        throw H.ioore(t11, idx);
      t11 = t11[idx];
    }
    rect = D._createRect(t11, t10, 5, "black", t9, t7, t8);
    t8 = J.$add$ns(t6.get$x(node), J.$tdiv$n(t6.get$width(node), 2));
    t6 = J.$add$ns(t6.get$y(node), J.$tdiv$n(t6.get$height(node), 2));
    t7 = J.getInterceptor$x(block);
    t9 = t7.get$name(block);
    label = D._createLabel("black", "#ir-" + H.S(t7.get$name(block)), "black", t9, t8, t6);
    attachRef.call$2(label, t7.get$name(block));
    J.add$1$ax(t3.get$nodes(svg), rect);
    J.add$1$ax(t3.get$nodes(svg), label);
  }
  for (t2 = g.edges, t2 = t2.get$iterator(t2); t2.moveNext$0();) {
    edge = t2._liblib$_current;
    color = edge.get$isFeedback() === true ? "red" : "black";
    J.add$1$ax(t3.get$nodes(svg), D._pathFromPoints(J.get$points$x(edge), color));
  }
  J.add$1$ax(t1.get$nodes(pane), svg);
},

"+display:3:1:blockTicks": 1,

"*display": [0],

display0$bailout: function(state0, hotness, maxPercentage, blockTicks, attachRef, loopNesting, pane, g) {
  switch (state0) {
    case 0:
      g = D._toDirectedGraph(blocks);
      t1 = new D.DirectedGraphLayout(P.List_List(null, null));
      t1.init$0();
      t1.visit$1(g);
      loopNesting = D._computeLoopNesting(blocks);
    case 1:
      var t1, block, svg, t2, t3, t4, t5, node, t6, t7, t8, t9, t10, t11, idx, rect, label, edge, color;
      if (state0 === 1 || state0 === 0 && blockTicks != null)
        switch (state0) {
          case 0:
            hotness = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
            t1 = blockTicks.get$values(blockTicks);
            maxPercentage = t1.fold$2(t1, 0, P.max$closure);
          case 1:
            state0 = 0;
            for (t1 = new P.LinkedHashMapKeyIterable(blockTicks), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(blockTicks, "_LinkedHashMap", 0)]), t1 = t1._map, t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t1._cell = t1._map._first; t1.moveNext$0();) {
              block = t1._liblib1$_current;
              hotness.$indexSet(hotness, block, J.ceil$0$nx(J.$mul$n(J.$div$n(blockTicks.$index(blockTicks, block), maxPercentage), 5)));
            }
        }
      else
        hotness = null;
      t1 = J.getInterceptor$x(pane);
      J.clear$0$ax(t1.get$nodes(pane));
      svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      t2 = g.size;
      t3 = J.getInterceptor$x(svg);
      t3.set$attributes(svg, H.fillLiteralMap(["height", H.S(J.$add$ns(t2.height, 50)), "width", H.S(J.$add$ns(t2.width, 50)), "version", "1.1"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      for (t2 = g.nodes, t2 = t2.get$iterator(t2), t4 = hotness == null, t5 = loopNesting.length; t2.moveNext$0();) {
        node = t2._liblib$_current;
        t6 = J.getInterceptor$x(node);
        block = t6.get$data(node);
        t7 = t6.get$x(node);
        t8 = t6.get$y(node);
        t9 = t6.get$width(node);
        t10 = t6.get$height(node);
        t11 = J.getInterceptor$x(block);
        if (t4) {
          t11 = t11.get$id(block);
          if (t11 >>> 0 !== t11 || t11 >= t5)
            throw H.ioore(loopNesting, t11);
          t11 = loopNesting[t11];
        } else
          t11 = hotness.$index(hotness, t11.get$name(block));
        $.get$BREWER_PALETTE();
        idx = P.min(t11, 7) - 1;
        if (J.$eq(t11, 0))
          t11 = "white";
        else {
          t11 = $.get$BREWER_PALETTE();
          if (idx >>> 0 !== idx || idx >= 7)
            throw H.ioore(t11, idx);
          t11 = t11[idx];
        }
        rect = D._createRect(t11, t10, 5, "black", t9, t7, t8);
        t8 = J.$add$ns(t6.get$x(node), J.$tdiv$n(t6.get$width(node), 2));
        t6 = J.$add$ns(t6.get$y(node), J.$tdiv$n(t6.get$height(node), 2));
        t7 = J.getInterceptor$x(block);
        t9 = t7.get$name(block);
        label = D._createLabel("black", "#ir-" + H.S(t7.get$name(block)), "black", t9, t8, t6);
        attachRef.call$2(label, t7.get$name(block));
        J.add$1$ax(t3.get$nodes(svg), rect);
        J.add$1$ax(t3.get$nodes(svg), label);
      }
      for (t2 = g.edges, t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        edge = t2._liblib$_current;
        color = edge.get$isFeedback() === true ? "red" : "black";
        J.add$1$ax(t3.get$nodes(svg), D._pathFromPoints(J.get$points$x(edge), color));
      }
      J.add$1$ax(t1.get$nodes(pane), svg);
  }
},

_toDirectedGraph: function(blocks) {
  var t1, t2, t3, t4, t5, g, block, node, from_block, to_block, from, to, t6, edge;
  t1 = new D.Insets(0, 0, 0, 0);
  t1.Insets$4(16, 16, 16, 16);
  t2 = D.Edge;
  t3 = P.List_List(null, t2);
  H.setRuntimeTypeInfo(t3, [t2]);
  t2 = D.Node0;
  t4 = P.List_List(null, t2);
  H.setRuntimeTypeInfo(t4, [t2]);
  t2 = D.Rank;
  t5 = P.List_List(null, t2);
  H.setRuntimeTypeInfo(t5, [t2]);
  t2 = new D.Insets(0, 0, 0, 0);
  t2.Insets$4(0, 0, 0, 0);
  g = new D.DirectedGraph(4, t1, new D.EdgeList(t3), new D.NodeList(t4), new D.RankList(t5), null, t2, null, null, new D.Dimension(0, 0));
  for (t1 = blocks.get$values(blocks), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]); t2.moveNext$0();) {
    block = t2._liblib$_current;
    t1 = D.Edge;
    t3 = P.List_List(null, t1);
    t3.$builtinTypeInfo = [t1];
    t1 = D.Edge;
    t4 = P.List_List(null, t1);
    t4.$builtinTypeInfo = [t1];
    t1 = P.List_List(3, P.Object);
    t1.$builtinTypeInfo = [P.Object];
    t5 = P.List_List$filled(4, 0, J.JSInt);
    t5.$builtinTypeInfo = [J.JSInt];
    node = new D.Node0(0, 0, 50, 40, null, block, false, new D.EdgeList(t3), new D.EdgeList(t4), 0, 0, 0, null, null, t1, t5);
    node.height = 40;
    node.width = 40;
    t1 = new D.Insets(0, 0, 0, 0);
    t1.top = 10;
    t1.left = 10;
    t1.bottom = 10;
    t1.right = 10;
    node.padding = t1;
    t1 = g.nodes;
    t1.add$1(t1, node);
  }
  for (t1 = blocks.get$values(blocks), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]); t2.moveNext$0();) {
    from_block = t2._liblib$_current;
    for (t1 = J.get$iterator$ax(from_block.get$successors()), t3 = J.getInterceptor$x(from_block); t1.moveNext$0() === true;) {
      to_block = t1.get$current();
      from = t3.get$id(from_block);
      to = J.get$id$x(to_block);
      t4 = g.nodes.list;
      t5 = t4.length;
      if (from >>> 0 !== from || from >= t5)
        throw H.ioore(t4, from);
      t6 = t4[from];
      if (to >>> 0 !== to || to >= t5)
        throw H.ioore(t4, to);
      edge = new D.Edge(0, null, 1, null, false, false, 10, null, t6, null, t4[to], false, null, 1);
      J.add$1$ax(edge.source.get$outgoing(), edge);
      J.add$1$ax(edge.target.get$incoming(), edge);
      t4 = g.edges;
      t4.add$1(t4, edge);
      if (from > to) {
        edge.invert$0();
        edge.isFeedback = true;
      }
    }
  }
  return g;
},

"+_toDirectedGraph:1:0": 1,

_pathFromPoints: function(points, color) {
  var t1, path, i, t2, t3, prev, end, x1, y1, x2, y2, angle, t4;
  if (typeof points !== "string" && (typeof points !== "object" || points === null || points.constructor !== Array && !H.isJsIndexable(points, points[init.dispatchPropertyName])))
    return D._pathFromPoints$bailout(1, points, color);
  if (0 >= points.length)
    throw H.ioore(points, 0);
  t1 = J.get$x$x(points[0]);
  if (0 >= points.length)
    throw H.ioore(points, 0);
  path = ["M", t1, J.get$y$x(points[0])];
  for (i = 1; t1 = points.length, t2 = t1 - 1, i < t2; ++i) {
    t1 = J.get$x$x(points[i]);
    if (i >= points.length)
      throw H.ioore(points, i);
    C.JSArray_methods.addAll$1(path, ["L", t1, J.get$y$x(points[i])]);
  }
  t3 = t1 - 2;
  if (t3 < 0)
    throw H.ioore(points, t3);
  prev = points[t3];
  if (t2 < 0)
    throw H.ioore(points, t2);
  end = points[t2];
  t2 = J.getInterceptor$x(prev);
  x1 = t2.get$x(prev);
  if (typeof x1 !== "number")
    return D._pathFromPoints$bailout(2, 0, color, path, x1, end, t2, prev);
  y1 = t2.get$y(prev);
  if (typeof y1 !== "number")
    return D._pathFromPoints$bailout(3, 0, color, path, x1, end, 0, 0, y1);
  t2 = J.getInterceptor$x(end);
  x2 = t2.get$x(end);
  if (typeof x2 !== "number")
    return D._pathFromPoints$bailout(4, 0, color, path, x1, end, t2, 0, y1, x2);
  y2 = t2.get$y(end);
  if (typeof y2 !== "number")
    return D._pathFromPoints$bailout(5, 0, color, path, x1, 0, 0, 0, y1, x2, y2);
  angle = Math.atan2(y2 - y1, x2 - x1);
  t1 = angle + 0.3141592653589793;
  t2 = Math.cos(t1);
  t1 = Math.sin(t1);
  t3 = angle - 0.3141592653589793;
  t4 = Math.cos(t3);
  C.JSArray_methods.addAll$1(path, ["L", x2, y2, "L", x2 - 10 * t2, y2 - 10 * t1, "M", x2 - 10 * t4, y2 - 10 * Math.sin(t3), "L", x2, y2]);
  return D._createPath(path, color);
},

"+_pathFromPoints:2:0": 1,

_pathFromPoints$bailout: function(state0, points, color, path, x1, end, t1, prev, y1, x2, y2) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = J.getInterceptor$asx(points);
      path = ["M", J.get$x$x(t1.$index(points, 0)), J.get$y$x(t1.$index(points, 0))];
      i = 1;
      while (true) {
        t2 = J.$sub$n(t1.get$length(points), 1);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(i < t2))
          break;
        C.JSArray_methods.addAll$1(path, ["L", J.get$x$x(t1.$index(points, i)), J.get$y$x(t1.$index(points, i))]);
        ++i;
      }
      prev = t1.$index(points, J.$sub$n(t1.get$length(points), 2));
      end = t1.$index(points, J.$sub$n(t1.get$length(points), 1));
      t1 = J.getInterceptor$x(prev);
      x1 = t1.get$x(prev);
    case 2:
      state0 = 0;
      y1 = t1.get$y(prev);
    case 3:
      state0 = 0;
      t1 = J.getInterceptor$x(end);
      x2 = t1.get$x(end);
    case 4:
      state0 = 0;
      y2 = t1.get$y(end);
    case 5:
      var i, t2, t3, t4, angle, t5, t6;
      state0 = 0;
      t1 = J.getInterceptor$n(y2);
      t2 = t1.$sub(y2, y1);
      t3 = J.getInterceptor$n(x2);
      t4 = t3.$sub(x2, x1);
      if (typeof t2 !== "number")
        H.throwExpression(new P.ArgumentError(t2));
      if (typeof t4 !== "number")
        H.throwExpression(new P.ArgumentError(t4));
      angle = Math.atan2(t2, t4);
      t2 = angle + 0.3141592653589793;
      t4 = Math.cos(t2);
      t2 = Math.sin(t2);
      t5 = angle - 0.3141592653589793;
      t6 = Math.cos(t5);
      t5 = Math.sin(t5);
      C.JSArray_methods.addAll$1(path, ["L", x2, y2, "L", t3.$sub(x2, 10 * t4), t1.$sub(y2, 10 * t2), "M", t3.$sub(x2, 10 * t6), t1.$sub(y2, 10 * t5), "L", x2, y2]);
      return D._createPath(path, color);
  }
},

_createRect: function(fill, height, r, stroke, width, x, y) {
  var t1 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  J.set$attributes$x(t1, H.fillLiteralMap(["x", H.S(x), "y", H.S(y), "width", H.S(width), "height", H.S(height), "r", "" + r, "rx", "" + r, "ry", "" + r, "fill", fill, "stroke", stroke], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  return t1;
},

"+_createRect:0:7:fill:height:r:stroke:width:x:y": 1,

"*_createRect": [4, 0, 2, 5, 0, 0, 0],

_createLabel: function(fill, href, stroke, text, x, y) {
  var label, t1, ref;
  label = document.createElementNS("http://www.w3.org/2000/svg", "text");
  t1 = J.getInterceptor$x(label);
  t1.set$attributes(label, H.fillLiteralMap(["dominant-baseline", "middle", "text-anchor", "middle", "x", H.S(x), "y", H.S(y), "fill", fill, "stroke", stroke], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  t1.set$text(label, text);
  J.set$cssText$x(t1.get$style(label), "font-family: Monaco, Menlo, Consolas, \"Courier New\", monospace;");
  ref = document.createElementNS("http://www.w3.org/2000/svg", "a");
  t1 = J.getInterceptor$x(ref);
  J.$indexSet$ax(t1.getNamespacedAttributes$1(ref, "http://www.w3.org/1999/xlink"), "href", href);
  J.add$1$ax(t1.get$nodes(ref), label);
  return ref;
},

"+_createLabel:0:6:fill:href:stroke:text:x:y": 1,

"*_createLabel": [5, 0, 5, 0, 0, 0],

_createPath: function(path, color) {
  var t1, t2;
  t1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
  t2 = new H.MappedListIterable(path, new D._createPath_closure());
  H.setRuntimeTypeInfo(t2, [null, null]);
  J.set$attributes$x(t1, H.fillLiteralMap(["d", t2.join$1(t2, " "), "style", "stroke: " + color + ";", "fill", "none"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  return t1;
},

"+_createPath:2:0": 1,

_computeLoopNesting: function(blocks) {
  var loopNesting, worklist, t1, t2, block, marked, t3, t4, t5, pred, t6, curr;
  loopNesting = P.List_List$filled(blocks.get$length(blocks), 0, null);
  worklist = [];
  for (t1 = blocks.get$values(blocks), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]), t1 = loopNesting.length; t2.moveNext$0();) {
    block = t2._liblib$_current;
    if (D._isLoopHeader(block)) {
      marked = P.List_List$filled(blocks.get$length(blocks), false, null);
      t3 = J.getInterceptor$x(block);
      t4 = t3.get$id(block);
      if (t4 >>> 0 !== t4 || t4 >= t1)
        throw H.ioore(loopNesting, t4);
      loopNesting[t4] = loopNesting[t4] + 1;
      t4 = t3.get$id(block);
      t5 = marked.length;
      if (t4 >>> 0 !== t4 || t4 >= t5)
        throw H.ioore(marked, t4);
      marked[t4] = true;
      for (t4 = J.get$iterator$ax(block.get$predecessors()); t4.moveNext$0() === true;) {
        pred = t4.get$current();
        t6 = J.getInterceptor$x(pred);
        if (J.$lt$n(t3.get$id(block), t6.get$id(pred)) === true)
          worklist.push(pred);
        t6 = t6.get$id(pred);
        if (t6 >>> 0 !== t6 || t6 >= t5)
          throw H.ioore(marked, t6);
        marked[t6] = true;
      }
      for (; t3 = worklist.length, t3 !== 0;) {
        if (0 >= t3)
          throw H.ioore(worklist, 0);
        curr = worklist.pop();
        t3 = J.get$id$x(curr);
        if (t3 >>> 0 !== t3 || t3 >= t1)
          throw H.ioore(loopNesting, t3);
        loopNesting[t3] = loopNesting[t3] + 1;
        for (t3 = J.get$iterator$ax(curr.get$predecessors()); t3.moveNext$0() === true;) {
          pred = t3.get$current();
          t4 = J.getInterceptor$x(pred);
          t6 = t4.get$id(pred);
          if (t6 >>> 0 !== t6 || t6 >= t5)
            throw H.ioore(marked, t6);
          if (!marked[t6]) {
            t4 = t4.get$id(pred);
            if (t4 >>> 0 !== t4 || t4 >= t5)
              throw H.ioore(marked, t4);
            marked[t4] = true;
            worklist.push(pred);
          }
        }
      }
    }
  }
  return loopNesting;
},

"+_computeLoopNesting:1:0": 1,

_isLoopHeader: function(block) {
  var t1, t2, pred, t3, t4;
  for (t1 = J.get$iterator$ax(block.get$predecessors()), t2 = J.getInterceptor$x(block); t1.moveNext$0() === true;) {
    pred = t1.get$current();
    t3 = t2.get$id(block);
    if (typeof t3 !== "number")
      return D._isLoopHeader$bailout(1, t3, pred, t2, block, t1);
    t4 = J.get$id$x(pred);
    if (typeof t4 !== "number")
      return D._isLoopHeader$bailout(2, t3, 0, t2, block, t1, t4);
    if (t3 < t4)
      return true;
  }
  return false;
},

"+_isLoopHeader:1:0": 1,

_isLoopHeader$bailout: function(state0, t3, pred, t2, block, t1, t4) {
  switch (state0) {
    case 0:
      t1 = J.get$iterator$ax(block.get$predecessors());
      t2 = J.getInterceptor$x(block);
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.moveNext$0() === true))
                break L0;
              pred = t1.get$current();
              t3 = t2.get$id(block);
            case 1:
              state0 = 0;
              t4 = J.get$id$x(pred);
            case 2:
              state0 = 0;
              if (J.$lt$n(t3, t4) === true)
                return true;
          }
      return false;
  }
},

_createPath_closure: {"": "Closure;",
  call$1: function(val) {
    return typeof val === "number" ? C.JSNumber_methods.toStringAsFixed$1(val, 3) : val;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_createPath_closure": []}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

"+convertNativeToDart_DateTime:1:0": 1,

_convertDartToNative_PrepareForStructuredClone: function(value) {
  var copies, copy;
  copies = [];
  copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
},

"+_convertDartToNative_PrepareForStructuredClone:1:0": 1,

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

"+convertNativeToDart_AcceptStructuredClone:1:1:mustCopy": 1,

"*convertNativeToDart_AcceptStructuredClone": [1],

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

"+isOpera": 1,

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0) === true;
  return $.Device__isWebKit;
},

"+isWebKit": 1,

JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

"+combine:2:0": 1,

JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

"+finish:1:0": 1,

_convertDartToNative_PrepareForStructuredClone_findSlot: {"": "Closure;values_1-,copies_2-",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_findSlot": [],

_convertDartToNative_PrepareForStructuredClone_readSlot: {"": "Closure;copies_3-",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_readSlot": [],

_convertDartToNative_PrepareForStructuredClone_writeSlot: {"": "Closure;copies_4-",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_writeSlot": [],

_convertDartToNative_PrepareForStructuredClone_cleanupSlots: {"": "Closure;",
  call$0: function() {
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_convertDartToNative_PrepareForStructuredClone_cleanupSlots": [],

_convertDartToNative_PrepareForStructuredClone_walk: {"": "Closure;findSlot_5-,readSlot_6-,writeSlot_7-",
  call$1: function(e) {
    var t1, t2, slot, t3, $length, copy, i;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    t2 = J.getInterceptor$ax(e);
    if (typeof e === "object" && e !== null && !!t2.$isDateTime)
      return new Date(e.millisecondsSinceEpoch);
    if (typeof e === "object" && e !== null && !!t2.$isRegExp)
      throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && !!t2.$isFile)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isFileList)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isByteBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t3 = t1.copy_0;
      if (t3 != null)
        return t3;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!t2.$isList)) {
      if (typeof e !== "string" && (typeof e !== "object" || e === null || e.constructor !== Array && !H.isJsIndexable(e, e[init.dispatchPropertyName])))
        return this.call$1$bailout(1, t2, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      copy = new Array($length);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw H.ioore(e, i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw H.ioore(copy, i);
        copy[i] = t1;
      }
      return copy;
    }
    throw H.wrapException(new P.UnimplementedError("structured clone of other type"));
  },
  "+call:1:0": 1,
  call$1$bailout: function(state0, t2, e) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        t2 = J.getInterceptor(e);
        if (typeof e === "object" && e !== null && !!t2.$isDateTime)
          return new Date(e.millisecondsSinceEpoch);
        if (typeof e === "object" && e !== null && !!t2.$isRegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && !!t2.$isFile)
          return e;
        if (typeof e === "object" && e !== null && !!t2.$isBlob)
          return e;
        if (typeof e === "object" && e !== null && !!t2.$isFileList)
          return e;
        if (typeof e === "object" && e !== null && !!t2.$isByteBuffer)
          return e;
        if (typeof e === "object" && e !== null && !!t2.$isTypedData)
          return e;
        if (typeof e === "object" && e !== null && !!t2.$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t3 = t1.copy_0;
          if (t3 != null)
            return t3;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
          return t1.copy_0;
        }
      case 1:
        var t1, slot, t3, $length, copy, i;
        if (state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || !!t2.$isList))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              copy = new Array($length);
              this.writeSlot_7.call$2(slot, copy);
              for (i = 0; i < $length; ++i) {
                t1 = this.call$1(t2.$index(e, i));
                if (i >= copy.length)
                  throw H.ioore(copy, i);
                copy[i] = t1;
              }
              return copy;
          }
        throw H.wrapException(new P.UnimplementedError("structured clone of other type"));
    }
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_walk": [],

_convertDartToNative_PrepareForStructuredClone_walk_closure: {"": "Closure;box_0-,walk_8-",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_walk_closure": [],

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0-,copies_1-",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+convertNativeToDart_AcceptStructuredClone_findSlot": [],

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2-",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+convertNativeToDart_AcceptStructuredClone_readSlot": [],

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3-",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+convertNativeToDart_AcceptStructuredClone_writeSlot": [],

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4-,findSlot_5-,readSlot_6-,writeSlot_7-",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || e.constructor !== Array || !!e.fixed$length)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._liblib$_current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw H.ioore(e, i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw H.ioore(copy, i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  "+call:1:0": 1,
  call$1$bailout: function(state0, e) {
    var slot, copy, t1, key, $length, t2, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._liblib$_current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  $isFunction: true
},

"+convertNativeToDart_AcceptStructuredClone_walk": [],

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  "+toString:0:0": 1,
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  "+iterator": 1,
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  "+forEach:1:0": 1,
  join$1: function(_, separator) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, separator);
  },
  "+join:1:0": 1,
  "*join": [10],
  map$1: function(_, f) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = new H.MappedIterable(t1, f);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  "+map:1:0": 1,
  where$1: function(_, f) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = new H.WhereIterable(t1, f);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0)]);
    return t2;
  },
  "+where:1:0": 1,
  get$isEmpty: function(_) {
    return this.readClasses$0()._liblib1$_length === 0;
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    return this.readClasses$0()._liblib1$_length !== 0;
  },
  "+isNotEmpty": 1,
  get$length: function(_) {
    return this.readClasses$0()._liblib1$_length;
  },
  "+length": 1,
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  "+contains:1:0": 1,
  add$1: function(_, value) {
    this.modify$1(new P.CssClassSetImpl_add_closure(value));
  },
  "+add:1:0": 1,
  remove$1: function(_, value) {
    var s, result;
    if (typeof value !== "string")
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P.CssClassSetImpl.prototype.remove$1, _receiver, "remove$1");
  },
  addAll$1: function(_, iterable) {
    this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
  },
  "+addAll:1:0": 1,
  removeAll$1: function(iterable) {
    this.modify$1(new P.CssClassSetImpl_removeAll_closure(iterable));
  },
  "+removeAll:1:0": 1,
  get$first: function(_) {
    var t1 = this.readClasses$0()._first;
    if (t1 == null)
      H.throwExpression(new P.StateError("No elements"));
    return t1.get$_liblib1$_element();
  },
  "+first": 1,
  get$last: function(_) {
    var t1 = this.readClasses$0()._last;
    if (t1 == null)
      H.throwExpression(new P.StateError("No elements"));
    return t1.get$_liblib1$_element();
  },
  "+last": 1,
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return t1.toList$1$growable(t1, growable);
  },
  "+toList:0:1:growable": 1,
  "*toList": [3],
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 1,
  clear$0: function(_) {
    this.modify$1(new P.CssClassSetImpl_clear_closure());
  },
  "+clear:0:0": 1,
  modify$1: function(f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  "+modify:1:0": 1,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSString];
  }
},

"+CssClassSetImpl": [76],

CssClassSetImpl_add_closure: {"": "Closure;value_0-",
  call$1: function(s) {
    return J.add$1$ax(s, this.value_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CssClassSetImpl_add_closure": [],

CssClassSetImpl_addAll_closure: {"": "Closure;iterable_0-",
  call$1: function(s) {
    return J.addAll$1$ax(s, this.iterable_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CssClassSetImpl_addAll_closure": [],

CssClassSetImpl_removeAll_closure: {"": "Closure;iterable_0-",
  call$1: function(s) {
    return s.removeAll$1(this.iterable_0);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CssClassSetImpl_removeAll_closure": [],

CssClassSetImpl_clear_closure: {"": "Closure;",
  call$1: function(s) {
    return J.clear$0$ax(s);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CssClassSetImpl_clear_closure": [],

FilteredElementList: {"": "ListBase;_node-,_childNodes-",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  "+_filtered": 1,
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  "+forEach:1:0": 1,
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  "+[]=:2:0": 1,
  set$length: function(_, newLength) {
    var len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  "+length=": 1,
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  "+add:1:0": 1,
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  "+addAll:1:0": 1,
  contains$1: function(_, needle) {
    var t1 = J.getInterceptor$x(needle);
    if (typeof needle !== "object" || needle === null || !t1.$isElement)
      return false;
    return J.$eq(t1.get$parentNode(needle), this._node);
  },
  "+contains:1:0": 1,
  sort$1: function(_, compare) {
    throw H.wrapException(new P.UnsupportedError("Cannot sort filtered list"));
  },
  "+sort:1:0": 1,
  "*sort": [0],
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
  },
  "+setRange:4:0": 1,
  "*setRange": [2],
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  "+removeRange:2:0": 1,
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  "+clear:0:0": 1,
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      J.remove$0$ax(result);
    return result;
  },
  "+removeLast:0:0": 1,
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    result = t1[index];
    J.remove$0$ax(result);
    return result;
  },
  "+removeAt:1:0": 1,
  remove$1: function(_, element) {
    var t1, i, indexElement;
    t1 = J.getInterceptor(element);
    if (typeof element !== "object" || element === null || !t1.$isElement)
      return false;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      indexElement = t1[i];
      if (indexElement === element) {
        J.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  "+remove:1:0": 1,
  get$remove: function(_receiver) {
    return new J.BoundClosure$i1(this, P.FilteredElementList.prototype.remove$1, _receiver, "remove$1");
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  "+length": 1,
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 1,
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  "+iterator": 1,
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

"+FilteredElementList": [],

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+FilteredElementList__filtered_closure": [],

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+FilteredElementList_removeRange_closure": []}],
["html_utils", "package:irhydra/src/html_utils.dart", , E, {
toHtml: function(e) {
  var t1, $parent, t2, insertable;
  t1 = J.getInterceptor$x(e);
  $parent = t1.get$parent(e);
  t2 = $parent == null;
  if (!t2 && J.$eq(J.get$length$asx(J.get$nodes$x($parent)), 1))
    return J.get$innerHtml$x($parent);
  insertable = t2 ? e : t1.clone$1(e, true);
  t1 = document.createElement("div", null);
  t2 = J.getInterceptor$x(t1);
  t2.append$1(t1, insertable);
  return t2.get$innerHtml(t1);
},

"+toHtml:1:0": 1}],
["hydra_html", "hydra.dart", , U, {
currentFileNames: function() {
  return J.join$1$ax(J.map$1$ax($.currentFiles, new U.currentFileNames_closure()), ", ");
},

"+currentFileNames:0:0": 1,

readAsText: function(file, callback) {
  var reader, t1, $arguments, t2;
  reader = new FileReader();
  t1 = new W._EventStream(reader, C.EventStreamProvider_load._eventType, false);
  t1.$builtinTypeInfo = [null];
  $arguments = H.substitute(t1.$as_EventStream, H.getRuntimeTypeInfo(t1));
  t2 = $arguments == null ? null : $arguments[0];
  t1 = new W._EventStreamSubscription(0, t1._liblib6$_target, t1._eventType, W._EventStreamSubscription__wrapZone(new U.readAsText_closure(callback, reader)), t1._useCapture);
  t1.$builtinTypeInfo = [t2];
  t2 = t1._liblib6$_onData;
  if (t2 != null && t1._pauseCount <= 0)
    J.$$dom_addEventListener$3$x(t1._liblib6$_target, t1._eventType, t2, t1._useCapture);
  reader.readAsText(file);
},

"+readAsText:2:0": 1,

reloadCurrentFiles: function() {
  $.currentPhase = null;
  $.currentMode = null;
  Y.dispatch();
  for (var t1 = J.get$iterator$ax($.currentFiles); t1.moveNext$0() === true;)
    U.readAsText(t1.get$current(), U.loadData$closure);
},

"+reloadCurrentFiles:0:0": 1,

displayPhase: function(method, phase) {
  $.currentPhase = phase;
  Y.dispatch();
  J.scrollTo$2$x(W._convertNativeToDart_Window(document.defaultView), 0, 0);
  $.currentMode.displayPhase$2(method, phase);
  Y.dispatch();
},

"+displayPhase:2:0": 1,

loadData: function(text) {
  var t1, mode;
  text = J.replaceAll$2$s(text, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\r\\n|\\r", false, true, false), null, null), "\n");
  $.currentMode = null;
  for (t1 = new H.ListIterator($.get$MODES(), 2, 0, null); t1.moveNext$0();) {
    mode = t1._liblib$_current;
    if (mode.canRecognize$1(text) === true) {
      $.currentMode = mode;
      break;
    }
  }
  G.display($.currentMode.parse$1(text), U.displayPhase$closure);
  Y.dispatch();
},

"+loadData:1:0": 1,

loadUrl: function(url) {
  return W.HttpRequest_getString(url, null, null).then$1(U.loadData$closure);
},

"+loadUrl:1:0": 1,

loadDemo: function(demoId) {
  var files;
  if (C.Map_K93ad.containsKey$1(demoId) === true) {
    files = J.map$1$ax(C.Map_K93ad.$index(C.Map_K93ad, demoId), new U.loadDemo_closure());
    R.start();
    P.Future_forEach(files, U.loadUrl$closure).whenComplete$1(R.stop$closure);
  }
},

"+loadDemo:1:0": 1,

connectToFileInput: function($name, action) {
  var t1, input;
  t1 = "#" + $name + "-artifact";
  input = document.querySelector(t1);
  J.get$onChange$x(input).listen$1(new U.connectToFileInput_closure(action, input));
  return new U.connectToFileInput_closure0($name, input);
},

"+connectToFileInput:2:0": 1,

main: function() {
  var t1, t2, currentFragment;
  G.connectDOM();
  t1 = new W._EventStream(window, C.EventStreamProvider_hashchange._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._liblib6$_target, t1._eventType, W._EventStreamSubscription__wrapZone(new U.main_closure()), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  t2 = J.get$href$x(C.Window_methods.get$location(window));
  currentFragment = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2)).fragment;
  if (J.startsWith$1$s(currentFragment, "demo-") === true)
    P.Timer_Timer(C.Duration_10000, new U.main_closure0(currentFragment));
},

"+main:0:0": 1,

init_autogenerated: function() {
  var __root, __html0, __html1, __html2, __html3, __html4, __html5, __html6, __html7, __t, t1, t2, t3;
  __root = $.get$webUIRoot();
  __html0 = W.Element_Element$html("<a class=\"btn\" href=\"#\"></a>", $.get$nullTreeSanitizer(), null);
  __html1 = W.Element_Element$html("<i class=\"icon-repeat\"></i>", $.get$nullTreeSanitizer(), null);
  __html2 = W.Element_Element$html("<a class=\"btn\" href=\"#\">Load Profile</a>", $.get$nullTreeSanitizer(), null);
  __html3 = W.Element_Element$html("<div is=\"x-tabs\" id=\"tabs\">\n              <div data-title=\"IR\" data-href=\"ir\">\n                <div class=\"alert alert-block\" style=\"display: none;\" id=\"unmatched-deopt-warning\">\n                  <button type=\"button\" class=\"close\">\u00d7</button>\n                  <h4>Unable to match deopt to lithium</h4>\n                  <p>This function has deoptimizations recorded but this phase does not contain information needed to match deopt position to LIR instruction</p>\n                  <p>Make sure that you are using at least V8 3.17.1 and open <em>Code Generation</em> phase.</p>\n                </div>\n                <div class=\"ir-quick-links\"></div>\n                <div is=\"x-irpane\" id=\"ir-pane\">\n                </div>\n              </div>\n              <div id=\"graph-pane\" data-title=\"Graph\" data-href=\"graph\"></div>\n              <template class=\"after-tabs\"></template>\n            </div>", $.get$nullTreeSanitizer(), null);
  __html4 = W.Element_Element$html("<div class=\"btn-group\">\n                  <a class=\"btn dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\"></a>\n                  <ul class=\"dropdown-menu\">\n                    <template></template>\n                  </ul>\n                </div>", $.get$nullTreeSanitizer(), null);
  __html5 = W.Element_Element$html("<span class=\"caret\" style=\"border-top-color: black;\"></span>", $.get$nullTreeSanitizer(), null);
  __html6 = W.Element_Element$html("<li><a href=\"#\"></a></li>", $.get$nullTreeSanitizer(), null);
  __html7 = W.Element_Element$html("<div class=\"hero-unit\">\n              <h1><span class=\"brand\">IR Hydra</span></h1>\n              <p class=\"lead\">This is a tool that can display intermediate representations used by V8 and Dart VM optimizing compilers.</p>\n              <p>It is mostly intended for compiler developers but can also be used by JavaScript/Dart developers investigating performance of their applications. Don't be surprised if it seems unfriendly or enters a strange state. Just refresh the page. Feel free to send questions and suggestions to <a href=\"mailto:me@mrale.ph\">me@mrale.ph</a>.</p>\n              <p>You can also try loading a sample <a href=\"#demo-1\">demo file (v8 @ x64)</a> to explore IRHydra's features.</p>\n              <p>How to obtain compilation artifacts:</p>\n              <h2>V8</h2>\n              <p>Run your application with <code>--trace-hydrogen --print-opt-code --code-comments --trace-deopt</code> and collect <code>hydrogen.cfg</code> file and data dumped into the stadard output.</p>\n              <p><code>--print-opt-code</code> requires a special build of V8 with <code>v8_enable_disassembler</code> GYP variable set to <code>1</code>.</p>\n              <p>When running in Chromium use <code>--js-flags=\"...\"</code> to pass V8 flags and <code>--no-sandbox</code> to allow V8 to write <code>hydrogen.cfg</code>.</p>\n              <p>V8 3.17.1 or newer is required to reliably map deoptimizations to lithium instructions when disassembly is not present. Alternatively you can just apply <a href=\"https://codereview.chromium.org/12217103\">this</a> patch.</p>\n              <h2>Dart VM</h2>\n              <p>Run with <code>--print-flow-graph-optimized --disassemble-optimized --code-comments</code> and collect data dumped to the standard output.</p>\n              <p>When running in Dartium use <code>DART_FLAGS</code> environment variable to pass flags.</p>\n            </div>", $.get$nullTreeSanitizer(), null);
  __t = new V.Template(__root, [], []);
  __root.get$nodes;
  t1 = new W._ChildNodeListLazy(__root)._this.childNodes;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  __t.listen$2(J.get$onClick$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(t1[1]), 1)), 1)), 3)), new U.init_autogenerated_closure());
  t1 = new W._ChildNodeListLazy(__root)._this.childNodes;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  t2 = __t.children;
  t2.push(new V.ConditionalTemplate(false, new U.init_autogenerated_closure0(__html0, __html1), new U.init_autogenerated_closure1(), null, J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(t1[1]), 1)), 1)), 5), [], []));
  t1 = new W._ChildNodeListLazy(__root)._this.childNodes;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  t2.push(new V.ConditionalTemplate(false, new U.init_autogenerated_closure2(__html2), new U.init_autogenerated_closure3(), null, J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(t1[1]), 1)), 1)), 7), [], []));
  t1 = new W._ChildNodeListLazy(__root)._this.childNodes;
  if (3 >= t1.length)
    throw H.ioore(t1, 3);
  t2.push(new V.ConditionalTemplate(false, new U.init_autogenerated_closure4(__html3, __html4, __html5, __html6), new U.init_autogenerated_closure5(), null, J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(t1[3]), 1)), 3)), 1), [], []));
  t1 = new W._ChildNodeListLazy(__root)._this.childNodes;
  if (3 >= t1.length)
    throw H.ioore(t1, 3);
  t2.push(new V.ConditionalTemplate(false, new U.init_autogenerated_closure6(__html7), new U.init_autogenerated_closure7(), null, J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(t1[3]), 1)), 3)), 3), [], []));
  t1 = new W._ChildNodeListLazy(__root)._this.childNodes;
  if (5 >= t1.length)
    throw H.ioore(t1, 5);
  t3 = new Y.V8IRDescriptions(null, null, null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), new F.ScopedCssMapper(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))), null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  t3.set$host(t3, t1[5]);
  t2.push(new V.ComponentItem(t3));
  __t.create$0();
  __t.insert$0(__t);
},

"+init_autogenerated:0:0": 1,

currentFileNames_closure: {"": "Closure;",
  call$1: function(file) {
    return J.get$name$x(file);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+currentFileNames_closure": [],

readAsText_closure: {"": "Closure;callback_0-,reader_1-",
  call$1: function(e) {
    return this.callback_0.call$1(this.reader_1.result);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+readAsText_closure": [],

loadDemo_closure: {"": "Closure;",
  call$1: function(file) {
    return "demos/" + H.S(file);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+loadDemo_closure": [],

connectToFileInput_closure: {"": "Closure;action_0-,input_1-",
  call$1: function($event) {
    return this.action_0.call$1(J.get$files$x(this.input_1));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+connectToFileInput_closure": [],

connectToFileInput_closure0: {"": "Closure;name_2-,input_3-",
  call$0: function() {
    var t1 = "#" + this.name_2 + "-artifact-form";
    J.reset$0$x(document.querySelector(t1));
    Q.scoped(new U.connectToFileInput__closure(this.input_3));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+connectToFileInput_closure": [],

connectToFileInput__closure: {"": "Closure;input_4-",
  call$0: function() {
    Q._enterScopeIfNeeded();
    J.click$0$x(Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.input_4));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+connectToFileInput__closure": [],

closure0: {"": "Closure;",
  call$1: function(files) {
    $.currentFiles = files;
    U.reloadCurrentFiles();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+closure": [],

closure1: {"": "Closure;",
  call$1: function(files) {
    U.readAsText(J.$index$asx(files, 0), $.currentMode.get$loadProfile());
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+closure": [],

main_closure: {"": "Closure;",
  call$1: function(e) {
    var t1, t2, from, to, tabs, anchor;
    t1 = J.getInterceptor$x(e);
    t2 = t1.get$oldUrl(e);
    from = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2)).fragment;
    t1 = t1.get$newUrl(e);
    to = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t1)).fragment;
    t1 = J.getInterceptor$s(to);
    if (t1.startsWith$1(to, "demo-") === true) {
      U.loadDemo(to);
      return;
    }
    t2 = J.getInterceptor(from);
    if (t2.$eq(from, to) || J.$eq(t2.startsWith$1(from, "ir"), t1.startsWith$1(to, "ir")) || J.$eq(t2.startsWith$1(from, "graph"), t1.startsWith$1(to, "graph")))
      return;
    tabs = J.get$xtag$x(document.querySelector("#tabs"));
    if (t1.startsWith$1(to, "ir") === true)
      tabs.switchTo$1("ir");
    else if (t1.startsWith$1(to, "graph") === true)
      tabs.switchTo$1("graph");
    anchor = document.querySelector("a[name='" + H.S(to) + "']");
    if (anchor != null)
      J.scrollIntoView$0$x(anchor);
    Y.dispatch();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+main_closure": [],

main_closure0: {"": "Closure;currentFragment_0-",
  call$0: function() {
    U.loadDemo(this.currentFragment_0);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+main_closure": [],

init_autogenerated_closure: {"": "Closure;",
  call$1: function($$event) {
    $.get$openCompilation().call$0();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated_closure": [],

init_autogenerated_closure1: {"": "Closure;",
  call$0: function() {
    return $.currentFiles != null;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated_closure": [],

init_autogenerated_closure0: {"": "Closure;__html0_0-,__html1_1-",
  call$1: function(__t) {
    var __e2, __binding1, t1;
    __e2 = J.clone$1$x(this.__html0_0, true);
    __binding1 = __t.contentBind$2(new U.init_autogenerated__closure(), false);
    t1 = J.getInterceptor$x(__e2);
    J.addAll$1$ax(t1.get$nodes(__e2), [J.clone$1$x(this.__html1_1, true), document.createTextNode(" Reload "), __binding1]);
    __t.listen$2(t1.get$onClick(__e2), new U.init_autogenerated__closure0());
    J.addAll$1$ax(__t, [document.createTextNode("\n            "), __e2, document.createTextNode("\n          ")]);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated_closure": [],

init_autogenerated__closure: {"": "Closure;",
  call$0: function() {
    return U.currentFileNames();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated__closure": [],

init_autogenerated__closure0: {"": "Closure;",
  call$1: function($$event) {
    U.reloadCurrentFiles();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated__closure": [],

init_autogenerated_closure3: {"": "Closure;",
  call$0: function() {
    return $.currentMode != null;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated_closure": [],

init_autogenerated_closure2: {"": "Closure;__html2_2-",
  call$1: function(__t) {
    var __e4 = J.clone$1$x(this.__html2_2, true);
    __t.listen$2(J.get$onClick$x(__e4), new U.init_autogenerated__closure1());
    J.addAll$1$ax(__t, [document.createTextNode("\n            "), __e4, document.createTextNode("\n          ")]);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated_closure": [],

init_autogenerated__closure1: {"": "Closure;",
  call$1: function($$event) {
    $.get$openProfile().call$0();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated__closure": [],

init_autogenerated_closure5: {"": "Closure;",
  call$0: function() {
    return $.currentPhase != null;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated_closure": [],

init_autogenerated_closure4: {"": "Closure;__html3_3-,__html4_4-,__html5_5-,__html6_6-",
  call$1: function(__t) {
    var __e16, t1, t2;
    __e16 = J.clone$1$x(this.__html3_3, true);
    t1 = J.getInterceptor$x(__e16);
    __t.listen$2(J.get$onClick$x(J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(t1.get$nodes(__e16), 1)), 1)), 1)), new U.init_autogenerated__closure2());
    t2 = new U.IRPane(null, null, [], P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, U._Range), null, null, null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), new F.ScopedCssMapper(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))), null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t2.set$host(t2, J.$index$asx(J.get$nodes$x(J.$index$asx(t1.get$nodes(__e16), 1)), 5));
    __t.component$1(t2);
    __t.conditional$3(J.$index$asx(t1.get$nodes(__e16), 5), new U.init_autogenerated__closure3(), new U.init_autogenerated__closure4(this.__html4_4, this.__html5_5, this.__html6_6));
    t1 = new V.Tabs(null, null, null, [], null, null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), new F.ScopedCssMapper(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))), null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.set$host(t1, __e16);
    __t.component$1(t1);
    J.addAll$1$ax(__t, [document.createTextNode("\n            "), __e16, document.createTextNode("\n          ")]);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated_closure": [],

init_autogenerated__closure2: {"": "Closure;",
  call$1: function($$event) {
    J.set$display$x(J.get$style$x(J.get$parent$x(J.get$target$x($$event))), "none");
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated__closure": [],

init_autogenerated__closure3: {"": "Closure;",
  call$0: function() {
    return J.$gt$n(J.get$length$asx($.currentMode.get$supportedCodeModes()), 1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated__closure": [],

init_autogenerated__closure4: {"": "Closure;__html4_7-,__html5_8-,__html6_9-",
  call$1: function(__t) {
    var __e14, t1, __e9, __binding8, t2;
    __e14 = J.clone$1$x(this.__html4_7, true);
    t1 = J.getInterceptor$x(__e14);
    __e9 = J.$index$asx(t1.get$nodes(__e14), 1);
    __binding8 = __t.contentBind$2(new U.init_autogenerated___closure(), false);
    J.addAll$1$ax(J.get$nodes$x(__e9), [document.createTextNode("\n                    "), __binding8, document.createTextNode("\n                    "), J.clone$1$x(this.__html5_8, true), document.createTextNode("\n                  ")]);
    t2 = J.getInterceptor$x(__t);
    t2.loop$3(__t, J.$index$asx(J.get$nodes$x(J.$index$asx(t1.get$nodes(__e14), 3)), 1), new U.init_autogenerated___closure0(), new U.init_autogenerated___closure1(this.__html6_9));
    t2.addAll$1(__t, [document.createTextNode("\n                "), __e14, document.createTextNode("\n              ")]);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated__closure": [],

init_autogenerated___closure: {"": "Closure;",
  call$0: function() {
    return $.currentMode.get$codeMode();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated___closure": [],

init_autogenerated___closure0: {"": "Closure;",
  call$0: function() {
    return $.currentMode.get$supportedCodeModes();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated___closure": [],

init_autogenerated___closure1: {"": "Closure;__html6_10-",
  call$3: function($$list, $$index, __t) {
    var mode, __e12, __e11, __binding10, t1;
    mode = J.$index$asx($$list, $$index);
    __e12 = J.clone$1$x(this.__html6_10, true);
    __e11 = J.$index$asx(J.get$nodes$x(__e12), 0);
    __binding10 = __t.contentBind$2(new U.init_autogenerated____closure(mode), false);
    t1 = J.getInterceptor$x(__e11);
    J.add$1$ax(t1.get$nodes(__e11), __binding10);
    __t.listen$2(t1.get$onClick(__e11), new U.init_autogenerated____closure0(mode));
    J.addAll$1$ax(__t, [document.createTextNode("\n                      "), __e12, document.createTextNode("\n                    ")]);
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+init_autogenerated___closure": [],

init_autogenerated____closure: {"": "Closure;mode_11-",
  call$0: function() {
    return this.mode_11;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated____closure": [],

init_autogenerated____closure0: {"": "Closure;mode_12-",
  call$1: function($$event) {
    $.currentMode.set$codeMode(this.mode_12);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated____closure": [],

init_autogenerated_closure7: {"": "Closure;",
  call$0: function() {
    return $.currentPhase == null;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+init_autogenerated_closure": [],

init_autogenerated_closure6: {"": "Closure;__html7_13-",
  call$1: function(__t) {
    J.addAll$1$ax(__t, [document.createTextNode("\n            "), J.clone$1$x(this.__html7_13, true), document.createTextNode("\n          ")]);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+init_autogenerated_closure": []}],
["hydrogen_parser", "package:irhydra/src/modes/v8/hydrogen_parser.dart", , N, {
preparse: function(str) {
  var t1, nameRe, methods, t2, method, start, t3, tag, t4, $name, substr;
  t1 = H.JSSyntaxRegExp_makeNative("(begin|end)_(compilation|cfg)\\n", false, true, false);
  nameRe = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("name \"([^\"]*)\"", false, true, false), null, null);
  methods = [];
  if (typeof str !== "string")
    H.throwExpression(new P.ArgumentError(str));
  t1 = new H._AllMatchesIterable(new H.JSSyntaxRegExp(t1, null, null), str);
  t1 = new H._AllMatchesIterator(t1._re, t1._string, null);
  t2 = J.getInterceptor$asx(str);
  method = null;
  start = null;
  for (; t1.moveNext$0();) {
    t3 = t1._liblib7$_current._match;
    if (0 >= t3.length)
      throw H.ioore(t3, 0);
    tag = t3[0];
    t4 = J.getInterceptor$s(tag);
    if (t4.startsWith$1(tag, "begin_") === true) {
      t4 = t3.index;
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      t3 = J.get$length$asx(t3[0]);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      start = t4 + t3;
    } else if (t4.$eq(tag, "end_compilation\n")) {
      t3 = nameRe.firstMatch$1(t2.substring$2(str, start, t3.index))._match;
      if (1 >= t3.length)
        throw H.ioore(t3, 1);
      $name = t3[1];
      method = new K.Method(new K.Name($name, null, $name), [], []);
      methods.push(method);
    } else if (t4.$eq(tag, "end_cfg\n")) {
      substr = N._deferSubstring(str, start, t3.index);
      t3 = nameRe.firstMatch$1(t2.substring$2(str, start, t2.indexOf$2(str, "\n", start)))._match;
      if (1 >= t3.length)
        throw H.ioore(t3, 1);
      $name = t3[1];
      method.phases.push(new K.Phase($name, substr, null));
    }
  }
  return methods;
},

"+preparse:1:0": 1,

_deferSubstring: function(str, start, end) {
  return new N._deferSubstring_closure(str, start, end);
},

"+_deferSubstring:3:0": 1,

_deferSubstring_closure: {"": "Closure;str_0-,start_1-,end_2-",
  call$0: function() {
    return J.substring$2$s(this.str_0, this.start_1, this.end_2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_deferSubstring_closure": [],

CfgParser: {"": "ParserBase;builder-,block-,lines-,lineno-,_states-",
  get$patterns: function() {
    return H.fillLiteralMap(["begin_block", H.fillLiteralMap(["name \"([^\"]*)\"", new N.CfgParser_patterns_closure(this), "successors(.*)$", new N.CfgParser_patterns_closure0(this), "begin_locals", H.fillLiteralMap(["end_locals", new N.CfgParser_patterns_closure1(this), "^\\s+\\d+\\s+(\\w\\d+)\\s+(.*)$", new N.CfgParser_patterns_closure2(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "begin_HIR", H.fillLiteralMap(["end_HIR", new N.CfgParser_patterns_closure3(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "begin_LIR", H.fillLiteralMap(["end_LIR", new N.CfgParser_patterns_closure4(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "end_block", new N.CfgParser_patterns_closure5(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  "+patterns": 1
},

"+CfgParser": [],

CfgParser_patterns_closure: {"": "Closure;this_0-",
  call$1: function($name) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.builder._blocks;
    t3 = new K.Block(t2.get$length(t2), $name, [], [], [], []);
    t2.$indexSet(t2, $name, t3);
    t1.block = t3;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CfgParser_patterns_closure": [],

CfgParser_patterns_closure0: {"": "Closure;this_1-",
  call$1: function(successors) {
    var t1, t2, t3, m, t4, t5;
    t1 = H.JSSyntaxRegExp_makeNative("\"(B\\d+)\"", false, true, false);
    if (typeof successors !== "string")
      H.throwExpression(new P.ArgumentError(successors));
    t1 = new H._AllMatchesIterable(new H.JSSyntaxRegExp(t1, null, null), successors);
    t1 = new H._AllMatchesIterator(t1._re, t1._string, null);
    t2 = this.this_1;
    t3 = t2.builder._edges;
    for (; t1.moveNext$0();) {
      m = t1._liblib7$_current;
      t4 = t2.block.name;
      t5 = m._match;
      if (1 >= t5.length)
        throw H.ioore(t5, 1);
      t3.push(new K._Edge(t4, t5[1]));
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+CfgParser_patterns_closure": [],

CfgParser_patterns_closure1: {"": "Closure;this_2-",
  call$0: function() {
    return this.this_2.leave$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+CfgParser_patterns_closure": [],

CfgParser_patterns_closure2: {"": "Closure;this_3-",
  call$2: function($name, args) {
    this.this_3.block.hir.push(" 0 0 " + H.S($name) + " Phi " + H.S(args) + " <|@");
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+CfgParser_patterns_closure": [],

CfgParser_patterns_closure3: {"": "Closure;this_4-",
  call$0: function() {
    var t1 = this.this_4;
    C.JSArray_methods.addAll$1(t1.block.hir, t1.subrange$0());
    t1.leave$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+CfgParser_patterns_closure": [],

CfgParser_patterns_closure4: {"": "Closure;this_5-",
  call$0: function() {
    var t1 = this.this_5;
    C.JSArray_methods.addAll$1(t1.block.lir, t1.subrange$0());
    t1.leave$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+CfgParser_patterns_closure": [],

CfgParser_patterns_closure5: {"": "Closure;this_6-",
  call$0: function() {
    var t1 = this.this_6;
    t1.block = null;
    t1.leave$0();
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+CfgParser_patterns_closure": []}],
["ir", "package:irhydra/src/modes/ir.dart", , K, {
Name: {"": "Object;full<-,source>-,$short<-",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return J.$eq(other.get$full(), this.full);
  },
  "+==:1:0": 1
},

"+Name": [],

Phase: {"": "Object;name>-,ir<-,code*-"},

"+Phase": [],

Deopt: {"": "Object;id>-,raw<-,isLazy<-"},

"+Deopt": [],

Method: {"": "Object;name>-,phases<-,deopts<-"},

"+Method": [],

Block: {"": "Object;id>-,name>-,successors<-,predecessors<-,hir<-,lir<-",
  edge$1: function(to) {
    J.add$1$ax(to.get$predecessors(), this);
    this.successors.push(to);
  },
  "+edge:1:0": 1
},

"+Block": [],

Instruction0: {"": "Object;raw<-,id>-,op<-,args<-"},

"+Instruction": [],

Branch: {"": "Instruction0;true_successor-,false_successor-,raw-,id-,op-,args-", $isBranch: true},

"+Branch": [],

CfgBuilder: {"": "Object;_blocks-,_edges-",
  get$blocks: function() {
    var t1, t2, t3, edge;
    for (t1 = this._edges, t2 = new H.ListIterator(t1, t1.length, 0, null), t3 = this._blocks; t2.moveNext$0();) {
      edge = t2._liblib$_current;
      t3.$index(t3, edge.get$from()).edge$1(t3.$index(t3, edge.get$to()));
    }
    C.JSArray_methods.set$length(t1, 0);
    return t3;
  },
  "+blocks": 1
},

"+CfgBuilder": [],

_Edge: {"": "Object;from<-,to<-"},

"+_Edge": []}],
["ir_parser", "package:irhydra/src/modes/dartvm/ir_parser.dart", , Y, {
parse0: function(text) {
  var t1, blocks, t2, graphEntry;
  t1 = text.call$0();
  t1 = new Y.IRParser(new K.CfgBuilder(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), []), null, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\s*\\d+:\\s+(.*)$", false, true, false), null, null), J.toList$0$ax(J.split$1$s(t1, "\n")), 0, []);
  t1._states.push(new R._State(t1._convertPatterns$1(t1.get$patterns()), t1.lineno));
  t1.parse$0();
  blocks = t1.builder.get$blocks();
  t1 = blocks.get$values(blocks);
  t2 = t1._iterable;
  graphEntry = t1._f$1(t2.get$first(t2));
  t2 = blocks.get$values(blocks);
  t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
  if (1 >= t2.length)
    throw H.ioore(t2, 1);
  graphEntry.edge$1(t2[1]);
  return blocks;
},

"+parse:1:0": 1,

IRParser: {"": "ParserBase;builder-,currentBlock-,lineRe-,lines-,lineno-,_states-",
  get$currentLine: function() {
    var line, m, t1;
    line = R.ParserBase.prototype.get$currentLine.call(this);
    m = this.lineRe.firstMatch$1(line);
    if (m != null) {
      t1 = m._match;
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      t1 = t1[1];
    } else
      t1 = J.trim$0$s(line);
    return t1;
  },
  "+currentLine": 1,
  get$patterns: function() {
    return H.fillLiteralMap(["^(B\\d+)\\[", new Y.IRParser_patterns_closure(this), "goto[^\\s]*\\s+(\\d+)$", new Y.IRParser_patterns_closure0(this), "if (\\w+)[^\\(]*(\\(.*\\)).+goto[^\\s]*\\s+.(\\d+), (\\d+).$", new Y.IRParser_patterns_closure1(this), "^(v\\d+) <- (\\w+)[^\\(]*(\\(.*\\))", new Y.IRParser_patterns_closure2(this), "^(\\w+):\\d+(\\(.*\\))", new Y.IRParser_patterns_closure3(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  "+patterns": 1
},

"+IRParser": [],

IRParser_patterns_closure: {"": "Closure;this_0-",
  call$1: function(block_name) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.builder._blocks;
    t3 = new K.Block(t2.get$length(t2), block_name, [], [], [], []);
    t2.$indexSet(t2, block_name, t3);
    t1.currentBlock = t3;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRParser_patterns_closure": [],

IRParser_patterns_closure0: {"": "Closure;this_1-",
  call$1: function(successor) {
    var t1 = this.this_1;
    t1.builder._edges.push(new K._Edge(t1.currentBlock.name, "B" + H.S(successor)));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRParser_patterns_closure": [],

IRParser_patterns_closure1: {"": "Closure;this_2-",
  call$4: function(cond_op, cond_args, true_successor, false_successor) {
    var t1, t2;
    true_successor = "B" + H.S(true_successor);
    false_successor = "B" + H.S(false_successor);
    t1 = this.this_2;
    t2 = t1.builder._edges;
    t2.push(new K._Edge(t1.currentBlock.name, true_successor));
    t2.push(new K._Edge(t1.currentBlock.name, false_successor));
    t1.currentBlock.hir.push(new K.Branch(true_successor, false_successor, t1.get$currentLine(), null, cond_op, cond_args));
  },
  "+call:4:0": 1,
  $isFunction: true
},

"+IRParser_patterns_closure": [],

IRParser_patterns_closure2: {"": "Closure;this_3-",
  call$3: function(id, op, args) {
    var t1;
    if (J.$eq(op, "phi"))
      op = "Phi";
    t1 = this.this_3;
    t1.currentBlock.hir.push(new K.Instruction0(t1.get$currentLine(), id, op, args));
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+IRParser_patterns_closure": [],

IRParser_patterns_closure3: {"": "Closure;this_4-",
  call$2: function(op, args) {
    var t1 = this.this_4;
    t1.currentBlock.hir.push(new K.Instruction0(t1.get$currentLine(), null, op, args));
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+IRParser_patterns_closure": []}],
["js", "package:js/js.dart", , Q, {
_inject: function(code) {
  var script, t1;
  script = document.createElement("script", null);
  t1 = J.getInterceptor$x(script);
  t1.set$type(script, "text/javascript");
  t1.set$text(script, code);
  t1 = document.body;
  t1.get$nodes;
  new W._ChildNodeListLazy(t1)._this.appendChild(script);
},

"+_inject:1:0": 1,

_initialize: function() {
  var exception, t1, t2;
  if ($._jsPortSync != null)
    return;
  try {
    $._jsPortSync = C.Window_methods.lookupPort$1(window, "dart-js-interop-context");
  } catch (exception) {
    H.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    Q._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Support for binding the receiver (this) in proxied functions.\n  function bindIfFunction(f, _this) {\n    if (typeof(f) != \"function\") {\n      return f;\n    } else {\n      return new BoundFunction(_this, f);\n    }\n  }\n\n  function unbind(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj.object;\n    } else {\n      return obj;\n    }\n  }\n\n  function getBoundThis(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj._this;\n    } else {\n      return globalContext;\n    }\n  }\n\n  function BoundFunction(_this, object) {\n    this._this = _this;\n    this.object = object;\n  }\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var object = table.get(message[0]);\n        var receiver = unbind(object);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            var result = bindIfFunction(receiver[field], receiver);\n            return [ 'return', serialize(result) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          var _this = getBoundThis(object);\n          return [ 'return', serialize(receiver.apply(_this, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          var result = bindIfFunction(receiver[args[0]], receiver);\n          return [ 'return', serialize(result) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          // Member function invocation.\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (message instanceof BoundFunction &&\n               typeof(message.object) == 'function') {\n      // Local function proxy.\n      return [ 'funcref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return unbind(proxiedObjectTable.get(id));\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments);\n          args.splice(0, 0, this);\n          args = args.map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = unbind(args[0]);\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n\n      // Create a new instance\n      var instance = new Type();\n\n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler to track number of live / allocated proxies.\n  function proxyCount() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return [live, total];\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    var obj = unbind(deserialize(args[0]));\n    var type = unbind(deserialize(args[1]));\n    return obj instanceof type;\n  }\n\n  // Return true if a JavaScript proxy has a given property.\n  function proxyHasProperty(args) {\n    var obj = unbind(deserialize(args[0]));\n    var member = unbind(deserialize(args[1]));\n    return member in obj;\n  }\n\n  // Delete a given property of object.\n  function proxyDeleteProperty(args) {\n    var obj = unbind(deserialize(args[0]));\n    var member = unbind(deserialize(args[1]));\n    delete obj[member];\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-interop-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-interop-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-interop-context', context);\n  makeGlobalPort('dart-js-interop-create', construct);\n  makeGlobalPort('dart-js-interop-proxy-count', proxyCount);\n  makeGlobalPort('dart-js-interop-equals', proxyEquals);\n  makeGlobalPort('dart-js-interop-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-interop-has-property', proxyHasProperty);\n  makeGlobalPort('dart-js-interop-delete-property', proxyDeleteProperty);\n  makeGlobalPort('dart-js-interop-convert', proxyConvert);\n  makeGlobalPort('dart-js-interop-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-interop-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-interop-globalize', function(data) {\n    if (data[0] == \"objref\" || data[0] == \"funcref\") return proxiedObjectTable.globalize(data[1]);\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-interop-invalidate', function(data) {\n    if (data[0] == \"objref\" || data[0] == \"funcref\") return proxiedObjectTable.invalidate(data[1]);\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = C.Window_methods.lookupPort$1(window, "dart-js-interop-context");
  }
  $._jsPortCreate = C.Window_methods.lookupPort$1(window, "dart-js-interop-create");
  $._jsPortProxyCount = C.Window_methods.lookupPort$1(window, "dart-js-interop-proxy-count");
  $._jsPortEquals = C.Window_methods.lookupPort$1(window, "dart-js-interop-equals");
  $._jsPortInstanceof = C.Window_methods.lookupPort$1(window, "dart-js-interop-instanceof");
  $._jsPortHasProperty = C.Window_methods.lookupPort$1(window, "dart-js-interop-has-property");
  $._jsPortDeleteProperty = C.Window_methods.lookupPort$1(window, "dart-js-interop-delete-property");
  $._jsPortConvert = C.Window_methods.lookupPort$1(window, "dart-js-interop-convert");
  $._jsEnterJavaScriptScope = C.Window_methods.lookupPort$1(window, "dart-js-interop-enter-scope");
  $._jsExitJavaScriptScope = C.Window_methods.lookupPort$1(window, "dart-js-interop-exit-scope");
  $._jsGlobalize = C.Window_methods.lookupPort$1(window, "dart-js-interop-globalize");
  $._jsInvalidate = C.Window_methods.lookupPort$1(window, "dart-js-interop-invalidate");
  t1 = W.ReceivePortSync$();
  t1.receive$1(new Q._initialize_closure());
  $._dartEnterDartScope = t1;
  t1 = W.ReceivePortSync$();
  t1.receive$1(new Q._initialize_closure0());
  $._dartExitDartScope = t1;
  t1 = window;
  t2 = $._dartEnterDartScope;
  t2.toSendPort$0;
  C.Window_methods.registerPort$2(t1, "js-dart-interop-enter-scope", new W._LocalSendPortSync(t2));
  t2 = window;
  t1 = $._dartExitDartScope;
  t1.toSendPort$0;
  C.Window_methods.registerPort$2(t2, "js-dart-interop-exit-scope", new W._LocalSendPortSync(t1));
},

"+_initialize:0:0": 1,

_enterScopeIfNeeded: function() {
  if ($.get$_proxiedObjectTable()._scopeIndices.length === 0)
    P.runAsync(new Q._enterScopeIfNeeded_closure(Q._enterScope()));
},

"+_enterScopeIfNeeded:0:0": 1,

scoped: function(f) {
  var depth, t1;
  depth = Q._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    Q._exitScope(depth);
  }
},

"+scoped:1:0": 1,

_enterScope: function() {
  Q._initialize();
  var t1 = $.get$_proxiedObjectTable();
  t1._scopeIndices.push(t1._handleStack.length);
  $._jsEnterJavaScriptScope.callSync$1([]);
  return $.get$_proxiedObjectTable()._scopeIndices.length;
},

"+_enterScope:0:0": 1,

_exitScope: function(depth) {
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
},

"+_exitScope:1:0": 1,

_pruneUndefined: function(arg1, arg2, arg3, arg4, arg5, arg6) {
  var args, index;
  args = [arg1, arg2, arg3, arg4, arg5, arg6];
  index = H.Arrays_indexOf(args, C.C__Undefined, 0, args.length);
  if (J.$lt$n(index, 0) === true)
    return args;
  return C.JSArray_methods.sublist$2(args, 0, index);
},

"+_pruneUndefined:6:0": 1,

_serialize: function(message) {
  var t1, t2;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else {
    t1 = J.getInterceptor$x(message);
    if (typeof message === "object" && message !== null && !!t1.$isSendPortSync)
      return message;
    else {
      if (typeof message === "object" && message !== null && !!t1.$isElement)
        t2 = t1.get$document(message) == null || J.$eq(t1.get$document(message), document);
      else
        t2 = false;
      if (t2)
        return ["domref", Q._serializeElement(message)];
      else if (typeof message === "object" && message !== null && !!t1.$isFunctionProxy)
        return ["funcref", message._liblib9$_id, message._port];
      else if (typeof message === "object" && message !== null && !!t1.$isProxy)
        return ["objref", message._liblib9$_id, message._port];
      else if (typeof message === "object" && message !== null && !!t1.$isSerializable)
        return Q._serialize(message.toJs$0());
      else {
        t1 = $.get$_proxiedObjectTable();
        return ["objref", t1.add$1(t1, message), new W._LocalSendPortSync($.get$_proxiedObjectTable()._port)];
      }
    }
  }
},

"+_serialize:1:0": 1,

_deserialize: function(message) {
  var t1;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else {
    t1 = J.getInterceptor$asx(message);
    if (typeof message === "object" && message !== null && !!t1.$isSendPortSync)
      return message;
  }
  switch (t1.$index(message, 0)) {
    case "funcref":
      return new Q._deserialize_deserializeFunction().call$1(message);
    case "objref":
      return new Q._deserialize_deserializeObject().call$1(message);
    case "domref":
      return Q._deserializeElement(t1.$index(message, 1));
    default:
  }
  throw H.wrapException("Unsupported serialized data: " + H.S(message));
},

"+_deserialize:1:0": 1,

_serializeElement: function(e) {
  var t1, id, t2, $top, newValue, t3;
  t1 = J.getInterceptor$x(e);
  if (t1.get$attributes(e).containsKey$1("data-dart_id") === true)
    id = J.$index$asx(t1.get$attributes(e), "data-dart_id");
  else {
    t2 = $._localNextElementId;
    $._localNextElementId = t2 + 1;
    id = "dart-" + t2;
    J.$indexSet$ax(t1.get$attributes(e), "data-dart_id", id);
  }
  if (e !== document.documentElement)
    for ($top = e; true;) {
      t1 = J.getInterceptor$x($top);
      if (t1.get$attributes($top).containsKey$1("data-dart_temporary_attached") === true) {
        newValue = J.$add$ns(J.$index$asx(t1.get$attributes($top), "data-dart_temporary_attached"), "a");
        J.$indexSet$ax(t1.get$attributes($top), "data-dart_temporary_attached", newValue);
        break;
      }
      if (t1.get$parent($top) == null) {
        J.$indexSet$ax(t1.get$attributes($top), "data-dart_temporary_attached", "a");
        J.add$1$ax(J.get$children$x(document.documentElement), $top);
        break;
      }
      t2 = t1.get$parent($top);
      t3 = document.documentElement;
      if (t2 == null ? t3 == null : t2 === t3)
        break;
      $top = t1.get$parent($top);
    }
  return id;
},

"+_serializeElement:1:0": 1,

_deserializeElement: function(id) {
  var t1, t2, e, $top, newValue, t3;
  t1 = "[data-dart_id=\"" + H.S(id) + "\"]";
  t1 = W._FrozenElementList$_wrap(document.querySelectorAll(t1), null)._nodeList;
  t2 = t1.length;
  if (t2 > 1)
    throw H.wrapException("Non unique ID: " + H.S(id));
  if (t2 === 0)
    throw H.wrapException("Only elements attached to document can be serialized: " + H.S(id));
  e = t1[0];
  if (e !== document.documentElement)
    for ($top = e; true;) {
      t1 = J.getInterceptor$x($top);
      if (t1.get$attributes($top).containsKey$1("data-dart_temporary_attached") === true) {
        newValue = J.substring$1$s(J.$index$asx(t1.get$attributes($top), "data-dart_temporary_attached"), 1);
        J.$indexSet$ax(t1.get$attributes($top), "data-dart_temporary_attached", newValue);
        if (J.$eq(J.get$length$asx(J.$index$asx(t1.get$attributes($top), "data-dart_temporary_attached")), 0)) {
          J.remove$1$ax(t1.get$attributes($top), "data-dart_temporary_attached");
          t1.remove$0($top);
        }
        break;
      }
      t2 = t1.get$parent($top);
      t3 = document.documentElement;
      if (t2 == null ? t3 == null : t2 === t3)
        break;
      $top = t1.get$parent($top);
    }
  return e;
},

"+_deserializeElement:1:0": 1,

_initialize_closure: {"": "Closure;",
  call$1: function(_) {
    return Q._enterScope();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_initialize_closure": [],

_initialize_closure0: {"": "Closure;",
  call$1: function(args) {
    return Q._exitScope(J.$index$asx(args, 0));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_initialize_closure": [],

_enterScopeIfNeeded_closure: {"": "Closure;depth_0-",
  call$0: function() {
    return Q._exitScope(this.depth_0);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_enterScopeIfNeeded_closure": [],

_Undefined: {"": "Object;"},

"+_Undefined": [],

Proxy: {"": "Object;_port-,_liblib9$_id-",
  toJs$0: function() {
    return this;
  },
  "+toJs:0:0": 1,
  $index: function(_, arg) {
    return Q.Proxy__forward(this, "[]", "method", [arg], null);
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    return Q.Proxy__forward(this, "[]=", "method", [key, value], null);
  },
  "+[]=:2:0": 1,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      t1 = true;
    else {
      t1 = J.getInterceptor(other);
      t1 = typeof other === "object" && other !== null && !!t1.$isProxy && $._jsPortEquals.callSync$1([Q._serialize(this), Q._serialize(other)]) === true;
    }
    return t1;
  },
  "+==:1:0": 1,
  toString$0: function(_) {
    return Q.Proxy__forward(this, "toString", "method", [], new Q.Proxy_toString_closure(this));
  },
  "+toString:0:0": 1,
  noSuchMethod$1: function(_, invocation) {
    var member, t1, args, kind;
    member = invocation.get$memberName().get$_name();
    t1 = J.getInterceptor$asx(member);
    if (!J.$eq(t1.indexOf$1(member, "@"), -1))
      member = t1.substring$2(member, 0, t1.indexOf$1(member, "@"));
    args = invocation.get$positionalArguments();
    if (args == null)
      args = [];
    if (invocation.get$isGetter() === true)
      kind = "get";
    else if (invocation.get$isSetter() === true) {
      t1 = J.getInterceptor$s(member);
      if (t1.endsWith$1(member, "=") === true)
        member = t1.substring$2(member, 0, J.$sub$n(t1.get$length(member), 1));
      kind = "set";
    } else
      kind = J.$eq(member, "call") ? "apply" : "method";
    return Q.Proxy__forward(this, member, kind, args, new Q.Proxy_noSuchMethod_closure(this, invocation));
  },
  "+noSuchMethod:1:0": 1,
  $isProxy: true,
  $isSerializable: true,
  $asSerializable: function() {
    return [Q.Proxy];
  },
  static: {
Proxy_Proxy$withArgList: function($constructor, $arguments) {
  var t1, serialized;
  Q._enterScopeIfNeeded();
  t1 = [$constructor];
  C.JSArray_methods.addAll$1(t1, $arguments);
  t1 = new H.MappedListIterable(t1, Q._serialize$closure);
  H.setRuntimeTypeInfo(t1, [null, null]);
  serialized = t1.toList$0(t1);
  return Q._deserialize($._jsPortCreate.callSync$1(serialized));
},

"+new Proxy$withArgList:2:0": 1,

Proxy__serializeDataTree: function(data) {
  var t1, entries, t2, key;
  t1 = J.getInterceptor(data);
  if (typeof data === "object" && data !== null && !!t1.$isMap) {
    entries = P.List_List(null, null);
    for (t2 = J.get$iterator$ax(data.get$keys()); t2.moveNext$0() === true;) {
      key = t2.get$current();
      entries.push([key, Q.Proxy__serializeDataTree(t1.$index(data, key))]);
    }
    return ["map", entries];
  } else if (typeof data === "object" && data !== null && (data.constructor === Array || !!t1.$isIterable)) {
    t1 = t1.map$1(data, Q.Proxy__serializeDataTree$closure);
    return ["list", t1.toList$0(t1)];
  } else
    return ["simple", Q._serialize(data)];
},

"+_serializeDataTree:1:0": 1,

Proxy__forward: function(receiver, member, kind, args, onNone) {
  var result, t1;
  Q._enterScopeIfNeeded();
  result = receiver._port.callSync$1([receiver._liblib9$_id, member, kind, J.toList$0$ax(J.map$1$ax(args, Q._serialize$closure))]);
  t1 = J.getInterceptor$asx(result);
  switch (t1.$index(result, 0)) {
    case "return":
      return Q._deserialize(t1.$index(result, 1));
    case "throws":
      throw H.wrapException(Q._deserialize(t1.$index(result, 1)));
    case "none":
      return onNone == null ? null : onNone.call$0();
    default:
      throw H.wrapException("Invalid return value");
  }
},

"+_forward:4:1:onNone": 1,

"*_forward": [0]}

},

"+Proxy": [77],

Proxy_toString_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1 = this.this_0;
    return P.Object.prototype.toString$0.call(t1, t1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Proxy_toString_closure": [],

Proxy_noSuchMethod_closure: {"": "Closure;this_0-,invocation_1-",
  call$0: function() {
    var t1 = this.this_0;
    return P.Object.prototype.noSuchMethod$1.call(t1, t1, this.invocation_1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Proxy_noSuchMethod_closure": [],

FunctionProxy: {"": "Proxy;_port-,_liblib9$_id-",
  call$6: function(arg1, arg2, arg3, arg4, arg5, arg6) {
    return Q.Proxy__forward(this, "", "apply", Q._pruneUndefined(arg1, arg2, arg3, arg4, arg5, arg6), null);
  },
  "+call:6:0": 1,
  "*call": [78, 78, 78, 78, 78, 78],
  call$0: function() {
    return this.call$6(C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined);
  },
  "+call:0:0": 1,
  call$1: function(arg1) {
    return this.call$6(arg1, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined);
  },
  "+call:1:0": 1,
  call$2: function(arg1, arg2) {
    return this.call$6(arg1, arg2, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined);
  },
  "+call:2:0": 1,
  call$3: function(arg1, arg2, arg3) {
    return this.call$6(arg1, arg2, arg3, C.C__Undefined, C.C__Undefined, C.C__Undefined);
  },
  "+call:3:0": 1,
  call$4: function(arg1, arg2, arg3, arg4) {
    return this.call$6(arg1, arg2, arg3, arg4, C.C__Undefined, C.C__Undefined);
  },
  "+call:4:0": 1,
  call$5: function(arg1, arg2, arg3, arg4, arg5) {
    return this.call$6(arg1, arg2, arg3, arg4, arg5, C.C__Undefined);
  },
  "+call:5:0": 1,
  $isFunctionProxy: true,
  $isFunction: true,
  $is_void_: true,
  $isSerializable: true,
  $asSerializable: function() {
    return [Q.FunctionProxy];
  }
},

"+FunctionProxy": [79],

_ProxiedObjectTable: {"": "Object;_liblib9$_name-,_nextId-,_deletedCount-,_registry-,_port-,_globalIds-,_handleStack-,_scopeIndices-",
  exitScope$0: function() {
    var t1, start, t2, t3, i, t4;
    t1 = this._scopeIndices;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    start = t1.pop();
    for (t1 = this._handleStack, t2 = this._globalIds, t3 = this._registry, i = start; t4 = t1.length, i < t4; ++i) {
      if (i < 0)
        throw H.ioore(t1, i);
      if (!t2.contains$1(t2, t1[i])) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t3.remove$1(t3, t1[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (start !== t4)
      C.JSArray_methods.removeRange$2(t1, start, t4);
  },
  "+exitScope:0:0": 1,
  add$1: function(_, x) {
    var t1, t2, id;
    Q._enterScopeIfNeeded();
    t1 = this._liblib9$_name + "-";
    t2 = this._nextId;
    this._nextId = t2 + 1;
    id = t1 + t2;
    t2 = this._registry;
    t2.$indexSet(t2, id, x);
    this._handleStack.push(id);
    return id;
  },
  "+add:1:0": 1,
  get$count: function() {
    var t1 = this._registry;
    return t1.get$length(t1);
  },
  "+count": 1,
  count$0: function() {
    return this.get$count().call$0();
  },
  get$total: function(_) {
    var t1 = this._registry;
    return t1.get$length(t1) + this._deletedCount;
  },
  "+total": 1,
  _ProxiedObjectTable$0: function() {
    this._port.receive$1(new Q._ProxiedObjectTable_closure(this));
  },
  static: {
_ProxiedObjectTable$: function() {
  var t1, t2, t3, t4;
  t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t2 = W.ReceivePortSync$();
  t3 = P.List_List(null, J.JSString);
  H.setRuntimeTypeInfo(t3, [J.JSString]);
  t4 = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(t4, [J.JSInt]);
  t4 = new Q._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
},

"+new _ProxiedObjectTable:0:0": 1}

},

"+_ProxiedObjectTable": [],

_ProxiedObjectTable_closure: {"": "Closure;this_0-",
  call$1: function(msg) {
    var receiver, method, args, func, result, e, t1, exception;
    try {
      t1 = this.this_0._registry;
      receiver = t1.$index(t1, J.$index$asx(msg, 0));
      method = J.$index$asx(msg, 1);
      args = J.toList$0$ax(J.map$1$ax(J.$index$asx(msg, 2), Q._deserialize$closure));
      if (J.$eq(method, "#call")) {
        func = H.propertyTypeCast(receiver, "$isFunction");
        result = Q._serialize(func.call$1(args));
        return ["return", result];
      } else
        throw H.wrapException("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      return ["throws", H.S(e)];
    }

  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_ProxiedObjectTable_closure": [],

_deserialize_deserializeFunction: {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = J.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if (J.$eq(port, new W._LocalSendPortSync($.get$_proxiedObjectTable()._port))) {
      t1 = $.get$_proxiedObjectTable()._registry;
      return t1.$index(t1, id);
    } else
      return new Q.FunctionProxy(port, id);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_deserialize_deserializeFunction": [],

_deserialize_deserializeObject: {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = J.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if (J.$eq(port, new W._LocalSendPortSync($.get$_proxiedObjectTable()._port))) {
      t1 = $.get$_proxiedObjectTable()._registry;
      return t1.$index(t1, id);
    } else
      return new Q.Proxy(port, id);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_deserialize_deserializeObject": []}],
["linked_list", "package:web_ui/src/linked_list.dart", , L, {
LinkedListNode: {"": "Object;_previous-,_next-,_list-,_liblib0$_value-",
  get$next: function() {
    return this._next;
  },
  "+next": 1,
  next$0: function() {
    return this.get$next().call$0();
  },
  get$value: function(_) {
    return this._liblib0$_value;
  },
  "+value": 1,
  set$value: function(_, e) {
    this._liblib0$_value = e;
    return e;
  },
  "+value=": 1,
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    if (p != null)
      p._next = this;
    if (n != null)
      n._previous = this;
    return this;
  },
  "+_link:2:0": 1,
  append$1: function(_, e) {
    var t1, t2;
    t1 = this._list;
    t1 = new L.LinkedListNode(null, null, t1, e);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "LinkedListNode", 0)]);
    t2 = t1._list;
    if (t2 != null)
      t2._liblib0$_length = t2._liblib0$_length + 1;
    return t1._link$2(this, this._next);
  },
  "+append:1:0": 1,
  remove$0: function(_) {
    var t1, t2;
    t1 = this._list;
    if (t1 == null)
      return;
    t1._liblib0$_length = t1._liblib0$_length - 1;
    t1 = this._previous;
    t2 = this._next;
    if (t1 != null)
      t1._next = t2;
    else
      this._list._head = t2;
    t1 = this._next;
    t2 = this._previous;
    if (t1 != null)
      t1._previous = t2;
    else
      this._list._tail = t2;
    this._next = null;
    this._previous = null;
    this._list = null;
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new L.Bound_remove_LinkedListNode(this, L.LinkedListNode.prototype.remove$0, _receiver, "remove$0");
  },
  $isLinkedListNode: true
},

"+LinkedListNode": [],

LinkedList: {"": "IterableBase;_head-,_tail-,_liblib0$_length-",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  "+length": 1,
  add$1: function(_, e) {
    var node, t1;
    node = new L.LinkedListNode(null, null, this, e);
    H.setRuntimeTypeInfo(node, [H.getRuntimeTypeArgument(this, "LinkedList", 0)]);
    t1 = node._list;
    if (t1 != null)
      t1._liblib0$_length = t1._liblib0$_length + 1;
    t1 = this._tail;
    if (t1 == null) {
      this._tail = node;
      this._head = node;
      return node;
    }
    t1 = node._link$2(t1, null);
    this._tail = t1;
    return t1;
  },
  "+add:1:0": 1,
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, L.LinkedList.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, e) {
    return J.forEach$1$ax(e, this.get$add(this));
  },
  "+addAll:1:0": 1,
  get$iterator: function(_) {
    return L.LinkedListIterator$(this);
  },
  "+iterator": 1,
  $asIterableBase: null,
  $asIterable: null
},

"+LinkedList": [],

LinkedListIterator: {"": "Object;_copy-,_list-,_liblib0$_current-,_pos-",
  get$current: function() {
    return this._liblib0$_current;
  },
  "+current": 1,
  moveNext$0: function() {
    var t1, t2, t3, t4, t5;
    do {
      this._pos = this._pos + 1;
      t1 = this._pos;
      t2 = this._copy;
      t3 = t2.length;
      t4 = t1 < t3;
      if (t4) {
        if (t1 >>> 0 !== t1 || t1 >= t3)
          throw H.ioore(t2, t1);
        t5 = t2[t1]._list !== this._list;
      } else
        t5 = false;
    } while (t5);
    if (t4) {
      if (t1 >>> 0 !== t1 || t1 >= t3)
        throw H.ioore(t2, t1);
      t1 = t2[t1];
      this._liblib0$_current = t1.get$value(t1);
      return true;
    } else {
      this._liblib0$_current = null;
      return false;
    }
  },
  "+moveNext:0:0": 1,
  LinkedListIterator$1: function(_list) {
    var t1, node, i, i0;
    t1 = P.List_List(this._list._liblib0$_length, L.LinkedListNode);
    H.setRuntimeTypeInfo(t1, [L.LinkedListNode]);
    this._copy = t1;
    node = this._list._head;
    for (t1 = this._copy, i = 0; node != null; i = i0) {
      i0 = i + 1;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i] = node;
      node = node._next;
    }
  },
  static: {
LinkedListIterator$: function(_list) {
  var t1 = new L.LinkedListIterator(null, _list, null, -1);
  t1.LinkedListIterator$1(_list);
  return t1;
},

"+new LinkedListIterator:1:0": 1}

},

"+LinkedListIterator": [35]}],
["llprof", "package:irhydra/src/modes/llprof.dart", , U, {
parse4: function(source) {
  var p = new U.LLProfParser([], J.toList$0$ax(J.split$1$s(source, "\n")), 0, []);
  p._states.push(new R._State(p._convertPatterns$1(p.get$patterns()), p.lineno));
  p.parse$0();
  return p.items;
},

"+parse:1:0": 1,

MethodProfile: {"": "Object;name>-,ticksTotal-,lastOffset<-,ticks<-",
  toString$0: function(_) {
    return H.S(this.name) + "#" + H.S(this.lastOffset) + " (" + H.S(this.ticksTotal) + ")";
  },
  "+toString:0:0": 1
},

"+MethodProfile": [],

LLProfParser: {"": "ParserBase;items-,lines-,lineno-,_states-",
  get$patterns: function() {
    return H.fillLiteralMap(["^\\s+(\\d+)\\s+(\\d+\\.\\d+)%\\s+(\\*?)([^ ]+)\\s+\\[(.+)\\]", new U.LLProfParser_patterns_closure(this)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  "+patterns": 1
},

"+LLProfParser": [],

LLProfParser_patterns_closure: {"": "Closure;this_1-",
  call$5: function(ticksTotal, percent, opt, $name, lib) {
    var t1, ticks, t2;
    t1 = {};
    if (!J.$eq(lib, "js") || !J.$eq(opt, "*"))
      return;
    t1.lastOffset_0 = null;
    ticks = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, J.JSDouble);
    t2 = this.this_1;
    t2._states.push(new R._State(t2._convertPatterns$1(H.fillLiteralMap(["\\s+(\\d+\\.\\d+)\\s+([a-f0-9]+):", new U.LLProfParser_patterns__closure(t1, ticks), "\\s+([a-f0-9]+):", new U.LLProfParser_patterns__closure0(t1), "", new U.LLProfParser_patterns__closure1(t1, t2, ticksTotal, $name, ticks)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))), t2.lineno));
  },
  "+call:5:0": 1,
  $isFunction: true
},

"+LLProfParser_patterns_closure": [],

LLProfParser_patterns__closure: {"": "Closure;box_0-,ticks_2-",
  call$2: function(percent, offset) {
    var t1 = this.ticks_2;
    t1.$indexSet(t1, H.Primitives_parseInt(offset, 16, null), H.Primitives_parseDouble(percent, null));
    this.box_0.lastOffset_0 = offset;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+LLProfParser_patterns__closure": [],

LLProfParser_patterns__closure0: {"": "Closure;box_0-",
  call$1: function(offset) {
    this.box_0.lastOffset_0 = offset;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+LLProfParser_patterns__closure": [],

LLProfParser_patterns__closure1: {"": "Closure;box_0-,this_3-,ticksTotal_4-,name_5-,ticks_6-",
  call$0: function() {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.lastOffset_0;
    if (t2 != null)
      t1.lastOffset_0 = H.Primitives_parseInt(t2, 16, null);
    t2 = this.this_3;
    t2.items.push(new U.MethodProfile(this.name_5, H.Primitives_parseInt(this.ticksTotal_4, null, null), t1.lastOffset_0, this.ticks_6));
    t2.leave$1$backtrack(1);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+LLProfParser_patterns__closure": []}],
["logging", "package:logging/logging.dart", , N, {
Logger: {"": "Object;name>-,parent>-,_level-,children>-,_liblib16$_controller-,_liblib16$_stream-",
  get$fullName: function() {
    var t1, t2, t3;
    t1 = this.parent;
    t2 = t1 == null || J.$eq(J.get$name$x(t1), "");
    t3 = this.name;
    return t2 ? t3 : H.S(t1.get$fullName()) + "." + t3;
  },
  "+fullName": 1,
  get$level: function() {
    if ($.hierarchicalLoggingEnabled) {
      var t1 = this.parent;
      if (t1 != null)
        return t1.get$level();
    }
    return $._rootLevel;
  },
  "+level": 1,
  log$3: function(logLevel, message, exception) {
    var t1, t2, t3, record, target;
    t1 = J.get$value$x(this.get$level());
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (logLevel.value >= t1) {
      t1 = this.get$fullName();
      t2 = P.DateTime$_now();
      t3 = $.LogRecord__nextNumber;
      $.LogRecord__nextNumber = t3 + 1;
      record = new N.LogRecord(logLevel, message, t1, t2, t3, exception);
      if ($.hierarchicalLoggingEnabled)
        for (target = this; target != null;) {
          target._publish$1(record);
          target = J.get$parent$x(target);
        }
      else
        N.Logger_Logger("")._publish$1(record);
    }
  },
  "+log:3:0": 1,
  "*log": [0],
  info$2: function(message, exception) {
    return this.log$3(C.Level_INFO_800, message, exception);
  },
  "+info:2:0": 1,
  "*info": [0],
  info$1: function(message) {
    return this.info$2(message, null);
  },
  "+info:1:0": 1,
  warning$2: function(message, exception) {
    return this.log$3(C.Level_WARNING_900, message, exception);
  },
  "+warning:2:0": 1,
  "*warning": [0],
  warning$1: function(message) {
    return this.warning$2(message, null);
  },
  "+warning:1:0": 1,
  _publish$1: function(record) {
  },
  "+_publish:1:0": 1,
  Logger$_internal$2: function($name, $parent) {
    var t1 = this.parent;
    if (t1 != null)
      J.$indexSet$ax(J.get$children$x(t1), this.name, this);
  },
  $isLogger: true,
  static: {
"": "Logger__loggers-",
Logger_Logger: function($name) {
  var t1, dot, $parent, thisName, res;
  if (C.JSString_methods.startsWith$1($name, "."))
    throw H.wrapException(new P.ArgumentError("name shouldn't start with a '.'"));
  if ($.Logger__loggers == null)
    $.Logger__loggers = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  if ($.Logger__loggers.containsKey$1($name)) {
    t1 = $.Logger__loggers;
    return t1.$index(t1, $name);
  }
  dot = C.JSString_methods.lastIndexOf$1($name, ".");
  if (dot === -1) {
    $parent = $name !== "" ? N.Logger_Logger("") : null;
    thisName = $name;
  } else {
    $parent = N.Logger_Logger(C.JSString_methods.substring$2($name, 0, dot));
    thisName = C.JSString_methods.substring$1($name, dot + 1);
  }
  res = N.Logger$_internal(thisName, $parent);
  t1 = $.Logger__loggers;
  t1.$indexSet(t1, $name, res);
  return res;
},

"+new Logger:1:0": 1,

Logger$_internal: function($name, $parent) {
  var t1 = new N.Logger($name, $parent, null, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, N.Logger), null, null);
  t1.Logger$_internal$2($name, $parent);
  return t1;
},

"+new Logger$_internal:2:0": 1}

},

"+Logger": [],

Level: {"": "Object;name>-,value>-",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.value === J.get$value$x(other);
  },
  "+==:1:0": 1,
  $lt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value < t1;
  },
  "+<:1:0": 1,
  $le: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value <= t1;
  },
  "+<=:1:0": 1,
  $gt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value > t1;
  },
  "+>:1:0": 1,
  $ge: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value >= t1;
  },
  "+>=:1:0": 1,
  compareTo$1: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value - t1;
  },
  "+compareTo:1:0": 1,
  get$hashCode: function(_) {
    return this.value;
  },
  "+hashCode": 1,
  toString$0: function(_) {
    return this.name;
  },
  "+toString:0:0": 1,
  static: {
"": "Level_ALL-,Level_OFF-,Level_FINEST-,Level_FINER-,Level_FINE-,Level_CONFIG-,Level_INFO-,Level_WARNING-,Level_SEVERE-,Level_SHOUT-",
}

},

"+Level": [80],

LogRecord: {"": "Object;level<-,message-,loggerName-,time-,sequenceNumber-,exception-", static: {
"": "LogRecord__nextNumber-",
}
},

"+LogRecord": []}],
["method_list", "package:irhydra/src/ui/method_list.dart", , G, {
display: function(methods, displayPhase) {
  var t1 = {};
  t1.timestamp_0 = 0;
  $.currentMethods = J.toList$0$ax(J.map$1$ax(methods, new G.display_closure(t1, displayPhase)));
  G._resetHeader();
  G._updateView();
},

"+display:2:0": 1,

_updateView: function() {
  var filter, t1, t2;
  J.set$text$x(J.$index$asx(J.get$nodes$x($._sortByDropDown), 0), J.get$text$x(J.query$1$x(J.get$parent$x($._sortByDropDown), "#" + H.S($._sortCriteria))));
  filter = G._createFilter();
  t1 = J.get$nodes$x($._methodsList);
  t2 = J.getInterceptor$ax(t1);
  t2.clear$0(t1);
  t2.addAll$1(t1, J.map$1$ax(J.where$1$ax($.currentMethods, filter), new G._updateView_closure()));
},

"+_updateView:0:0": 1,

_createFilter: function() {
  if (J.$eq($._currentFilter, ""))
    return new G._createFilter_closure();
  return new G._createFilter_closure0(new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative(J.replaceAll$2$s(J.replaceAllMapped$2$s($._currentFilter, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[-+$]", false, true, false), null, null), new G._createFilter_closure1()), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative(" +", false, true, false), null, null), ".*"), false, false, false), null, null));
},

"+_createFilter:0:0": 1,

_updateCurrentFilter: function() {
  if (J.$eq($._currentFilter, J.get$value$x($._filterInput)))
    return;
  $._currentFilter = J.get$value$x($._filterInput);
  G._updateView();
},

"+_updateCurrentFilter:0:0": 1,

_resetHeader: function() {
  J.set$value$x($._filterInput, "");
  $._currentFilter = "";
  $._sortCriteria = "sort-by-timestamp";
},

"+_resetHeader:0:0": 1,

connectDOM: function() {
  var delayed, t1, criteria;
  if ($._methodsList != null)
    return;
  $._methodsList = document.querySelector("#methods");
  G._resizeMethodsList();
  J.get$onResize$x(W._convertNativeToDart_Window(document.defaultView)).listen$1(new G.connectDOM_closure());
  $._filterInput = document.querySelector("#methods-filter");
  delayed = new X.DelayedReaction(C.Duration_200000, null);
  J.get$onKeyUp$x($._filterInput).listen$1(new G.connectDOM_closure0(delayed));
  J.get$onChange$x($._filterInput).listen$1(new G.connectDOM_closure1(delayed));
  $._sortByDropDown = document.querySelector("#sort-by");
  for (t1 = new H.ListIterator(["sort-by-timestamp", "sort-by-reopts"], 2, 0, null); t1.moveNext$0();) {
    criteria = t1._liblib$_current;
    J.get$onClick$x(document.querySelector("#" + H.S(criteria))).listen$1(new G.connectDOM_closure2(criteria));
  }
},

"+connectDOM:0:0": 1,

_resizeMethodsList: function() {
  Q.scoped(new G._resizeMethodsList_closure());
},

"+_resizeMethodsList:0:0": 1,

_setSortCriteria: function(criteria) {
  if (J.$eq(criteria, $._sortCriteria))
    return;
  $._sortCriteria = criteria;
  J.sort$1$ax($.currentMethods, G._createComparator());
  G._updateView();
},

"+_setSortCriteria:1:0": 1,

_createComparator: function() {
  switch ($._sortCriteria) {
    case "sort-by-timestamp":
      return new G._createComparator_closure();
    case "sort-by-reopts":
      G._computeReopts();
      return new G._createComparator_closure0();
    default:
  }
},

"+_createComparator:0:0": 1,

_computeReopts: function() {
  var t1, timestamp, reopts, wrapper, t2, fullName, val;
  if (J.get$isEmpty$asx($.currentMethods) !== true) {
    t1 = J.get$first$ax($.currentMethods).get$reopts();
    t1 = typeof t1 === "number" && Math.floor(t1) === t1;
  } else
    t1 = true;
  if (t1)
    return;
  timestamp = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  reopts = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  for (t1 = J.get$iterator$ax($.currentMethods); t1.moveNext$0() === true;) {
    wrapper = t1.get$current();
    t2 = J.getInterceptor$x(wrapper);
    fullName = J.get$name$x(t2.get$method(wrapper)).get$full();
    if (J.$eq(fullName, ""))
      continue;
    val = reopts.$index(reopts, fullName);
    if (val != null)
      reopts.$indexSet(reopts, fullName, J.$add$ns(val, 1));
    else {
      timestamp.$indexSet(timestamp, fullName, wrapper.get$timestamp());
      reopts.$indexSet(reopts, fullName, J.get$isEmpty$asx(t2.get$method(wrapper).get$deopts()) === true ? 0 : 1);
    }
  }
  for (t1 = J.get$iterator$ax($.currentMethods); t1.moveNext$0() === true;) {
    wrapper = t1.get$current();
    fullName = J.get$name$x(J.get$method$x(wrapper)).get$full();
    if (J.$eq(fullName, "")) {
      wrapper.set$reopts(0);
      wrapper.set$firstTimestamp(0);
      continue;
    }
    wrapper.set$reopts(reopts.$index(reopts, fullName));
    wrapper.set$firstTimestamp(timestamp.$index(timestamp, fullName));
  }
},

"+_computeReopts:0:0": 1,

_createMethodNode: function(method, displayPhase) {
  var li, labels, t1, t2, $name, ul, phase, e, t3, t4;
  li = W.Element_Element$html("<li><h4></h4><ul class=\"nav nav-list\"></ul></li>", null, null);
  labels = [];
  t1 = J.getInterceptor$x(method);
  if (J.get$source$x(t1.get$name(method)) != null)
    labels.push(W.Element_Element$html("<span class=\"label label-info\">" + H.S(J.get$source$x(t1.get$name(method))) + "</span>", null, null));
  if (J.get$isEmpty$asx(method.get$deopts()) !== true)
    labels.push(W.Element_Element$html("<span class=\"label label-important\">deopts</span>", null, null));
  if (labels.length !== 0) {
    t2 = J.getInterceptor$x(li);
    J.addAll$1$ax(J.get$nodes$x(J.get$first$ax(t2.get$nodes(li))), labels);
    J.add$1$ax(J.get$nodes$x(J.get$first$ax(t2.get$nodes(li))), document.createElement("br", null));
  }
  $name = J.get$isEmpty$asx(t1.get$name(method).get$$short()) === true ? "[?]" : t1.get$name(method).get$$short();
  t1 = J.getInterceptor$x(li);
  J.appendText$1$x(J.get$first$ax(t1.get$nodes(li)), $name);
  ul = J.get$last$ax(t1.get$nodes(li));
  for (t1 = J.get$iterator$ax(method.get$phases()), t2 = J.getInterceptor$x(ul); t1.moveNext$0() === true;) {
    phase = t1.get$current();
    e = document.createElement("a", null);
    J.set$href$x(e, "#ir");
    t3 = J.getInterceptor$x(e);
    t3.appendText$1(e, J.get$name$x(phase));
    t3.get$onClick(e).listen$1(new G._createMethodNode_closure(method, displayPhase, phase));
    t3 = t2.get$nodes(ul);
    t4 = document.createElement("li", null);
    J.add$1$ax(J.get$nodes$x(t4), e);
    J.add$1$ax(t3, t4);
  }
  return li;
},

"+_createMethodNode:2:0": 1,

display_closure: {"": "Closure;box_0-,displayPhase_1-",
  call$1: function(method) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.timestamp_0;
    t1.timestamp_0 = t2 + 1;
    return G._MethodWrapper$(t2, method, this.displayPhase_1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+display_closure": [],

_updateView_closure: {"": "Closure;",
  call$1: function(wrapper) {
    return wrapper.get$node();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_updateView_closure": [],

_createFilter_closure: {"": "Closure;",
  call$1: function(wrapper) {
    return true;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_createFilter_closure": [],

_createFilter_closure1: {"": "Closure;",
  call$1: function(m) {
    return "\\" + H.S(m.group$1(0));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_createFilter_closure": [],

_createFilter_closure0: {"": "Closure;pattern_0-",
  call$1: function(wrapper) {
    var t1 = J.get$name$x(wrapper);
    if (typeof t1 !== "string")
      H.throwExpression(new P.ArgumentError(t1));
    return this.pattern_0._nativeRegExp.test(t1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_createFilter_closure": [],

connectDOM_closure: {"": "Closure;",
  call$1: function(e) {
    return G._resizeMethodsList();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+connectDOM_closure": [],

connectDOM_closure0: {"": "Closure;delayed_0-",
  call$1: function(e) {
    return this.delayed_0.schedule$1(G._updateCurrentFilter$closure);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+connectDOM_closure": [],

connectDOM_closure1: {"": "Closure;delayed_1-",
  call$1: function(e) {
    this.delayed_1._setTimer$1(null);
    G._updateCurrentFilter();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+connectDOM_closure": [],

connectDOM_closure2: {"": "Closure;criteria_2-",
  call$1: function(e) {
    G._setSortCriteria(this.criteria_2);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+connectDOM_closure": [],

_resizeMethodsList_closure: {"": "Closure;",
  call$0: function() {
    var $top, t1, windowHeight;
    Q._enterScopeIfNeeded();
    $top = J.get$top$x(J.offset$0$x(Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1($._methodsList)));
    Q._enterScopeIfNeeded();
    t1 = Q._deserialize($._jsPortSync.callSync$1([]));
    Q._enterScopeIfNeeded();
    windowHeight = J.height$0$x(t1.jQuery$1(J.get$window$x(Q._deserialize($._jsPortSync.callSync$1([])))));
    J.set$height$x(J.get$style$x($._methodsList), H.S(J.$sub$n(J.$sub$n(windowHeight, $top), 20)) + "px");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_resizeMethodsList_closure": [],

_createComparator_closure: {"": "Closure;",
  call$2: function(a, b) {
    return J.$sub$n(a.get$timestamp(), b.get$timestamp());
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_createComparator_closure": [],

_createComparator_closure0: {"": "Closure;",
  call$2: function(a, b) {
    var result = J.$sub$n(b.get$reopts(), a.get$reopts());
    if (J.$eq(result, 0)) {
      result = J.$sub$n(a.get$firstTimestamp(), b.get$firstTimestamp());
      if (J.$eq(result, 0))
        result = J.$sub$n(a.get$timestamp(), b.get$timestamp());
    }
    return result;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+_createComparator_closure": [],

_MethodWrapper: {"": "Object;timestamp<-,reopts@-,firstTimestamp@-,method>-,node<-,name>-", static: {
_MethodWrapper$: function(timestamp, method, displayPhase) {
  return new G._MethodWrapper(timestamp, null, null, method, G._createMethodNode(method, displayPhase), G._MethodWrapper__createName(J.get$name$x(method)));
},

"+new _MethodWrapper:3:0": 1,

_MethodWrapper__createName: function($name) {
  var t1 = J.getInterceptor$x($name);
  return t1.get$source($name) != null ? H.S(t1.get$source($name)) + "|" + H.S($name.get$$short()) : $name.get$$short();
},

"+_createName:1:0": 1}
},

"+_MethodWrapper": [],

_createMethodNode_closure: {"": "Closure;method_0-,displayPhase_1-,phase_2-",
  call$1: function(e) {
    return this.displayPhase_1.call$2(this.method_0, this.phase_2);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_createMethodNode_closure": []}],
["mode", "package:irhydra/src/modes/mode.dart", , Z, {
BaseMode: {"": "Object;ir<-,ticks<-",
  get$code: function(_) {
    return this._code;
  },
  "+code": 1,
  set$code: function(_, new_code) {
    this._codeMode = "no asm";
    this._code = new_code;
  },
  "+code=": 1,
  get$codeMode: function() {
    return this._codeMode;
  },
  "+codeMode": 1,
  set$codeMode: function(val) {
    this._codeMode = val;
    this.updateIRView$0();
  },
  "+codeMode=": 1,
  get$supportedCodeModes: function() {
    var t1 = this._code;
    return t1 != null && J.get$isEmpty$asx(t1) !== true ? C.List_09I : C.List_empty;
  },
  "+supportedCodeModes": 1,
  loadProfile$1: function(data) {
    this.profile = U.parse4(data);
  },
  "+loadProfile:1:0": 1,
  get$loadProfile: function() {
    return new P.BoundClosure$1(this, Z.BaseMode.prototype.loadProfile$1, null, "loadProfile$1");
  }
},

"+BaseMode": []}],
["name_parser", "package:irhydra/src/modes/dartvm/name_parser.dart", , N, {
parse3: function(full) {
  var m, t1, $name, components;
  m = $.get$uriNameRe().firstMatch$1(full);
  if (m != null) {
    t1 = m._match;
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    $name = t1[1];
  } else
    $name = full;
  components = N._splitName($name);
  return new K.Name(full, C.JSArray_methods.get$first(components), N._buildShort(components));
},

"+parse:1:0": 1,

_splitName: function($name) {
  var comps, prefix, fileNameMatch, t1, dartSchemeMatch, accessorMatch, t2, part, t3, keyword, privacy;
  comps = [];
  prefix = [];
  fileNameMatch = $.get$fileNameRe().firstMatch$1($name);
  if (fileNameMatch != null) {
    t1 = fileNameMatch._match;
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    comps.push(t1[1]);
    if (2 >= t1.length)
      throw H.ioore(t1, 2);
    $name = t1[2];
  } else {
    dartSchemeMatch = $.get$dartSchemeRe().firstMatch$1($name);
    if (dartSchemeMatch != null) {
      t1 = dartSchemeMatch._match;
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      comps.push(t1[1]);
      if (2 >= t1.length)
        throw H.ioore(t1, 2);
      $name = t1[2];
    }
  }
  accessorMatch = $.get$accessorRe().firstMatch$1($name);
  t1 = accessorMatch != null;
  for (t2 = J.get$iterator$ax(J.split$1$s(t1 ? J.substring$2$s($name, 0, accessorMatch._match.index) : $name, "_")); t2.moveNext$0() === true;) {
    part = J.replaceAll$2$s(t2.get$current(), $.get$demangleRe(), "");
    t3 = J.getInterceptor(part);
    if (t3.$eq(part, "::"))
      continue;
    if (t3.$eq(part, "")) {
      prefix.push("_");
      continue;
    }
    if (prefix.length !== 0) {
      part = C.JSArray_methods.join$0(prefix) + H.S(part);
      C.JSArray_methods.set$length(prefix, 0);
    }
    comps.push(part);
  }
  if (t1) {
    t1 = accessorMatch._match;
    t2 = t1.length;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    keyword = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    privacy = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    $name = t1[3];
    comps.push(H.S(keyword) + ":" + H.S(privacy) + H.S($name));
  }
  return comps;
},

"+_splitName:1:0": 1,

_buildShort: function(comps) {
  var t1;
  C.JSArray_methods.removeAt$1(comps, 0);
  t1 = comps.length;
  if (t1 === 2) {
    if (1 >= t1)
      throw H.ioore(comps, 1);
    t1 = J.startsWith$1$s(comps[1], H.S(comps[0]) + ".") === true;
  } else
    t1 = false;
  if (t1) {
    if (1 >= comps.length)
      throw H.ioore(comps, 1);
    return comps[1];
  }
  return C.JSArray_methods.join$1(comps, ".");
},

"+_buildShort:1:0": 1}],
["parsing", "package:irhydra/src/parsing.dart", , R, {
match: function(str, re, action) {
  var m, args, t1, i;
  m = re.firstMatch$1(str);
  if (m == null)
    return false;
  args = [];
  for (t1 = m._match, i = 0; i < t1.length - 1;) {
    ++i;
    args.push(t1[i]);
  }
  H.Primitives_applyFunction(action, args, P.Function__toMangledNames(null));
  return true;
},

"+match:3:0": 1,

ParserBase: {"": "Object;",
  get$currentLine: function() {
    var t1, t2;
    t1 = this.lines;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
      return this.get$currentLine$bailout(1, t1);
    t2 = this.lineno;
    if (t2 < 0 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  "+currentLine": 1,
  get$currentLine$bailout: function(state0, t1) {
    return J.$index$asx(t1, this.lineno);
  },
  parse$0: function() {
    var t1, t2, t3, t4;
    t1 = this.lines;
    t2 = J.getInterceptor$asx(t1);
    while (true) {
      t3 = this.lineno;
      t4 = t2.get$length(t1);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!!(t3 >= t4))
        break;
      this._applyPatterns$1(this.get$currentLine());
      this.lineno = this.lineno + 1;
    }
  },
  "+parse:0:0": 1,
  subrange$1$inclusive: function(inclusive) {
    var t1, t2, t3, t4;
    t1 = C.JSArray_methods.get$last(this._states);
    t2 = inclusive ? 0 : 1;
    t3 = this.lineno;
    t4 = inclusive ? 1 : 0;
    return J.getRange$2$ax(this.lines, t1.start + t2, t3 + t4);
  },
  "+subrange:0:1:inclusive": 1,
  "*subrange": [1],
  subrange$0: function() {
    return this.subrange$1$inclusive(false);
  },
  "+subrange:0:0": 1,
  leave$2$backtrack$nstates: function(backtrack, nstates) {
    var t1, i;
    for (t1 = this._states, i = 0; i < nstates; ++i) {
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
    }
    this.lineno = this.lineno - backtrack;
  },
  "+leave:0:2:backtrack:nstates": 1,
  "*leave": [2, 81],
  leave$0: function() {
    return this.leave$2$backtrack$nstates(0, 1);
  },
  "+leave:0:0": 1,
  leave$1$nstates: function(nstates) {
    return this.leave$2$backtrack$nstates(0, nstates);
  },
  "+leave:1:0:nstates": 1,
  leave$1$backtrack: function(backtrack) {
    return this.leave$2$backtrack$nstates(backtrack, 1);
  },
  "+leave:1:0:backtrack": 1,
  _applyPatterns$1: function(str) {
    var t1;
    for (t1 = C.JSArray_methods.get$iterator(C.JSArray_methods.get$last(this._states).patterns); t1.moveNext$0();)
      if (t1.get$current().apply$1(str) === true)
        break;
  },
  "+_applyPatterns:1:0": 1,
  _convertPatterns$1: function(patternsMap) {
    var result, t1, re, action, t2, substate;
    result = [];
    for (t1 = J.get$iterator$ax(patternsMap.get$keys()); t1.moveNext$0() === true;) {
      re = t1.get$current();
      if (typeof re !== "string")
        return this._convertPatterns$1$bailout(1, result, re, patternsMap, t1);
      action = patternsMap.$index(patternsMap, re);
      t2 = J.getInterceptor(action);
      if (typeof action === "object" && action !== null && !!t2.$isFunction) {
        t2 = re === "" ? null : new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative(re, false, true, false), null, null);
        result.push(new R._Pattern(t2, action));
      } else if (typeof action === "object" && action !== null && !!t2.$isMap) {
        substate = this._convertPatterns$1(action);
        t2 = re === "" ? null : new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative(re, false, true, false), null, null);
        result.push(new R._Pattern(t2, new R.ParserBase__convertPatterns_closure(this, substate)));
      } else
        throw H.wrapException("action should be either Map or a Function");
    }
    return result;
  },
  "+_convertPatterns:1:0": 1,
  _convertPatterns$1$bailout: function(state0, result, re, patternsMap, t1) {
    switch (state0) {
      case 0:
        result = [];
        t1 = J.get$iterator$ax(patternsMap.get$keys());
      case 1:
        var action, t2, substate;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
                re = t1.get$current();
              case 1:
                state0 = 0;
                action = patternsMap.$index(patternsMap, re);
                t2 = J.getInterceptor(action);
                if (typeof action === "object" && action !== null && !!t2.$isFunction) {
                  t2 = J.$eq(re, "") ? null : new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative(re, false, true, false), null, null);
                  result.push(new R._Pattern(t2, action));
                } else if (typeof action === "object" && action !== null && !!t2.$isMap) {
                  substate = this._convertPatterns$1(action);
                  t2 = J.$eq(re, "") ? null : new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative(re, false, true, false), null, null);
                  result.push(new R._Pattern(t2, new R.ParserBase__convertPatterns_closure(this, substate)));
                } else
                  throw H.wrapException("action should be either Map or a Function");
            }
        return result;
    }
  }
},

"+ParserBase": [],

ParserBase__convertPatterns_closure: {"": "Closure;this_0-,substate_1-",
  call$0: function() {
    var t1 = this.this_0;
    t1._states.push(new R._State(this.substate_1, t1.lineno));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+ParserBase__convertPatterns_closure": [],

_Pattern: {"": "Object;re-,action-",
  action$0: function($receiver) {
    return this.action.call$0();
  },
  apply$1: function(str) {
    var t1 = this.re;
    if (t1 == null) {
      this.action$0(this);
      return true;
    }
    return R.match(str, t1, this.action);
  },
  "+apply:1:0": 1
},

"+_Pattern": [],

_State: {"": "Object;patterns-,start>-"},

"+_State": []}],
["preparser", "package:irhydra/src/modes/dartvm/preparser.dart", , O, {
parse2: function(str) {
  var t1, cfgNameRe, codeNameRe, functions, t2, t3, start, t4, tag, t5, firstLF, phaseName, secondLF, $name, substr, $function;
  t1 = H.JSSyntaxRegExp_makeNative("\\*\\*\\* (BEGIN|END) (CFG|CODE)\\n", false, true, false);
  cfgNameRe = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^==== (.*)$", false, true, false), null, null);
  codeNameRe = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("'(.*)' {$", false, true, false), null, null);
  functions = [];
  t2 = new O.parse_createFunction(functions);
  if (typeof str !== "string")
    H.throwExpression(new P.ArgumentError(str));
  t1 = new H._AllMatchesIterable(new H.JSSyntaxRegExp(t1, null, null), str);
  t1 = new H._AllMatchesIterator(t1._re, t1._string, null);
  t3 = J.getInterceptor$asx(str);
  start = null;
  for (; t1.moveNext$0();) {
    t4 = t1._liblib7$_current._match;
    if (0 >= t4.length)
      throw H.ioore(t4, 0);
    tag = t4[0];
    t5 = J.getInterceptor$s(tag);
    if (t5.startsWith$1(tag, "*** B") === true) {
      t5 = t4.index;
      if (0 >= t4.length)
        throw H.ioore(t4, 0);
      t4 = J.get$length$asx(t4[0]);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      start = t5 + t4;
    } else if (t5.$eq(tag, "*** END CFG\n")) {
      firstLF = t3.indexOf$2(str, "\n", start);
      phaseName = t3.substring$2(str, start, firstLF);
      t5 = J.getInterceptor$ns(firstLF);
      secondLF = t3.indexOf$2(str, "\n", t5.$add(firstLF, 1));
      t5 = cfgNameRe.firstMatch$1(t3.substring$2(str, t5.$add(firstLF, 1), secondLF))._match;
      if (1 >= t5.length)
        throw H.ioore(t5, 1);
      $name = t5[1];
      substr = O._deferSubstring0(str, J.$add$ns(secondLF, 1), t4.index);
      J.add$1$ax(t2.call$2$phaseName($name, phaseName).get$phases(), new K.Phase(phaseName, substr, null));
    } else if (t5.$eq(tag, "*** END CODE\n")) {
      substr = O._deferSubstring0(str, start, t4.index);
      t4 = codeNameRe.firstMatch$1(t3.substring$2(str, start, t3.indexOf$2(str, "\n", start)))._match;
      if (1 >= t4.length)
        throw H.ioore(t4, 1);
      $function = t2.call$2$phaseName(t4[1], "Code");
      t4 = J.get$isEmpty$asx($function.get$phases());
      t5 = $function.get$phases();
      if (t4 !== true)
        J.set$code$x(J.get$last$ax(t5), substr);
      else
        J.add$1$ax(t5, new K.Phase("Code", null, substr));
    }
  }
  return functions;
},

"+parse:1:0": 1,

_deferSubstring0: function(str, start, end) {
  return new O._deferSubstring_closure0(str, start, end);
},

"+_deferSubstring:3:0": 1,

parse_createFunction: {"": "Closure;functions_0-",
  call$2$phaseName: function($name, phaseName) {
    var t1 = this.functions_0;
    if (t1.length === 0 || !J.$eq(C.JSArray_methods.get$last(t1).name.full, $name) || J.$eq(C.JSArray_methods.get$last(C.JSArray_methods.get$last(t1).phases).name, phaseName))
      t1.push(new K.Method(N.parse3($name), [], []));
    return C.JSArray_methods.get$last(t1);
  },
  "+call:1:1:phaseName": 1,
  "*call": [0],
  call$1: function(name) {
    return this.call$2$phaseName(name, null);
  },
  "+call:1:0": 1,
  call$catchAll: function() {
    return {phaseName: null};
  },
  $isFunction: true
},

"+parse_createFunction": [],

_deferSubstring_closure0: {"": "Closure;str_0-,start_1-,end_2-",
  call$0: function() {
    return J.substring$2$s(this.str_0, this.start_1, this.end_2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_deferSubstring_closure": []}],
["spinner", "package:irhydra/src/spinner.dart", , R, {
start: function() {
  R.stop();
  Q.scoped(new R.start_closure(document.querySelector(".navbar-inner > .container")));
},

"+start:0:0": 1,

stop: function() {
  if ($._spinner != null) {
    Q.scoped(new R.stop_closure());
    var t1 = $._spinner;
    $._jsInvalidate.callSync$1(Q._serialize(t1.toJs$0()));
    $._spinner = null;
  }
},

"+stop:0:0": 1,

start_closure: {"": "Closure;target_0-",
  call$0: function() {
    var t1, opts;
    t1 = H.fillLiteralMap(["lines", 13, "length", 7, "width", 4, "radius", 8, "corners", 1, "rotate", 0, "color", "#000", "speed", 1, "trail", 60, "shadow", false, "hwaccel", false, "className", "spinner", "zIndex", 2000000000, "top", "auto", "left", "auto"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    Q._enterScopeIfNeeded();
    opts = Q._deserialize($._jsPortConvert.callSync$1(Q.Proxy__serializeDataTree(t1)));
    Q._enterScopeIfNeeded();
    t1 = Q.Proxy_Proxy$withArgList(Q._deserialize($._jsPortSync.callSync$1([])).get$Spinner(), Q._pruneUndefined(opts, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined, C.C__Undefined)).spin$1(this.target_0);
    $._jsGlobalize.callSync$1(Q._serialize(t1.toJs$0()));
    $._spinner = t1;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+start_closure": [],

stop_closure: {"": "Closure;",
  call$0: function() {
    return J.stop$0$x($._spinner);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+stop_closure": []}],
["templating", "package:web_ui/templating.dart", , V, {
updateBinding: function(value, node, stringValue) {
  var t1, node0;
  t1 = J.getInterceptor(value);
  if (typeof value === "object" && value !== null && !!t1.$isNode) {
    J.replaceWith$1$x(node, value);
    return value;
  }
  if (stringValue == null)
    stringValue = t1.toString$0(value);
  t1 = J.getInterceptor(node);
  t1 = typeof node === "object" && node !== null && !!t1.$isText;
  if (t1)
    J.set$text$x(node, stringValue);
  else {
    node0 = document.createTextNode(stringValue);
    J.replaceWith$1$x(node, node0);
    node = node0;
  }
  return node;
},

"+updateBinding:3:0": 1,

"*updateBinding": [0],

updateCssClass: function(elem, addClasses, classes) {
  var t1, t2;
  t1 = J.getInterceptor(classes);
  if (t1.$eq(classes, "") || classes == null)
    return;
  if (addClasses)
    if (typeof classes === "string") {
      t1 = J.getInterceptor$x(elem);
      if (C.JSString_methods.contains$1(classes, " ") === true)
        J.addAll$1$ax(t1.get$classes(elem), classes.split(" "));
      else
        J.add$1$ax(t1.get$classes(elem), classes);
    } else {
      t2 = H.checkSubtype(classes, "$isList", [J.JSString], "$asList");
      if (t2)
        J.addAll$1$ax(J.get$classes$x(elem), t1.where$1(classes, new V.updateCssClass_closure()));
      else
        throw H.wrapException(new P.ArgumentError("classes must be a String or List<String>."));
    }
  else if (typeof classes === "string") {
    t1 = J.getInterceptor$x(elem);
    if (C.JSString_methods.contains$1(classes, " ") === true)
      t1.get$classes(elem).removeAll$1(classes.split(" "));
    else
      J.remove$1$ax(t1.get$classes(elem), classes);
  } else {
    t2 = H.checkSubtype(classes, "$isList", [J.JSString], "$asList");
    if (t2)
      J.get$classes$x(elem).removeAll$1(t1.where$1(classes, new V.updateCssClass_closure0()));
    else
      throw H.wrapException(new P.ArgumentError("classes must be a String or List<String>."));
  }
},

"+updateCssClass:3:0": 1,

bindCssClasses: function(elem, exp, debugLocation) {
  return Y.watchAndInvoke(exp, new V.bindCssClasses_closure(elem), "css-class-bind", debugLocation);
},

"+bindCssClasses:3:0": 1,

"*bindCssClasses": [0],

sanitizeUri: function(uri) {
  return V._isSafeUri(uri) ? uri : "#";
},

"+sanitizeUri:1:0": 1,

_isSafeUri: function(uri) {
  var scheme, t1;
  scheme = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(uri)).scheme;
  t1 = J.getInterceptor(scheme);
  if (t1.$eq(scheme, ""))
    return true;
  return C.JSArray_methods.contains$1(C.List_http_https_ftp_mailto, t1.toLowerCase$0(scheme)) || "MAILTO" === t1.toUpperCase$0(scheme);
},

"+_isSafeUri:1:0": 1,

_NullTreeSanitizer: {"": "Object;",
  sanitizeTree$1: function(node) {
  },
  "+sanitizeTree:1:0": 1
},

"+_NullTreeSanitizer": [72],

updateCssClass_closure: {"": "Closure;",
  call$1: function(e) {
    return e != null && !J.$eq(e, "");
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+updateCssClass_closure": [],

updateCssClass_closure0: {"": "Closure;",
  call$1: function(e) {
    return e != null && !J.$eq(e, "");
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+updateCssClass_closure": [],

bindCssClasses_closure: {"": "Closure;elem_0-",
  call$1: function(e) {
    var t1, t2, t3, change, t4;
    t1 = e.get$changes();
    if (t1 != null)
      for (t1 = J.get$iterator$ax(t1), t2 = this.elem_0, t3 = J.getInterceptor$x(t2); t1.moveNext$0() === true;) {
        change = t1.get$current();
        t4 = J.getInterceptor$x(change);
        if (t4.get$oldValue(change) != null)
          J.remove$1$ax(t3.get$classes(t2), t4.get$oldValue(change));
        if (t4.get$newValue(change) != null)
          J.add$1$ax(t3.get$classes(t2), t4.get$newValue(change));
      }
    else {
      t1 = this.elem_0;
      t2 = J.getInterceptor$x(e);
      V.updateCssClass(t1, false, t2.get$oldValue(e));
      V.updateCssClass(t1, true, t2.get$newValue(e));
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+bindCssClasses_closure": [],

TemplateItem: {"": "Object;",
  create$0: function() {
  },
  "+create:0:0": 1
},

"+TemplateItem": [],

Listener: {"": "TemplateItem;eventStream-,_liblib8$_subscription-,listener-",
  insert$0: function(_) {
    this._liblib8$_subscription = this.eventStream.listen$1(this.listener);
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    this._liblib8$_subscription.cancel$0();
    this._liblib8$_subscription = null;
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_Listener(this, V.Listener.prototype.remove$0, _receiver, "remove$0");
  }
},

"+Listener": [],

Binding: {"": "TemplateItem;",
  exp$0: function() {
    return this.exp.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    if (this.isFinal)
      this.invokeCallback$0();
    else if (this.stopper != null)
      throw H.wrapException(new P.StateError("binding already attached"));
    else
      this.stopper = this.registerAndInvoke$0();
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_Binding(this, V.Binding.prototype.remove$0, _receiver, "remove$0");
  }
},

"+Binding": [],

GenericBinding: {"": "Binding;action-,exp-,isFinal-,debugLocation-,stopper-",
  action$1: function($receiver, arg0) {
    return this.action.call$1(arg0);
  },
  invokeCallback$0: function() {
    return this.action$1(this, new T.ChangeNotification(null, this.exp$0(), null));
  },
  "+invokeCallback:0:0": 1,
  registerAndInvoke$0: function() {
    return Y.watchAndInvoke(this.exp, this.action, "generic-binding", this.debugLocation);
  },
  "+registerAndInvoke:0:0": 1
},

"+GenericBinding": [],

ClassAttrBinding: {"": "Binding;elem-,exp-,isFinal-,debugLocation-,stopper-",
  invokeCallback$0: function() {
    return V.updateCssClass(this.elem, true, this.exp$0());
  },
  "+invokeCallback:0:0": 1,
  registerAndInvoke$0: function() {
    return V.bindCssClasses(this.elem, this.exp, this.debugLocation);
  },
  "+registerAndInvoke:0:0": 1
},

"+ClassAttrBinding": [],

ComponentItem: {"": "TemplateItem;component-",
  component$1: function(arg0) {
    return this.component.call$1(arg0);
  },
  create$0: function() {
    var t1 = this.component;
    t1.created_autogenerated$0();
    t1.composeChildren$0();
  },
  "+create:0:0": 1,
  insert$0: function(_) {
    var t1 = this.component;
    t1.inserted$0();
    t1.inserted_autogenerated$0();
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    this.component.removed_autogenerated$0();
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_ComponentItem(this, V.ComponentItem.prototype.remove$0, _receiver, "remove$0");
  }
},

"+ComponentItem": [],

Template: {"": "TemplateItem;node<-,children>-,nodes>-",
  listen$2: function(stream, listener) {
    this.children.push(new V.Listener(stream, null, new V.Template_listen_closure(listener)));
  },
  "+listen:2:0": 1,
  bind$3: function(_, exp, action, isFinal) {
    var t1;
    if ($.verboseDebugMessages) {
      $.get$readCurrentStackTrace();
      t1 = true;
    } else
      t1 = false;
    t1 = t1 ? $.get$readCurrentStackTrace().call$0() : null;
    this.children.push(new V.GenericBinding(action, exp, isFinal, t1, null));
  },
  "+bind:3:0": 1,
  contentBind$2: function(exp, isFinal) {
    var t1, t2;
    t1 = {};
    t1.bindNode_0 = document.createTextNode("");
    if ($.verboseDebugMessages) {
      $.get$readCurrentStackTrace();
      t2 = true;
    } else
      t2 = false;
    t2 = t2 ? $.get$readCurrentStackTrace().call$0() : null;
    this.children.push(new V.GenericBinding(new V.Template_contentBind_closure(t1, exp), new V.Template_contentBind_closure0(exp), isFinal, t2, null));
    return t1.bindNode_0;
  },
  "+contentBind:2:0": 1,
  bindClass$3: function(elem, exp, isFinal) {
    var t1;
    if ($.verboseDebugMessages) {
      $.get$readCurrentStackTrace();
      t1 = true;
    } else
      t1 = false;
    t1 = t1 ? $.get$readCurrentStackTrace().call$0() : null;
    this.children.push(new V.ClassAttrBinding(elem, exp, isFinal, t1, null));
  },
  "+bindClass:3:0": 1,
  conditional$3: function(template, exp, bodySetup) {
    this.children.push(new V.ConditionalTemplate(false, bodySetup, exp, null, template, [], []));
  },
  "+conditional:3:0": 1,
  loop$3: function(_, template, exp, iterSetup) {
    this.children.push(new V.LoopTemplate(iterSetup, exp, null, template, [], []));
  },
  "+loop:3:0": 1,
  component$1: function(component) {
    this.children.push(new V.ComponentItem(component));
  },
  "+component:1:0": 1,
  add$1: function(_, n) {
    return this.nodes.push(n);
  },
  "+add:1:0": 1,
  addAll$1: function(_, list) {
    return C.JSArray_methods.addAll$1(this.nodes, list);
  },
  "+addAll:1:0": 1,
  create$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].create$0();
    }
  },
  "+create:0:0": 1,
  insert$0: function(_) {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      J.insert$0$ax(t1[i]);
    }
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    var t1, i;
    for (t1 = this.children, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      J.remove$0$ax(t1[i]);
    }
    C.JSArray_methods.set$length(t1, 0);
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_Template(this, V.Template.prototype.remove$0, _receiver, "remove$0");
  }
},

"+Template": [],

Template_listen_closure: {"": "Closure;listener_0-",
  call$1: function(e) {
    this.listener_0.call$1(e);
    Y.dispatch();
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Template_listen_closure": [],

Template_contentBind_closure0: {"": "Closure;exp_1-",
  call$0: function() {
    return H.S(this.exp_1.call$0());
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Template_contentBind_closure": [],

Template_contentBind_closure: {"": "Closure;box_0-,exp_2-",
  call$1: function(e) {
    var t1 = this.box_0;
    t1.bindNode_0 = V.updateBinding(this.exp_2.call$0(), t1.bindNode_0, J.get$newValue$x(e));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Template_contentBind_closure": [],

PlaceholderTemplate: {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  "+create:0:0": 1,
  insert$0: function(_) {
    var t1, t2, t3, $parent, reference, len, i;
    V.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    if (t1.length > 0) {
      t2 = this.node;
      t3 = J.getInterceptor$x(t2);
      $parent = t3.get$parentNode(t2);
      reference = t3.get$nextNode(t2);
      for (len = t1.length, t2 = J.getInterceptor$x($parent), i = 0; i < len; ++i) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t2.insertBefore$2($parent, t1[i], reference);
      }
    }
    V.Template.prototype.insert$0.call(this, this);
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    var t1, i;
    V.Template.prototype.remove$0.call(this, this);
    for (t1 = this.nodes, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      J.remove$0$ax(t1[i]);
    }
    C.JSArray_methods.set$length(t1, 0);
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_PlaceholderTemplate(this, V.PlaceholderTemplate.prototype.remove$0, _receiver, "remove$0");
  }
},

"+PlaceholderTemplate": [],

ConditionalTemplate: {"": "PlaceholderTemplate;isVisible-,bodySetup-,exp-,stopper-,node-,children-,nodes-",
  bodySetup$1: function(arg0) {
    return this.bodySetup.call$1(arg0);
  },
  insert$0: function(_) {
    this.stopper = Y.watchAndInvoke(this.exp, new V.ConditionalTemplate_insert_closure(this), "conditional-binding", null);
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    V.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_ConditionalTemplate(this, V.ConditionalTemplate.prototype.remove$0, _receiver, "remove$0");
  }
},

"+ConditionalTemplate": [],

ConditionalTemplate_insert_closure: {"": "Closure;this_0-",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.isVisible;
    if (!t2 && J.get$newValue$x(e) === true) {
      t1.bodySetup$1(t1);
      V.PlaceholderTemplate.prototype.insert$0.call(t1, t1);
      t1.isVisible = true;
    } else if (t2 && J.get$newValue$x(e) !== true) {
      V.PlaceholderTemplate.prototype.remove$0.call(t1, t1);
      t1.isVisible = false;
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+ConditionalTemplate_insert_closure": [],

LoopTemplate: {"": "PlaceholderTemplate;iterSetup-,exp-,stopper-,node-,children-,nodes-",
  iterSetup$3: function(arg0, arg1, arg2) {
    return this.iterSetup.call$3(arg0, arg1, arg2);
  },
  insert$0: function(_) {
    this.stopper = Y.watchAndInvoke(this.exp, new V.LoopTemplate_insert_closure(this), "loop-binding", null);
  },
  "+insert:0:0": 1,
  remove$0: function(_) {
    V.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  },
  "+remove:0:0": 1,
  get$remove: function(_receiver) {
    return new V.Bound_remove_LoopTemplate(this, V.LoopTemplate.prototype.remove$0, _receiver, "remove$0");
  }
},

"+LoopTemplate": [],

LoopTemplate_insert_closure: {"": "Closure;this_0-",
  call$1: function(e) {
    var t1, list, t2, i, t3;
    t1 = this.this_0;
    V.PlaceholderTemplate.prototype.remove$0.call(t1, t1);
    list = J.get$newValue$x(e);
    t2 = J.getInterceptor$asx(list);
    i = 0;
    while (true) {
      t3 = t2.get$length(list);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (!(i < t3))
        break;
      t1.iterSetup$3(list, i, t1);
      ++i;
    }
    V.PlaceholderTemplate.prototype.insert$0.call(t1, t1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+LoopTemplate_insert_closure": []}],
["v8", "package:irhydra/src/modes/v8/v8.dart", , D, {
Mode0: {"": "BaseMode;codeLoaded-,hydrogenLoaded-,methods-,currentMethod-,ir-,_code-,ticks-,blockTicks-,profile-,_codeMode-",
  canRecognize$1: function(text) {
    var t1 = J.getInterceptor$asx(text);
    return t1.contains$1(text, "begin_cfg") === true && t1.contains$1(text, "begin_compilation") === true || t1.contains$1(text, "--- Optimized code ---") === true;
  },
  "+canRecognize:1:0": 1,
  parse$1: function(text) {
    var t1, t2;
    t1 = J.getInterceptor$asx(text);
    if (t1.contains$1(text, "begin_cfg") === true && t1.contains$1(text, "begin_compilation") === true) {
      if (this.hydrogenLoaded) {
        this.methods = null;
        this.hydrogenLoaded = false;
        this.codeLoaded = false;
      }
      this._merge$2(N.preparse(text), this.methods);
      this.hydrogenLoaded = true;
    } else if (t1.contains$1(text, "--- Optimized code ---") === true) {
      if (this.codeLoaded) {
        this.methods = null;
        this.hydrogenLoaded = false;
        this.codeLoaded = false;
      }
      t2 = this.methods;
      t1 = new U.PreParser([], null, J.toList$0$ax(t1.split$1(text, "\n")), 0, []);
      t1._states.push(new R._State(t1._convertPatterns$1(t1.get$patterns()), t1.lineno));
      t1.parse$0();
      this._merge$2(t2, t1.methods);
      this.codeLoaded = true;
    }
    return this.methods;
  },
  "+parse:1:0": 1,
  displayPhase$2: function(method, phase) {
    var t1;
    this.currentMethod = method;
    t1 = phase.get$ir().call$0();
    t1 = new N.CfgParser(new K.CfgBuilder(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), []), null, J.toList$0$ax(J.split$1$s(t1, "\n")), 0, []);
    t1._states.push(new R._State(t1._convertPatterns$1(t1.get$patterns()), t1.lineno));
    t1.parse$0();
    this.ir = t1.builder.get$blocks();
    t1 = U.parse(J.get$code$x(phase));
    this._codeMode = "no asm";
    this._code = t1;
    this.updateIRView$0();
    this._displayGraph$0();
  },
  "+displayPhase:2:0": 1,
  updateIRView$0: function() {
    J.clear$0$ax(J.get$xtag$x(document.querySelector("#ir-pane")));
    Q.displayIR(J.get$xtag$x(document.querySelector("#ir-pane")), this.currentMethod, this.ir, this._code, this._codeMode);
  },
  "+updateIRView:0:0": 1,
  _displayGraph$0: function() {
    var attachRef = R.makeAttachableReferencer(J.get$xtag$x(document.querySelector("#ir-pane")).get$rangeContentAsHtmlFull(), C.C__Popover);
    D.display0(document.querySelector("#graph-pane"), this.ir, attachRef, null);
  },
  "+_displayGraph:0:0": 1,
  _merge$2: function(ir, code) {
    var i, j, currentIr, t1;
    if (ir == null) {
      this.methods = code;
      return;
    } else if (code == null) {
      this.methods = ir;
      return;
    }
    for (i = 0, j = 0; j < code.length; ++j) {
      currentIr = i;
      while (true) {
        if (currentIr < ir.length) {
          if (j >= code.length)
            throw H.ioore(code, j);
          t1 = J.get$name$x(code[j]).get$full();
          if (currentIr < 0 || currentIr >= ir.length)
            throw H.ioore(ir, currentIr);
          t1 = !J.$eq(t1, J.get$name$x(ir[currentIr]).get$full());
        } else
          t1 = false;
        if (!t1)
          break;
        ++currentIr;
      }
      t1 = ir.length;
      if (currentIr < t1) {
        if (currentIr < 0)
          throw H.ioore(ir, currentIr);
        t1 = J.get$last$ax(ir[currentIr].get$phases());
        if (j >= code.length)
          throw H.ioore(code, j);
        J.set$code$x(t1, J.get$code$x(J.get$last$ax(code[j].get$phases())));
        if (currentIr >= ir.length)
          throw H.ioore(ir, currentIr);
        t1 = ir[currentIr].get$deopts();
        if (j >= code.length)
          throw H.ioore(code, j);
        J.addAll$1$ax(t1, code[j].get$deopts());
        i = currentIr + 1;
      } else {
        if (j >= code.length)
          throw H.ioore(code, j);
        H.Primitives_printString("Ignoring code artifact for '" + H.S(J.get$name$x(code[j]).get$full()) + "'. It doesn't have IR graph.");
      }
    }
    this.methods = ir;
  },
  "+_merge:2:0": 1
},

"+Mode": []}],
["view", "package:irhydra/src/modes/dartvm/view.dart", , Q, {
_Renderer: {"": "Object;pane-,codeMode<-,blocks<-,code>-,ticks<-,blockTicks-,makeDefinitionRef-,makeBlockRef-,formatOperands-,opcodeRe-",
  makeBlockRef$1: function(arg0) {
    return this.makeBlockRef.call$1(arg0);
  },
  formatOperands$1: function(arg0) {
    return this.formatOperands.call$1(arg0);
  },
  display$0: function(_) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.pane;
    t2 = this.code;
    t3 = t2.get$prologue();
    t4 = this.codeMode;
    t5 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
    t6 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
    new Z.CodeSplicer(t1, t4, t2, J.toList$0$ax(t3), 0, new H.JSSyntaxRegExp(t5, null, null), new H.JSSyntaxRegExp(t6, null, null)).emitRest$0();
    for (t3 = this.blocks, t3 = t3.get$values(t3), t5 = t3._iterable, t5 = t5.get$iterator(t5), t5 = new H.MappedIterator(null, t5, t3._f), H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t3, "MappedIterable", 0), H.getRuntimeTypeArgument(t3, "MappedIterable", 1)]); t5.moveNext$0();)
      this.displayBlock$1(t5._liblib$_current);
    J.add$2$ax(t1, " ", " ");
    t3 = t2.get$epilogue();
    t5 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
    t6 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
    new Z.CodeSplicer(t1, t4, t2, J.toList$0$ax(t3), 0, new H.JSSyntaxRegExp(t5, null, null), new H.JSSyntaxRegExp(t6, null, null)).emitRest$0();
  },
  "+display:0:0": 1,
  displayBlock$1: function(block) {
    var t1, t2, blockCode, t3, t4, t5, codeSplicer, blockComment, t6, instr, m, marker, t7, t8, t9, t10, t11;
    t1 = this.code;
    t2 = J.getInterceptor$x(block);
    blockCode = t1.codeOf$1(t2.get$name(block));
    t3 = this.pane;
    t4 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
    t5 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
    codeSplicer = new Z.CodeSplicer(t3, this.codeMode, t1, J.toList$0$ax(blockCode), 0, new H.JSSyntaxRegExp(t4, null, null), new H.JSSyntaxRegExp(t5, null, null));
    t5 = J.getInterceptor$ax(t3);
    t5.add$2(t3, " ", " ");
    t1 = this.blockTicks;
    if (t1 != null) {
      t4 = t1.$index(t1, t2.get$name(block));
      if (typeof t4 !== "number")
        return this.displayBlock$1$bailout(1, t5, t3, codeSplicer, t2, block, t1, t4);
      t4 = t4 > 0;
    } else
      t4 = false;
    if (t4) {
      blockComment = W.Element_Element$html("<em>(" + H.S(J.toStringAsFixed$1$n(t1.$index(t1, t2.get$name(block)), 2)) + "% ticks)</em>", null, null);
      if (typeof blockComment !== "string")
        return this.displayBlock$1$bailout(2, t5, t3, codeSplicer, t2, block, 0, 0, blockComment);
    } else
      blockComment = "";
    t1 = t2.get$name(block);
    t4 = document.createElement("span", null);
    t6 = J.getInterceptor$x(t4);
    J.add$1$ax(t6.get$classes(t4), "boldy");
    t6.appendText$1(t4, t1);
    t5.add$3$id(t3, t4, blockComment, t2.get$name(block));
    for (t1 = J.get$iterator$ax(block.get$hir()), t4 = this.opcodeRe; t1.moveNext$0() === true;) {
      instr = t1.get$current();
      m = t4.firstMatch$1(instr.get$raw());
      if (m != null) {
        t6 = m._match;
        if (1 >= t6.length)
          throw H.ioore(t6, 1);
        marker = t6[1];
      } else
        marker = null;
      if (marker != null)
        codeSplicer.emitUntil$1(marker);
      t6 = J.getInterceptor$x(instr);
      if (typeof instr === "object" && instr !== null && !!t6.$isBranch)
        this.displayBranch$1(instr);
      else {
        if (t6.get$id(instr) == null)
          t6 = " ";
        else {
          t6 = t6.get$id(instr);
          if (typeof t6 !== "string")
            return this.displayBlock$1$bailout(3, t5, t3, codeSplicer, t2, block, t1, t4, 0, instr, t6);
        }
        t7 = instr.get$op();
        t8 = instr.get$args();
        t9 = document.createElement("span", null);
        t10 = document.createElement("span", null);
        t11 = J.getInterceptor$x(t10);
        J.add$1$ax(t11.get$classes(t10), "boldy");
        t11.appendText$1(t10, t7);
        t7 = J.getInterceptor$x(t9);
        t7.append$1(t9, t10);
        t7.appendText$1(t9, " ");
        t7.append$1(t9, this.formatOperands$1(t8));
        t5.add$2(t3, t6, t9);
      }
    }
    t1 = J.get$length$asx(block.get$successors());
    if (typeof t1 !== "number")
      return this.displayBlock$1$bailout(4, t5, t3, codeSplicer, t2, block, t1);
    if (t1 === 1) {
      codeSplicer.emitUntil$1("goto:");
      t1 = H.S(J.get$name$x(J.get$first$ax(block.get$successors())));
      t4 = document.createElement("span", null);
      t6 = document.createElement("span", null);
      t7 = J.getInterceptor$x(t6);
      J.add$1$ax(t7.get$classes(t6), "boldy");
      t7.appendText$1(t6, "goto");
      t7 = J.getInterceptor$x(t4);
      t7.append$1(t4, t6);
      t7.appendText$1(t4, " ");
      t7.append$1(t4, this.formatOperands$1(t1));
      t5.add$2(t3, " ", t4);
    }
    codeSplicer.emitRest$0();
    t5.createRange$1(t3, t2.get$name(block));
  },
  "+displayBlock:1:0": 1,
  displayBlock$1$bailout: function(state0, t5, t3, codeSplicer, t2, block, t1, t4, blockComment, instr, t6) {
    switch (state0) {
      case 0:
        t1 = this.code;
        t2 = J.getInterceptor$x(block);
        blockCode = t1.codeOf$1(t2.get$name(block));
        t3 = this.pane;
        t4 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
        t5 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
        codeSplicer = new Z.CodeSplicer(t3, this.codeMode, t1, J.toList$0$ax(blockCode), 0, new H.JSSyntaxRegExp(t4, null, null), new H.JSSyntaxRegExp(t5, null, null));
        t5 = J.getInterceptor$ax(t3);
        t5.add$2(t3, " ", " ");
        t1 = this.blockTicks;
      case 1:
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t4 = t1.$index(t1, t2.get$name(block));
            case 1:
              state0 = 0;
              t4 = J.$gt$n(t4, 0) === true;
          }
        else
          t4 = false;
      case 2:
        if (state0 === 2 || state0 === 0 && t4)
          switch (state0) {
            case 0:
              blockComment = W.Element_Element$html("<em>(" + H.S(J.toStringAsFixed$1$n(t1.$index(t1, t2.get$name(block)), 2)) + "% ticks)</em>", null, null);
            case 2:
              state0 = 0;
          }
        else
          blockComment = "";
        t1 = t2.get$name(block);
        t4 = document.createElement("span", null);
        t6 = J.getInterceptor$x(t4);
        J.add$1$ax(t6.get$classes(t4), "boldy");
        t6.appendText$1(t4, t1);
        t5.add$3$id(t3, t4, blockComment, t2.get$name(block));
        t1 = J.get$iterator$ax(block.get$hir());
        t4 = this.opcodeRe;
      case 3:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
                instr = t1.get$current();
                m = t4.firstMatch$1(instr.get$raw());
                if (m != null) {
                  t6 = m._match;
                  if (1 >= t6.length)
                    throw H.ioore(t6, 1);
                  marker = t6[1];
                } else
                  marker = null;
                if (marker != null)
                  codeSplicer.emitUntil$1(marker);
                t6 = J.getInterceptor$x(instr);
              case 3:
                if (state0 === 0 && typeof instr === "object" && instr !== null && !!t6.$isBranch)
                  this.displayBranch$1(instr);
                else
                  switch (state0) {
                    case 0:
                    case 3:
                      if (state0 === 0 && t6.get$id(instr) == null)
                        t6 = " ";
                      else
                        switch (state0) {
                          case 0:
                            t6 = t6.get$id(instr);
                          case 3:
                            state0 = 0;
                        }
                      t7 = instr.get$op();
                      t8 = instr.get$args();
                      t9 = document.createElement("span", null);
                      t10 = document.createElement("span", null);
                      t11 = J.getInterceptor$x(t10);
                      J.add$1$ax(t11.get$classes(t10), "boldy");
                      t11.appendText$1(t10, t7);
                      t7 = J.getInterceptor$x(t9);
                      t7.append$1(t9, t10);
                      t7.appendText$1(t9, " ");
                      t7.append$1(t9, this.formatOperands$1(t8));
                      t5.add$2(t3, t6, t9);
                  }
            }
        t1 = J.get$length$asx(block.get$successors());
      case 4:
        var blockCode, m, marker, t7, t8, t9, t10, t11;
        state0 = 0;
        if (J.$eq(t1, 1)) {
          codeSplicer.emitUntil$1("goto:");
          t1 = H.S(J.get$name$x(J.get$first$ax(block.get$successors())));
          t4 = document.createElement("span", null);
          t6 = document.createElement("span", null);
          t7 = J.getInterceptor$x(t6);
          J.add$1$ax(t7.get$classes(t6), "boldy");
          t7.appendText$1(t6, "goto");
          t7 = J.getInterceptor$x(t4);
          t7.append$1(t4, t6);
          t7.appendText$1(t4, " ");
          t7.append$1(t4, this.formatOperands$1(t1));
          t5.add$2(t3, " ", t4);
        }
        codeSplicer.emitRest$0();
        t5.createRange$1(t3, t2.get$name(block));
    }
  },
  displayBranch$1: function(instr) {
    var t1, t2, t3, t4, t5;
    t1 = document.createElement("span", null);
    t2 = document.createElement("span", null);
    t3 = J.getInterceptor$x(t2);
    J.add$1$ax(t3.get$classes(t2), "boldy");
    t3.appendText$1(t2, "if ");
    t3 = J.getInterceptor$x(t1);
    t3.append$1(t1, t2);
    t2 = document.createElement("span", null);
    t4 = document.createElement("span", null);
    t5 = J.getInterceptor$x(t4);
    J.add$1$ax(t5.get$classes(t4), "boldy");
    t5.appendText$1(t4, instr.op);
    t5 = J.getInterceptor$x(t2);
    t5.append$1(t2, t4);
    t5.appendText$1(t2, " ");
    t5.append$1(t2, this.formatOperands$1(instr.args));
    t3.append$1(t1, t2);
    t2 = document.createElement("span", null);
    t5 = J.getInterceptor$x(t2);
    J.add$1$ax(t5.get$classes(t2), "boldy");
    t5.appendText$1(t2, " goto ");
    t3.append$1(t1, t2);
    t3.appendText$1(t1, "(");
    t3.append$1(t1, this.makeBlockRef$1(instr.true_successor));
    t3.appendText$1(t1, ", ");
    t3.append$1(t1, this.makeBlockRef$1(instr.false_successor));
    t3.appendText$1(t1, ")");
    J.add$2$ax(this.pane, " ", t1);
  },
  "+displayBranch:1:0": 1,
  _Renderer$6: function(pane, codeMode, blocks, code, ticks, blockTicks) {
    this.formatOperands = N.makeFormatter(H.fillLiteralMap(["v\\d+\\b", this.makeDefinitionRef, "B\\d+\\b", this.makeBlockRef], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  },
  static: {
_Renderer$: function(pane, codeMode, blocks, code, ticks, blockTicks) {
  var t1, t2;
  t1 = H.JSSyntaxRegExp_makeNative("([\\w]+:-?\\d+?)", false, true, false);
  t2 = J.getInterceptor$x(pane);
  t1 = new Q._Renderer(pane, codeMode, blocks, code, ticks, blockTicks, R.makeReferencer(pane.get$rangeContentAsHtml(), t2.get$href(pane), C.C__Tooltip), R.makeReferencer(pane.get$rangeContentAsHtmlFull(), t2.get$href(pane), C.C__Popover), null, new H.JSSyntaxRegExp(t1, null, null));
  t1._Renderer$6(pane, codeMode, blocks, code, ticks, blockTicks);
  return t1;
},

"+new _Renderer:6:0": 1}

},

"+_Renderer": []}],
["view", "package:irhydra/src/modes/v8/view.dart", , Q, {
displayIR: function(pane, method, ir, code, codeMode) {
  var t1, t2, makeBlockRef, formatHir, formatLir, t3, t4, t5, block, t6, t7, codeSplicer;
  t1 = new Q.displayIR_add(pane, new Q.displayIR_formatOpcode(J.get$xtag$x(document.querySelector("#v8-ir-descriptions"))));
  t2 = J.getInterceptor$x(pane);
  makeBlockRef = R.makeReferencer(pane.get$rangeContentAsHtmlFull(), t2.get$href(pane), C.C__Popover);
  formatHir = N.makeFormatter(H.fillLiteralMap(["0x[a-f0-9]+", new Q.displayIR_closure(), "B\\d+\\b", makeBlockRef, "[A-Za-z]\\d+\\b", R.makeReferencer(pane.get$rangeContentAsHtml(), t2.get$href(pane), C.C__Tooltip), "range:[-\\d_m]+", new Q.displayIR_closure0(new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^range:(-?\\d+)_(-?\\d+)(_m0)?$", false, true, false), null, null)), "changes\\[[^\\]]+\\]", new Q.displayIR_closure1(), "type:\\w+", new Q.displayIR_closure2()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  formatLir = N.makeFormatter(H.fillLiteralMap(["\\[id=.+\\]\\]", new Q.displayIR_closure3(), "{[^}]+}", new Q.displayIR_closure4(), "B\\d+\\b", makeBlockRef], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  t3 = code.get$prologue();
  t4 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
  t5 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
  new Z.CodeSplicer(pane, codeMode, code, J.toList$0$ax(t3), 0, new H.JSSyntaxRegExp(t4, null, null), new H.JSSyntaxRegExp(t5, null, null)).emitRest$0();
  for (t3 = ir.get$values(ir), t4 = t3._iterable, t4 = t4.get$iterator(t4), t4 = new H.MappedIterator(null, t4, t3._f), H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "MappedIterable", 0), H.getRuntimeTypeArgument(t3, "MappedIterable", 1)]); t4.moveNext$0();) {
    block = t4._liblib$_current;
    t2.add$2(pane, " ", " ");
    t3 = J.getInterceptor$x(block);
    t5 = t3.get$name(block);
    t6 = document.createElement("span", null);
    t7 = J.getInterceptor$x(t6);
    J.add$1$ax(t7.get$classes(t6), "boldy");
    t7.appendText$1(t6, t5);
    t2.add$3$id(pane, t6, " ", t3.get$name(block));
    Q.decomposeHIR(block.get$hir(), new Q.displayIR_closure5(t1, formatHir));
    t6 = code.codeOf$1(t3.get$name(block));
    t5 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
    t7 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
    codeSplicer = new Z.CodeSplicer(pane, codeMode, code, J.toList$0$ax(t6), 0, new H.JSSyntaxRegExp(t5, null, null), new H.JSSyntaxRegExp(t7, null, null));
    Q.decomposeLIR(block.get$lir(), new Q.displayIR_closure6(t1, formatLir, codeSplicer));
    codeSplicer.emitRest$0();
    t2.createRange$1(pane, t3.get$name(block));
  }
  t2.add$2(pane, " ", " ");
  t1 = code.get$epilogue();
  t2 = H.JSSyntaxRegExp_makeNative("^(REX.W\\s+)?([\\w()]+)(.*)$", false, true, false);
  t3 = H.JSSyntaxRegExp_makeNative("^;; object: (0x[a-f0-9]+) (.*)$", false, true, false);
  new Z.CodeSplicer(pane, codeMode, code, J.toList$0$ax(t1), 0, new H.JSSyntaxRegExp(t2, null, null), new H.JSSyntaxRegExp(t3, null, null)).emitRest$0();
  J.clear$0$ax(J.get$nodes$x(document.querySelector(".ir-quick-links")));
  if (J.get$isEmpty$asx(method.get$deopts()) !== true)
    new Q.DeoptAnnotator(pane, method, ir, code, false, null, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^deoptimization bailout (\\d+)", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\s+(\\d+)\\s+.*deopt_id=(\\d+)", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("@(\\d+)", false, true, false), null, null)).annotateDeopts$0();
},

"+displayIR:5:0": 1,

decomposeHIR: function(hir, cb) {
  J.forEach$1$ax(hir, new Q.decomposeHIR_closure(cb));
},

"+decomposeHIR:2:0": 1,

decomposeLIR: function(lir, cb) {
  J.forEach$1$ax(lir, new Q.decomposeLIR_closure(cb));
},

"+decomposeLIR:2:0": 1,

displayIR_formatOpcode: {"": "Closure;descriptions_0-",
  call$2: function(ns, opcode) {
    var element, t1, desc;
    element = document.createElement("span", null);
    t1 = J.getInterceptor$x(element);
    J.add$1$ax(t1.get$classes(element), "boldy");
    t1.appendText$1(element, opcode);
    desc = this.descriptions_0.lookup$2(ns, opcode);
    if (desc != null)
      Q.scoped(new Q.displayIR_formatOpcode_closure(opcode, element, desc));
    return element;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+displayIR_formatOpcode": [],

displayIR_formatOpcode_closure: {"": "Closure;opcode_1-,element_2-,desc_3-",
  call$0: function() {
    var t1, t2;
    Q._enterScopeIfNeeded();
    t1 = Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.element_2);
    t2 = H.fillLiteralMap(["title", this.opcode_1, "content", this.desc_3, "trigger", "hover", "placement", "bottom", "html", true, "container", "body"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    Q._enterScopeIfNeeded();
    t1.popover$1(Q._deserialize($._jsPortConvert.callSync$1(Q.Proxy__serializeDataTree(t2))));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+displayIR_formatOpcode_closure": [],

displayIR_add: {"": "Closure;pane_4-,formatOpcode_5-",
  call$5: function(ns, id, opcode, operands, formatter) {
    var t1, t2;
    t1 = document.createElement("span", null);
    t2 = J.getInterceptor$x(t1);
    t2.append$1(t1, this.formatOpcode_5.call$2(ns, opcode));
    t2.appendText$1(t1, " ");
    t2.append$1(t1, formatter.call$1(operands));
    return J.add$2$ax(this.pane_4, id, t1);
  },
  "+call:5:0": 1,
  $isFunction: true
},

"+displayIR_add": [],

displayIR_closure: {"": "Closure;",
  call$1: function(val) {
    var t1, t2;
    t1 = document.createElement("span", null);
    t2 = J.getInterceptor$x(t1);
    J.add$1$ax(t2.get$classes(t1), "hir-constant");
    t2.appendText$1(t1, val);
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure0: {"": "Closure;RANGE_6-",
  call$1: function(val) {
    var t1, t2, range, t3;
    t1 = this.RANGE_6.firstMatch$1(val)._match;
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t2 = "[" + H.S(t1[1]) + ", ";
    if (2 >= t1.length)
      throw H.ioore(t1, 2);
    t2 = t2 + H.S(t1[2]) + "]";
    range = document.createElement("span", null);
    t3 = J.getInterceptor$x(range);
    J.add$1$ax(t3.get$classes(range), "hir-range");
    t3.appendText$1(range, t2);
    if (3 >= t1.length)
      throw H.ioore(t1, 3);
    if (t1[3] != null)
      t3.appendHtml$1(range, "&cup;{-0}");
    return range;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure1: {"": "Closure;",
  call$1: function(val) {
    var t1, t2, t3;
    t1 = J.$eq(val, "changes[*]") ? "hir-changes-all" : "hir-changes";
    t2 = document.createElement("span", null);
    t3 = J.getInterceptor$x(t2);
    J.add$1$ax(t3.get$classes(t2), t1);
    t3.appendText$1(t2, val);
    return t2;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure2: {"": "Closure;",
  call$1: function(val) {
    var t1, t2, t3;
    t1 = J.get$last$ax(J.split$1$s(val, ":"));
    t2 = document.createElement("span", null);
    t3 = J.getInterceptor$x(t2);
    J.add$1$ax(t3.get$classes(t2), "hir-type");
    t3.appendText$1(t2, t1);
    return t2;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure3: {"": "Closure;",
  call$1: function(val) {
    var t1, t2;
    t1 = document.createElement("span", null);
    t2 = J.getInterceptor$x(t1);
    J.add$1$ax(t2.get$classes(t1), "lir-env");
    t2.appendText$1(t1, val);
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure4: {"": "Closure;",
  call$1: function(val) {
    var t1, t2;
    t1 = document.createElement("span", null);
    t2 = J.getInterceptor$x(t1);
    J.add$1$ax(t2.get$classes(t1), "lir-map");
    t2.appendText$1(t1, val);
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure5: {"": "Closure;add_7-,formatHir_8-",
  call$3: function(id, opcode, operands) {
    this.add_7.call$5("hir", id, opcode, operands, this.formatHir_8);
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR_closure6: {"": "Closure;add_9-,formatLir_10-,codeSplicer_11-",
  call$3: function(id, opcode, operands) {
    var lirId, t1, ln;
    lirId = J.$tdiv$n(H.Primitives_parseInt(id, null, null), 2);
    t1 = this.codeSplicer_11;
    t1.emitUntil$1("@" + H.S(lirId));
    ln = this.add_9.call$5("lir", id, opcode, operands, this.formatLir_10);
    J.add$1$ax(J.get$classes$x(ln.get$gutter()), "lir-gutter");
    J.add$1$ax(J.get$classes$x(J.get$text$x(ln)), "lir-line");
    if (t1.isAfterMarker$1("@" + H.S(lirId)))
      t1.emitWhile$1(new Q.displayIR__closure());
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+displayIR_closure": [],

displayIR__closure: {"": "Closure;",
  call$1: function(comment) {
    var t1 = $.get$lirIdMarker()._nativeRegExp;
    if (typeof comment !== "string")
      H.throwExpression(new P.ArgumentError(comment));
    return !t1.test(comment);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+displayIR__closure": [],

decomposeHIR_closure: {"": "Closure;cb_0-",
  call$1: function(line) {
    var m, t1, t2, t3, t4;
    m = $.get$hirLineRe().firstMatch$1(line);
    if (m != null) {
      t1 = m._match;
      t2 = t1.length;
      if (1 >= t2)
        throw H.ioore(t1, 1);
      t3 = t1[1];
      if (2 >= t2)
        throw H.ioore(t1, 2);
      t4 = t1[2];
      if (3 >= t2)
        throw H.ioore(t1, 3);
      this.cb_0.call$3(t3, t4, t1[3]);
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+decomposeHIR_closure": [],

decomposeLIR_closure: {"": "Closure;cb_0-",
  call$1: function(line) {
    var m, t1, t2, opcode, operands, cleaned;
    m = $.get$lirLineRe().firstMatch$1(line);
    if (m != null) {
      t1 = m._match;
      t2 = t1.length;
      if (2 >= t2)
        throw H.ioore(t1, 2);
      opcode = t1[2];
      if (3 >= t2)
        throw H.ioore(t1, 3);
      operands = t1[3];
      t2 = J.getInterceptor(opcode);
      if (t2.$eq(opcode, "label") || t2.$eq(opcode, "gap")) {
        cleaned = J.replaceAll$2$s(J.replaceAllMapped$2$s(J.replaceAll$2$s(J.replaceAll$2$s(operands, $.get$lirLineIgnoredMovesRe(), ""), "()", ""), $.get$lirLineRedundantMovesRe(), new Q.decomposeLIR__closure()), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\s+", false, true, false), null, null), " ");
        if (J.contains$1$asx(cleaned, "=") === true) {
          if (1 >= t1.length)
            throw H.ioore(t1, 1);
          this.cb_0.call$3(t1[1], opcode, cleaned);
        }
      } else {
        if (1 >= t1.length)
          throw H.ioore(t1, 1);
        this.cb_0.call$3(t1[1], opcode, operands);
      }
    }
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+decomposeLIR_closure": [],

decomposeLIR__closure: {"": "Closure;",
  call$1: function(m) {
    return m.group$1(1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+decomposeLIR__closure": [],

DeoptAnnotator: {"": "Object;pane-,method>-,ir<-,code>-,_bailoutsMappingComputed-,_bailoutsMapping-,bailoutRe-,deoptIdRe-,commentLirReferenceRe-",
  annotateDeopts$0: function() {
    J.set$display$x(J.get$style$x(document.querySelector("#unmatched-deopt-warning")), "none");
    for (var t1 = J.get$iterator$ax(this.method.get$deopts()); t1.moveNext$0() === true;)
      this.annotateDeopt$1(t1.get$current());
  },
  "+annotateDeopts:0:0": 1,
  annotateDeopt$1: function(deopt) {
    var t1;
    if (!this._bailoutsMappingComputed) {
      this._bailoutsMapping = this.computeBailoutsMapping$0();
      this._bailoutsMappingComputed = true;
    }
    if (this._bailoutsMapping == null) {
      J.set$display$x(J.get$style$x(document.querySelector("#unmatched-deopt-warning")), "block");
      return;
    }
    if (!this._bailoutsMappingComputed) {
      this._bailoutsMapping = this.computeBailoutsMapping$0();
      this._bailoutsMappingComputed = true;
    }
    t1 = this._bailoutsMapping;
    this.createMarkerAt$2(t1.$index(t1, J.get$id$x(deopt)), deopt);
  },
  "+annotateDeopt:1:0": 1,
  createMarkerAt$2: function(lirId, deopt) {
    var labelType, marker, t1, link;
    labelType = deopt.get$isLazy() === true ? "label-warning" : "label-important";
    marker = document.createElement("span", null);
    t1 = J.getInterceptor$x(marker);
    J.addAll$1$ax(t1.get$classes(marker), ["label", labelType, "deopt-marker"]);
    t1.set$text(marker, "deopt");
    Q.scoped(new Q.DeoptAnnotator_createMarkerAt_closure(deopt, marker));
    t1 = this.pane;
    J.append$1$x(J.get$text$x(t1.line$1(lirId)), marker);
    link = W.AnchorElement_AnchorElement("#" + H.S(J.href$1$x(t1, lirId)));
    t1 = J.getInterceptor$x(link);
    J.addAll$1$ax(t1.get$classes(link), ["label", labelType]);
    t1.set$text(link, "deopt @" + H.S(lirId));
    J.add$1$ax(J.get$nodes$x(document.querySelector(".ir-quick-links")), link);
  },
  "+createMarkerAt:2:0": 1,
  computeBailoutsMapping$0: function() {
    var mapping, t1, t2, t3, t4;
    if (!this._irContainsDeoptMapping$0())
      return;
    mapping = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, J.JSString);
    t1 = new Q.DeoptAnnotator_computeBailoutsMapping_recordMapping(mapping);
    for (t2 = this.ir, t2 = t2.get$values(t2), t3 = t2._iterable, t3 = t3.get$iterator(t3), t3 = new H.MappedIterator(null, t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "MappedIterable", 0), H.getRuntimeTypeArgument(t2, "MappedIterable", 1)]), t2 = this.deoptIdRe; t3.moveNext$0();) {
      t4 = t3._liblib$_current.get$lir();
      if (t4 != null)
        for (t4 = J.get$iterator$ax(t4); t4.moveNext$0() === true;)
          R.match(t4.get$current(), t2, t1);
    }
    return mapping;
  },
  "+computeBailoutsMapping:0:0": 1,
  _irContainsDeoptMapping$0: function() {
    var t1, t2, t3, line, t4;
    for (t1 = this.ir, t1 = t1.get$values(t1), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]), t1 = this.deoptIdRe._nativeRegExp; t2.moveNext$0();) {
      t3 = t2._liblib$_current.get$lir();
      if (t3 != null)
        for (t3 = J.get$iterator$ax(t3); t3.moveNext$0() === true;) {
          line = t3.get$current();
          if (J.contains$1$asx(line, "[id=") === true) {
            if (typeof line !== "string")
              H.throwExpression(new P.ArgumentError(line));
            t4 = t1.test(line);
          } else
            t4 = false;
          if (t4)
            return true;
        }
    }
    return false;
  },
  "+_irContainsDeoptMapping:0:0": 1,
  static: {
"": "DeoptAnnotator_LIR_ENVIROMENT_MARKER-,DeoptAnnotator_addressRe-",
}

},

"+DeoptAnnotator": [],

DeoptAnnotator_createMarkerAt_closure: {"": "Closure;deopt_0-,marker_1-",
  call$0: function() {
    var divElement, raw, t1, t2;
    divElement = document.createElement("pre", null);
    J.appendText$1$x(divElement, J.join$1$ax(this.deopt_0.get$raw(), "\n"));
    raw = E.toHtml(divElement);
    Q._enterScopeIfNeeded();
    t1 = Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.marker_1);
    t2 = H.fillLiteralMap(["title", "", "content", H.S(raw), "placement", "bottom", "html", true, "container", "body"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    Q._enterScopeIfNeeded();
    J.data$1$x(t1.popover$1(Q._deserialize($._jsPortConvert.callSync$1(Q.Proxy__serializeDataTree(t2)))), "popover").tip$0().addClass$1("deopt");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+DeoptAnnotator_createMarkerAt_closure": [],

DeoptAnnotator_computeBailoutsMapping_recordMapping: {"": "Closure;mapping_0-",
  call$2: function(lirId, deoptId) {
    var t1 = this.mapping_0;
    t1.$indexSet(t1, H.Primitives_parseInt(deoptId, null, null), lirId);
    return lirId;
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+DeoptAnnotator_computeBailoutsMapping_recordMapping": []}],
["watcher", "package:web_ui/watcher.dart", , Y, {
watch: function(target, callback, debugName, $location) {
  var exp, watcherType, val, e, trace, t1, t2, exception, watcher, node;
  if ($.useObservers)
    return T.observe(target, callback, null);
  if ($._watchers == null) {
    t1 = new L.LinkedList(null, null, 0);
    H.setRuntimeTypeInfo(t1, [Y._Watcher]);
    $._watchers = t1;
  }
  debugName = debugName == null ? "<unnamed>" : debugName;
  exp = null;
  watcherType = C._WatcherType_OTHER;
  t1 = target;
  t2 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t2.$isFunction) {
    exp = target;
    try {
      val = target.call$0();
      t1 = val;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isList))
        watcherType = C._WatcherType_LIST;
      else {
        t1 = val;
        t2 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isIterable)) {
          watcherType = C._WatcherType_LIST;
          exp = new Y.watch_closure(target);
        } else {
          t1 = val;
          t2 = J.getInterceptor(t1);
          if (typeof t1 !== "object" || t1 === null || !t2.$isLinkedHashMap) {
            t1 = val;
            t2 = J.getInterceptor(t1);
            t2 = typeof t1 === "object" && t1 !== null && !!t2.$isSplayTreeMap;
            t1 = t2;
          } else
            t1 = true;
          if (t1)
            watcherType = C._WatcherType_ORDERED_MAP;
          else {
            t1 = val;
            t2 = J.getInterceptor(t1);
            if (typeof t1 === "object" && t1 !== null && !!t2.$isMap)
              watcherType = C._WatcherType_HASH_MAP;
          }
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      $.get$_logger().warning$1("evaluating " + H.S(debugName) + " watcher threw error (" + H.S(e) + ", " + H.S(trace) + ")");
    }

  } else {
    t1 = target;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isList)) {
      exp = new Y.watch_closure0(target);
      watcherType = C._WatcherType_LIST;
    } else {
      t1 = target;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isIterable)) {
        exp = new Y.watch_closure1(target);
        watcherType = C._WatcherType_LIST;
      } else {
        t1 = target;
        t2 = J.getInterceptor(t1);
        if (typeof t1 !== "object" || t1 === null || !t2.$isLinkedHashMap) {
          t1 = target;
          t2 = J.getInterceptor(t1);
          t2 = typeof t1 === "object" && t1 !== null && !!t2.$isSplayTreeMap;
          t1 = t2;
        } else
          t1 = true;
        if (t1) {
          exp = new Y.watch_closure2(target);
          watcherType = C._WatcherType_ORDERED_MAP;
        } else {
          t1 = target;
          t2 = J.getInterceptor(t1);
          if (typeof t1 === "object" && t1 !== null && !!t2.$isMap) {
            exp = new Y.watch_closure3(target);
            watcherType = C._WatcherType_HASH_MAP;
          }
        }
      }
    }
  }
  if ($.verboseDebugMessages)
    if ($location == null) {
      $.get$readCurrentStackTrace();
      t1 = true;
    } else
      t1 = false;
  else
    t1 = false;
  if (t1)
    $location = $.get$readCurrentStackTrace().call$0();
  watcher = Y._createWatcher(watcherType, exp, callback, debugName, $location);
  t1 = $._watchers;
  node = t1.add$1(t1, watcher);
  return node.get$remove(node);
},

"+watch:4:0": 1,

"*watch": [0, 0],

_createWatcher: function(type, exp, callback, debugName, $location) {
  var t1, t2, t3;
  t1 = $._Watcher__nextId;
  switch (type) {
    case C._WatcherType_LIST:
      $._Watcher__nextId = t1 + 1;
      t1 = new Y._ListWatcher(debugName, $location, t1, exp, callback, null);
      H.setRuntimeTypeInfo(t1, [null]);
      t1._lastValue = t1._getter$0();
      t1._lastValue = P.List_List$from(t1._safeRead$0(), true, H.getRuntimeTypeArgument(t1, "_ListWatcher", 0));
      return t1;
    case C._WatcherType_ORDERED_MAP:
      $._Watcher__nextId = t1 + 1;
      t1 = new Y._OrderDependantMapWatcher(debugName, $location, t1, exp, callback, null);
      t1._lastValue = t1._getter$0();
      t2 = t1._safeRead$0();
      t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t3.addAll$1(t3, t2);
      t1._lastValue = t3;
      return t1;
    case C._WatcherType_HASH_MAP:
      $._Watcher__nextId = t1 + 1;
      t1 = new Y._HashMapWatcher(debugName, $location, t1, exp, callback, null);
      H.setRuntimeTypeInfo(t1, [null, null]);
      t1._lastValue = t1._getter$0();
      t2 = t1._safeRead$0();
      t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, H.getRuntimeTypeArgument(t1, "_HashMapWatcher", 0), H.getRuntimeTypeArgument(t1, "_HashMapWatcher", 1));
      t3.addAll$1(t3, t2);
      t1._lastValue = t3;
      return t1;
    default:
      $._Watcher__nextId = t1 + 1;
      t1 = new Y._Watcher(debugName, $location, t1, exp, callback, null);
      t1._lastValue = t1._getter$0();
      return t1;
  }
},

"+_createWatcher:5:0": 1,

watchAndInvoke: function(exp, callback, debugName, $location) {
  var res, value, t1;
  res = Y.watch(exp, callback, debugName, $location);
  value = !!exp.$isFunction ? exp.call$0() : exp;
  t1 = J.getInterceptor$ax(value);
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!t1.$isIterable) && (typeof value !== "object" || value === null || value.constructor !== Array && !t1.$isList))
    value = t1.toList$0(value);
  callback.call$1(new T.ChangeNotification(null, value, null));
  return res;
},

"+watchAndInvoke:4:0": 1,

"*watchAndInvoke": [0, 0],

dispatch: function() {
  var total, t1, dirty;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $._watchers, t1.get$iterator, t1 = L.LinkedListIterator$(t1), dirty = false; t1.moveNext$0();)
      if (t1._liblib0$_current.compareAndNotify$0() === true)
        dirty = true;
    if (dirty) {
      ++total;
      t1 = total < 10;
    } else
      t1 = false;
  } while (t1);
  if (total === 10)
    $.get$_logger().warning$1("Possible loop in watchers propagation, stopped dispatch.");
},

"+dispatch:0:0": 1,

_iterablesNotEqual: function(first, second) {
  var x, y;
  x = J.get$iterator$ax(first);
  y = J.get$iterator$ax(second);
  for (; x.moveNext$0() === true;) {
    if (y.moveNext$0() !== true)
      return true;
    if (!J.$eq(x.get$current(), y.get$current()))
      return true;
  }
  return y.moveNext$0();
},

"+_iterablesNotEqual:2:0": 1,

closure: {"": "Closure;",
  call$0: function() {
    var trace, exception;
    try {
      throw H.wrapException("");
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      return J.toString$0(trace);
    }

  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+closure": [],

watch_closure4: {"": "Closure;",
  call$0: function() {
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+watch_closure": [],

watch_closure: {"": "Closure;target_0-",
  call$0: function() {
    return J.toList$0$ax(this.target_0.call$0());
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+watch_closure": [],

watch_closure0: {"": "Closure;target_1-",
  call$0: function() {
    return this.target_1;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+watch_closure": [],

watch_closure1: {"": "Closure;target_2-",
  call$0: function() {
    return J.toList$0$ax(this.target_2);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+watch_closure": [],

watch_closure2: {"": "Closure;target_3-",
  call$0: function() {
    return this.target_3;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+watch_closure": [],

watch_closure3: {"": "Closure;target_4-",
  call$0: function() {
    return this.target_4;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+watch_closure": [],

_Watcher: {"": "Object;debugName-,location-,_uniqueId-,_getter-,_liblib4$_callback-,_lastValue-",
  _getter$0: function() {
    return this._getter.call$0();
  },
  _liblib4$_callback$1: function(arg0) {
    return this._liblib4$_callback.call$1(arg0);
  },
  toString$0: function(_) {
    return this.debugName + " (id: #" + this._uniqueId + ")";
  },
  "+toString:0:0": 1,
  compareAndNotify$0: function() {
    var currentValue, oldValue;
    currentValue = this._safeRead$0();
    if (this._liblib4$_compare$1(currentValue) === true) {
      oldValue = this._lastValue;
      this._update$1(currentValue);
      this._liblib4$_callback$1(new T.ChangeNotification(oldValue, currentValue, null));
      return true;
    }
    return false;
  },
  "+compareAndNotify:0:0": 1,
  _liblib4$_compare$1: function(currentValue) {
    return !J.$eq(this._lastValue, currentValue);
  },
  "+_compare:1:0": 1,
  _update$1: function(currentValue) {
    if ($.verboseDebugMessages)
      if (this.location != null) {
        $.get$_logger().info$1("watcher updated: " + H.S(this) + ", defined at:\n" + H.S(this.location));
        this.location = null;
      } else
        $.get$_logger().info$1("watcher updated: " + H.S(this));
    this._lastValue = currentValue;
  },
  "+_update:1:0": 1,
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      $.get$_logger().warning$1(H.S(this) + " watcher threw an exception: " + H.S(e) + ", " + H.S(trace));
    }

    return this._lastValue;
  },
  "+_safeRead:0:0": 1,
  $is_Watcher: true,
  static: {
"": "_Watcher__nextId-",
}

},

"+_Watcher": [],

_ListWatcher: {"": "_Watcher;debugName-,location-,_uniqueId-,_getter-,_liblib4$_callback-,_lastValue-",
  _liblib4$_compare$1: function(currentValue) {
    return Y._iterablesNotEqual(this._lastValue, currentValue);
  },
  "+_compare:1:0": 1,
  _update$1: function(currentValue) {
    this._lastValue = P.List_List$from(currentValue, true, H.getRuntimeTypeArgument(this, "_ListWatcher", 0));
  },
  "+_update:1:0": 1
},

"+_ListWatcher": [],

_HashMapWatcher: {"": "_Watcher;debugName-,location-,_uniqueId-,_getter-,_liblib4$_callback-,_lastValue-",
  _liblib4$_compare$1: function(currentValue) {
    var keys, t1, keyIterator, key;
    keys = this._lastValue.get$keys();
    t1 = J.getInterceptor$asx(keys);
    if (!J.$eq(t1.get$length(keys), J.get$length$asx(currentValue.get$keys())))
      return true;
    keyIterator = t1.get$iterator(keys);
    for (t1 = J.getInterceptor$asx(currentValue); keyIterator.moveNext$0() === true;) {
      key = keyIterator.get$current();
      if (currentValue.containsKey$1(key) !== true)
        return true;
      if (!J.$eq(J.$index$asx(this._lastValue, key), t1.$index(currentValue, key)))
        return true;
    }
    return false;
  },
  "+_compare:1:0": 1,
  _update$1: function(currentValue) {
    var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, H.getRuntimeTypeArgument(this, "_HashMapWatcher", 0), H.getRuntimeTypeArgument(this, "_HashMapWatcher", 1));
    t1.addAll$1(t1, currentValue);
    this._lastValue = t1;
  },
  "+_update:1:0": 1
},

"+_HashMapWatcher": [],

_OrderDependantMapWatcher: {"": "_Watcher;debugName-,location-,_uniqueId-,_getter-,_liblib4$_callback-,_lastValue-",
  _liblib4$_compare$1: function(currentValue) {
    return Y._iterablesNotEqual(currentValue.get$keys(), this._lastValue.get$keys()) === true || Y._iterablesNotEqual(J.get$values$x(currentValue), J.get$values$x(this._lastValue)) === true;
  },
  "+_compare:1:0": 1,
  _update$1: function(currentValue) {
    var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1.addAll$1(t1, currentValue);
    this._lastValue = t1;
  },
  "+_update:1:0": 1
},

"+_OrderDependantMapWatcher": [],

_WatcherType: {"": "Object;_liblib4$_value-",
  toString$0: function(_) {
    return "Enum." + this._liblib4$_value;
  },
  "+toString:0:0": 1,
  static: {
"": "_WatcherType_LIST0-,_WatcherType_HASH_MAP0-,_WatcherType_ORDERED_MAP0-,_WatcherType_OTHER0-",
}

},

"+_WatcherType": []}],
["web_ui", "package:web_ui/web_ui.dart", , F, {
WebComponent__matches: function(node, selector) {
  var t1;
  if (typeof selector !== "string")
    return F.WebComponent__matches$bailout(1, selector, node);
  t1 = J.getInterceptor$x(node);
  if (typeof node !== "object" || node === null || !t1.$isElement)
    return selector === "*";
  return t1.matches$1(node, selector);
},

"+_matches:2:0": 1,

WebComponent__matches$bailout: function(state0, selector, node) {
  var t1 = J.getInterceptor$x(node);
  if (typeof node !== "object" || node === null || !t1.$isElement)
    return J.$eq(selector, "*");
  return t1.matches$1(node, selector);
},

WebComponent__isActive: function(node) {
  var t1, t2;
  for (node = J.get$parent$x(node); node != null; node = t1.get$parent(node)) {
    t1 = J.getInterceptor$x(node);
    t2 = t1.get$tagName(node);
    if (typeof t2 !== "string")
      return F.WebComponent__isActive$bailout(1, t1, node, t2);
    if (t2 !== "CONTENT") {
      t2 = t1.get$tagName(node);
      if (typeof t2 !== "string")
        return F.WebComponent__isActive$bailout(2, t1, node, t2);
      t2 = t2 === "SHADOW";
    } else
      t2 = true;
    if (t2)
      return false;
  }
  return true;
},

"+_isActive:1:0": 1,

WebComponent__isActive$bailout: function(state0, t1, node, t2) {
  switch (state0) {
    case 0:
      node = J.get$parent$x(node);
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(node != null))
                break L0;
              t1 = J.getInterceptor$x(node);
              t2 = t1.get$tagName(node);
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && !J.$eq(t2, "CONTENT"))
                switch (state0) {
                  case 0:
                    t2 = t1.get$tagName(node);
                  case 2:
                    state0 = 0;
                    t2 = J.$eq(t2, "SHADOW");
                }
              else
                t2 = true;
              if (t2)
                return false;
              node = t1.get$parent(node);
          }
      return true;
  }
},

WebComponent: {"": "CustomElement;",
  get$host: function(_) {
    var t1 = this._host;
    if (t1 == null)
      throw H.wrapException(new P.StateError("host element has not been set."));
    return t1;
  },
  "+host": 1,
  set$host: function(_, value) {
    var t1, xtag;
    if (value == null)
      throw H.wrapException(new P.ArgumentError("host must not be null."));
    t1 = J.getInterceptor$x(value);
    xtag = t1.get$xtag(value);
    if (xtag != null && !J.$eq(xtag, value))
      throw H.wrapException(new P.ArgumentError("host must not have its xtag property set."));
    if (this._host != null)
      throw H.wrapException(new P.StateError("host can only be set once."));
    t1.set$xtag(value, this);
    this._host = value;
  },
  "+host=": 1,
  createShadowRoot$1: function(_, componentName) {
    var root, t1;
    root = this._createShadowRoot$0();
    if (componentName != null) {
      t1 = this._generatedRoots;
      t1.$indexSet(t1, componentName, root);
    }
    return root;
  },
  "+createShadowRoot:1:0": 1,
  "*createShadowRoot": [0],
  createShadowRoot$0: function($receiver) {
    return this.createShadowRoot$1($receiver, null);
  },
  "+createShadowRoot:0:0": 1,
  _createShadowRoot$0: function() {
    if ($.useShadowDom && !!Element.prototype.webkitCreateShadowRoot) {
      var t1 = this._host;
      if (t1 == null)
        H.throwExpression(new P.StateError("host element has not been set."));
      return J.createShadowRoot$0$x(t1);
    }
    if (this._shadowRoots == null)
      this._shadowRoots = [];
    this._shadowRoots.push(document.createElement("div", null));
    return J.get$last$ax(this._shadowRoots);
  },
  "+_createShadowRoot:0:0": 1,
  inserted$0: function() {
  },
  "+inserted:0:0": 1,
  composeChildren$0: function() {
    var t1, t2, tree, pool, shadowInsertionPoints, shadowInsertionTrees, tree0, point, i, componentName;
    if ($.useShadowDom && !!Element.prototype.webkitCreateShadowRoot)
      return;
    t1 = this._shadowRoots;
    t2 = t1.length;
    if (t2 === 0)
      throw H.wrapException(new P.StateError("Distribution algorithm requires at least one shadow root and can only be run once."));
    if (0 >= t2)
      throw H.ioore(t1, 0);
    tree = t1.pop();
    pool = P.List_List$from(J.get$nodes$x(this.get$host(this)), true, null);
    shadowInsertionPoints = [];
    shadowInsertionTrees = [];
    for (tree0 = tree; true;) {
      pool = this._distributeNodes$2(tree0, pool);
      point = J.query$1$x(tree0, "shadow");
      if (point != null)
        if (t1.length > 0) {
          tree0 = t1.pop();
          shadowInsertionPoints.push(point);
          shadowInsertionTrees.push(tree0);
        } else {
          t1 = J.getInterceptor$x(point);
          J.insertAllBefore$2$x(t1.get$parent(point), pool, point);
          t1.remove$0(point);
          break;
        }
      else
        break;
    }
    for (i = 0; i < shadowInsertionPoints.length; ++i) {
      point = shadowInsertionPoints[i];
      if (i >= shadowInsertionTrees.length)
        throw H.ioore(shadowInsertionTrees, i);
      t1 = J.get$nodes$x(shadowInsertionTrees[i]);
      t2 = J.getInterceptor$x(point);
      J.insertAllBefore$2$x(t2.get$parent(point), t1, point);
      t2.remove$0(point);
    }
    J.clear$0$ax(J.get$nodes$x(this.get$host(this)));
    J.addAll$1$ax(J.get$nodes$x(this.get$host(this)), J.get$nodes$x(tree));
    for (t1 = this._generatedRoots, t2 = t1.get$keys()._map, t2 = new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), t2._cell = t2._map._first; t2.moveNext$0();) {
      componentName = t2._liblib1$_current;
      if (J.$eq(t1.$index(t1, componentName), tree)) {
        t1.$indexSet(t1, componentName, this);
        break;
      }
    }
  },
  "+composeChildren:0:0": 1,
  _distributeNodes$2: function(tree, pool) {
    var t1, insertionPoint, t2, select, matching, notMatching, t3, node;
    for (t1 = J.get$iterator$ax(J.queryAll$1$x(tree, "content")); t1.moveNext$0() === true;) {
      insertionPoint = t1.get$current();
      if (!F.WebComponent__isActive(insertionPoint))
        continue;
      t2 = J.getInterceptor$x(insertionPoint);
      select = J.$index$asx(t2.get$attributes(insertionPoint), "select");
      if (typeof select !== "string")
        return this._distributeNodes$2$bailout(1, t2, insertionPoint, pool, select, t1);
      if (select === "")
        select = "*";
      matching = [];
      notMatching = [];
      for (t3 = new H.ListIterator(pool, pool.length, 0, null); t3.moveNext$0();) {
        node = t3._liblib$_current;
        (F.WebComponent__matches(node, select) === true ? matching : notMatching).push(node);
      }
      if (matching.length === 0) {
        matching = t2.get$nodes(insertionPoint);
        if (typeof matching !== "object" || matching === null || matching.constructor !== Array || !!matching.fixed$length)
          return this._distributeNodes$2$bailout(2, t2, insertionPoint, 0, 0, t1, notMatching, matching);
      }
      J.insertAllBefore$2$x(t2.get$parent(insertionPoint), matching, insertionPoint);
      t2.remove$0(insertionPoint);
      pool = notMatching;
    }
    return pool;
  },
  "+_distributeNodes:2:0": 1,
  _distributeNodes$2$bailout: function(state0, t2, insertionPoint, pool, select, t1, notMatching, matching) {
    switch (state0) {
      case 0:
        t1 = J.get$iterator$ax(J.queryAll$1$x(tree, "content"));
      default:
        var t3, node;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      insertionPoint = t1.get$current();
                      if (!F.WebComponent__isActive(insertionPoint))
                        break c$0;
                      t2 = J.getInterceptor$x(insertionPoint);
                      select = J.$index$asx(t2.get$attributes(insertionPoint), "select");
                    case 1:
                      state0 = 0;
                      if (select == null || J.$eq(select, ""))
                        select = "*";
                      matching = [];
                      notMatching = [];
                      for (t3 = new H.ListIterator(pool, pool.length, 0, null); t3.moveNext$0();) {
                        node = t3._liblib$_current;
                        (F.WebComponent__matches(node, select) === true ? matching : notMatching).push(node);
                      }
                    case 2:
                      if (state0 === 2 || state0 === 0 && matching.length === 0)
                        switch (state0) {
                          case 0:
                            matching = t2.get$nodes(insertionPoint);
                          case 2:
                            state0 = 0;
                        }
                      J.insertAllBefore$2$x(t2.get$parent(insertionPoint), matching, insertionPoint);
                      t2.remove$0(insertionPoint);
                      pool = notMatching;
                  }
                }
            }
        return pool;
    }
  }
},

"+WebComponent": [],

ScopedCssMapper: {"": "Object;_mapping-",
  $index: function(_, selector) {
    var t1 = this._mapping;
    return t1.$index(t1, selector);
  },
  "+[]:1:0": 1
},

"+ScopedCssMapper": []}],
["web_ui.observe.observable", "package:web_ui/observe/observable.dart", , T, {
observe: function(value, callback, debugName) {
  var t1, exprObserver;
  t1 = $._ExpressionObserver__nextId + 1;
  $._ExpressionObserver__nextId = t1;
  exprObserver = new T._ExpressionObserver(t1, value, callback, debugName, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), [], false, null);
  if (!exprObserver._observe$0())
    return T._doNothing$closure;
  return exprObserver.get$_unobserve();
},

"+observe:3:0": 1,

"*observe": [0],

observeChanges: function(obj, observer) {
  var t1;
  if (obj.get$$$_observers() == null) {
    t1 = new L.LinkedList(null, null, 0);
    H.setRuntimeTypeInfo(t1, [null]);
    obj.set$$$_observers(t1);
  }
  return J.get$remove$ax(J.add$1$ax(obj.get$$$_observers(), observer));
},

"+observeChanges:2:0": 1,

_doNothing: function() {
},

"+_doNothing:0:0": 1,

defaultObserveUnhandledError: function(error, trace, obj, message) {
  H.Primitives_printString("web_ui.observe: unhandled error calling " + H.S(obj) + " " + H.S(message) + ".\nerror:\n" + H.S(error) + "\n\nstack trace:\n" + H.S(trace));
},

"+defaultObserveUnhandledError:4:0": 1,

ChangeNotification: {"": "Object;oldValue>-,newValue>-,changes<-",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$isChangeNotification)
      t1 = J.$eq(this.oldValue, other.oldValue) && J.$eq(this.newValue, other.newValue) && J.$eq(this.changes, other.changes);
    else
      t1 = false;
    return t1;
  },
  "+==:1:0": 1,
  get$hashCode: function(_) {
    return J.$add$ns(J.$mul$n(J.get$hashCode$(J.$add$ns(J.$mul$n(J.get$hashCode$(this.oldValue), 31), J.get$hashCode$(this.newValue))), 31), J.get$hashCode$(this.changes));
  },
  "+hashCode": 1,
  toString$0: function(_) {
    var t1 = this.changes;
    if (t1 != null)
      return "#<ChangeNotification to " + H.S(this.newValue) + ": " + H.S(t1) + ">";
    return "#<ChangeNotification from " + H.S(this.oldValue) + " to " + H.S(this.newValue) + ">";
  },
  "+toString:0:0": 1,
  $isChangeNotification: true
},

"+ChangeNotification": [],

observe_closure: {"": "Closure;callback_0-,obs_1-",
  call$1: function(changes) {
    var t1 = this.obs_1;
    this.callback_0.call$1(new T.ChangeNotification(t1, t1, changes));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+observe_closure": [],

Observable: {"": "Object;"},

"+Observable": [],

_ExpressionObserver: {"": "Object;_id-,_expression-,_callback-,_debugName-,_reads-,_unobservers-,_scheduled-,_liblib3$_value-",
  _expression$0: function() {
    return this._expression.call$0();
  },
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  toString$0: function(_) {
    return "<observer " + this._id + ">";
  },
  "+toString:0:0": 1,
  _observe$0: function() {
    var e, trace, $parent, t1, t2, exception;
    $parent = $._activeObserver;
    $._activeObserver = this;
    try {
      this._liblib3$_value = this._expression$0();
      t1 = this._liblib3$_value;
      t2 = J.getInterceptor$ax(t1);
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isIterable) && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t2.$isList) && true)
        this._liblib3$_value = t2.toList$0(H.listSuperNativeTypeCast(t1, "$isIterable"));
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      $.onObserveUnhandledError.call$4(e, trace, this._expression, "from " + H.S(this));
      this._liblib3$_value = null;
    }

    t1 = this._reads;
    t1.forEach$1(t1, this.get$_watchForChange());
    t1.clear$0(t1);
    $._activeObserver = $parent;
    this._observeValue$0();
    return this._unobservers.length > 0;
  },
  "+_observe:0:0": 1,
  _runCallback$1: function(change) {
    var e, trace, exception, t1;
    try {
      this._callback$1(change);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      trace = new H._StackTrace(exception, null);
      $.onObserveUnhandledError.call$4(e, trace, this._callback, "from " + H.S(this));
    }

  },
  "+_runCallback:1:0": 1,
  _observeValue$0: function() {
    return;
  },
  "+_observeValue:0:0": 1,
  _watchForChange$2: function(target, reads) {
    this._unobservers.push(T.observeChanges(target, new T._ExpressionObserver__watchForChange_closure(this, reads)));
  },
  "+_watchForChange:2:0": 1,
  get$_watchForChange: function() {
    return new P.BoundClosure$2(this, T._ExpressionObserver.prototype._watchForChange$2, null, "_watchForChange$2");
  },
  _unobserve$0: function() {
    for (var t1 = this._unobservers, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      t1._liblib$_current.call$0();
    this._scheduled = false;
  },
  "+_unobserve:0:0": 1,
  get$_unobserve: function() {
    return new T.Bound__unobserve__ExpressionObserver(this, T._ExpressionObserver.prototype._unobserve$0, null, "_unobserve$0");
  },
  static: {
"": "_ExpressionObserver__nextId-",
}

},

"+_ExpressionObserver": [],

_ExpressionObserver__observeValue_closure: {"": "Closure;this_0-,value_1-",
  call$1: function(changes) {
    var t1 = this.value_1;
    this.this_0._runCallback$1(new T.ChangeNotification(t1, t1, changes));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_ExpressionObserver__observeValue_closure": [],

_ExpressionObserver__watchForChange_closure: {"": "Closure;this_0-,reads_1-",
  call$1: function(changes) {
    var t1, t2, t3, change, t4, t5, mask;
    t1 = this.this_0;
    if (t1._scheduled)
      return;
    t2 = J.get$iterator$ax(changes);
    t3 = this.reads_1;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !H.isJsIndexable(t3, t3[init.dispatchPropertyName])))
      return this.call$1$bailout(1, t1, t3, t2);
    for (; t2.moveNext$0() === true;) {
      change = t2.get$current();
      t4 = J.getInterceptor$x(change);
      t5 = t4.get$key(change);
      if (t5 >>> 0 !== t5 || t5 >= t3.length)
        throw H.ioore(t3, t5);
      mask = t3[t5];
      if (mask != null && !J.$eq(J.$and$n(mask, t4.get$type(change)), 0)) {
        t1._scheduled = true;
        if ($._changedExpressions == null)
          $._changedExpressions = P.SplayTreeMap$(null, null, null, null);
        t2 = $._changedExpressions;
        t2.$indexSet(t2, t1._id, t1);
        return;
      }
    }
  },
  "+call:1:0": 1,
  call$1$bailout: function(state0, t1, t3, t2) {
    switch (state0) {
      case 0:
        t1 = this.this_0;
        if (t1._scheduled)
          return;
        t2 = J.get$iterator$ax(changes);
        t3 = this.reads_1;
      case 1:
        var t4, change, t5, mask;
        state0 = 0;
        t4 = J.getInterceptor$asx(t3);
        for (; t2.moveNext$0() === true;) {
          change = t2.get$current();
          t5 = J.getInterceptor$x(change);
          mask = t4.$index(t3, t5.get$key(change));
          if (mask != null && !J.$eq(J.$and$n(mask, t5.get$type(change)), 0)) {
            t1._scheduled = true;
            if ($._changedExpressions == null)
              $._changedExpressions = P.SplayTreeMap$(null, null, null, null);
            t2 = $._changedExpressions;
            t2.$indexSet(t2, t1._id, t1);
            return;
          }
        }
    }
  },
  $isFunction: true
},

"+_ExpressionObserver__watchForChange_closure": []}],
["x_irpane", "_from_packages/irhydra/src/ui/irpane.dart", , U, {
IRPane: {"": "WebComponent;_liblib14$_css-,_liblib14$__t-,_lines-,_ranges-,_liblib14$_table-,_refsPanel-,_host-,_shadowRoots-,_generatedRoots-,_mapper-,_liblib17$_host-,_liblib17$_shadowRoots-,_liblib17$_generatedRoots-",
  created_autogenerated$0: function() {
    var __root = this.createShadowRoot$1(this, "x-irpane");
    this._mapper = new F.ScopedCssMapper(H.fillLiteralMap(["x-irpane", "[is=\"x-irpane\"]"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this._liblib14$_css = this._mapper;
    this._liblib14$__t = new V.Template(__root, [], []);
    J.add$1$ax(J.get$nodes$x(__root), J.clone$1$x($.get$IRPane___shadowTemplate(), true));
    this._liblib14$__t.create$0();
  },
  "+created_autogenerated:0:0": 1,
  inserted_autogenerated$0: function() {
    var t1 = this._liblib14$__t;
    t1.insert$0(t1);
  },
  "+inserted_autogenerated:0:0": 1,
  removed_autogenerated$0: function() {
    var t1 = this._liblib14$__t;
    t1.remove$0(t1);
    this._liblib14$__t = null;
  },
  "+removed_autogenerated:0:0": 1,
  inserted$0: function() {
    var t1 = this._generatedRoots;
    this._liblib14$_table = J.query$1$x(t1.$index(t1, "x-irpane"), "table");
  },
  "+inserted:0:0": 1,
  href$1: function(_, id) {
    return "ir-" + H.S(id);
  },
  "+href:1:0": 1,
  get$href: function(_receiver) {
    return new J.BoundClosure$i1(this, U.IRPane.prototype.href$1, _receiver, "href$1");
  },
  line$1: function(id) {
    var t1, range, t2;
    t1 = this._ranges;
    range = t1.$index(t1, id);
    if (range != null) {
      t1 = this._lines;
      t2 = J.get$start$x(range);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      t2 = t1[t2];
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  "+line:1:0": 1,
  add$4$id$klass: function(_, gutter, text, id, klass) {
    var t1, t2, gutter0, t3, text0, row, t4, t5, line;
    t1 = {};
    t1.id_0 = id;
    t2 = typeof gutter === "string";
    if (t2 && t1.id_0 == null)
      t1.id_0 = gutter;
    if (t2)
      gutter = document.createTextNode(gutter);
    if (typeof text === "string")
      text = document.createTextNode(text);
    gutter0 = W.Element_Element$html("<pre/>", null, null);
    t2 = W.AnchorElement_AnchorElement(null);
    t3 = J.getInterceptor$x(t2);
    t3.set$name(t2, "ir-" + H.S(t1.id_0));
    J.add$1$ax(t3.get$nodes(t2), gutter);
    t3.get$onClick(t2).listen$1(new U.IRPane_add_closure(t1, this));
    J.append$1$x(gutter0, t2);
    text0 = W.Element_Element$html("<pre/>", null, null);
    J.add$1$ax(J.get$nodes$x(text0), text);
    row = document.createElement("tr", null);
    t2 = J.getInterceptor$x(row);
    t3 = t2.get$nodes(row);
    t4 = document.createElement("td", null);
    J.add$1$ax(J.get$nodes$x(t4), gutter0);
    t5 = document.createElement("td", null);
    J.add$1$ax(J.get$nodes$x(t5), text0);
    J.addAll$1$ax(t3, [t4, t5]);
    if (klass != null)
      J.add$1$ax(t2.get$classes(row), klass);
    J.add$1$ax(J.get$nodes$x(this._liblib14$_table), row);
    line = new U.IRPaneLine(gutter0, text0);
    t2 = this._lines;
    t2.push(line);
    t1 = t1.id_0;
    if (t1 != null) {
      t3 = this._ranges;
      t3.$indexSet(t3, t1, new U._Range(t2.length - 1, 1));
    }
    return line;
  },
  "+add:2:2:id:klass": 1,
  "*add": [0, 0],
  add$2: function($receiver, gutter, text) {
    return this.add$4$id$klass($receiver, gutter, text, null, null);
  },
  "+add:2:0": 1,
  add$3$id: function($receiver, gutter, text, id) {
    return this.add$4$id$klass($receiver, gutter, text, id, null);
  },
  "+add:3:0:id": 1,
  add$3$klass: function($receiver, gutter, text, klass) {
    return this.add$4$id$klass($receiver, gutter, text, null, klass);
  },
  "+add:3:0:klass": 1,
  createRange$1: function(_, id) {
    var t1, range, t2, t3;
    t1 = this._ranges;
    range = t1.$index(t1, id);
    t1 = this._lines.length;
    t2 = J.getInterceptor$x(range);
    t3 = t2.get$start(range);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t2.set$length(range, t1 - t3);
  },
  "+createRange:1:0": 1,
  rangeContentAsHtml$2$fullRow: function(id, fullRow) {
    var t1, range, t2, table;
    t1 = this._ranges;
    range = t1.$index(t1, id);
    if (range == null)
      return;
    if (fullRow !== true && J.$eq(J.get$length$asx(range), 1)) {
      t1 = this._lines;
      t2 = J.get$start$x(range);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      return E.toHtml(t1[t2].text);
    }
    table = document.createElement("table", null);
    t1 = J.getInterceptor$x(table);
    J.add$1$ax(t1.get$classes(table), "irpane");
    t2 = J.getInterceptor$x(range);
    J.addAll$1$ax(t1.get$nodes(table), J.map$1$ax(J.sublist$2$ax(J.get$nodes$x(this._liblib14$_table), t2.get$start(range), J.$add$ns(t2.get$start(range), t2.get$length(range))), new U.IRPane_rangeContentAsHtml_closure()));
    return E.toHtml(table);
  },
  "+rangeContentAsHtml:1:1:fullRow": 1,
  "*rangeContentAsHtml": [1],
  get$rangeContentAsHtml: function() {
    return new U.Bound_rangeContentAsHtml_IRPane(this, U.IRPane.prototype.rangeContentAsHtml$2$fullRow, null, "rangeContentAsHtml$2$fullRow");
  },
  rangeContentAsHtmlFull$1: function(id) {
    return this.rangeContentAsHtml$2$fullRow(id, true);
  },
  "+rangeContentAsHtmlFull:1:0": 1,
  get$rangeContentAsHtmlFull: function() {
    return new P.BoundClosure$1(this, U.IRPane.prototype.rangeContentAsHtmlFull$1, null, "rangeContentAsHtmlFull$1");
  },
  clear$0: function(_) {
    var t1;
    J.clear$0$ax(J.get$nodes$x(this._liblib14$_table));
    C.JSArray_methods.set$length(this._lines, 0);
    t1 = this._ranges;
    t1.clear$0(t1);
    this.closeRefsPanel$0();
  },
  "+clear:0:0": 1,
  showRefsTo$1: function(id) {
    var t1, t2, t3, refs, anchor, refsTable;
    t1 = {};
    this.closeRefsPanel$0();
    t2 = W._FrozenElementList$_wrap(document.querySelectorAll("a[href='#" + ("ir-" + H.S(id)) + "']"), null);
    t2 = t2.map$1(t2, new U.IRPane_showRefsTo_closure());
    t2 = P.IterableBase.prototype.where$1.call(t2, t2, new U.IRPane_showRefsTo_closure0());
    t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
    t3.addAll$1(t3, t2);
    t2 = new H.MappedIterable(t3, new U.IRPane_showRefsTo_closure1());
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "IterableBase", 0), null]);
    refs = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
    t2 = refs.length;
    if (t2 === 0)
      return;
    for (t2 = new H.ListIterator(refs, t2, 0, null); t2.moveNext$0();) {
      anchor = J.query$1$x(t2._liblib$_current, "a[name]");
      t3 = J.getInterceptor$x(anchor);
      t3.set$href(anchor, "#" + H.S(t3.get$name(anchor)));
    }
    refsTable = document.createElement("table", null);
    t2 = J.getInterceptor$x(refsTable);
    J.add$1$ax(t2.get$classes(refsTable), "irpane");
    J.addAll$1$ax(t2.get$nodes(refsTable), refs);
    t1.baselineOffset_0 = null;
    Q.scoped(new U.IRPane_showRefsTo_closure2(t1, this, id));
    this._refsPanel = U._RefsPanel$(t1.baselineOffset_0, this._liblib14$_table, refsTable);
  },
  "+showRefsTo:1:0": 1,
  closeRefsPanel$0: function() {
    var t1 = this._refsPanel;
    if (t1 != null) {
      t1.close$0(t1);
      this._refsPanel = null;
    }
  },
  "+closeRefsPanel:0:0": 1,
  static: {
"": "IRPane___shadowTemplate-",
}

},

"+IRPane": [],

IRPane_add_closure: {"": "Closure;box_0-,this_1-",
  call$1: function($event) {
    var t1 = this.box_0.id_0;
    if (t1 != null)
      this.this_1.showRefsTo$1(t1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRPane_add_closure": [],

IRPane_rangeContentAsHtml_closure: {"": "Closure;",
  call$1: function(elem) {
    return J.clone$1$x(elem, true);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRPane_rangeContentAsHtml_closure": [],

IRPane_showRefsTo_closure: {"": "Closure;",
  call$1: function(node) {
    var t1;
    while (true) {
      if (node != null) {
        t1 = J.getInterceptor(node);
        t1 = typeof node !== "object" || node === null || !t1.$isTableRowElement;
      } else
        t1 = false;
      if (!t1)
        break;
      node = J.get$parent$x(node);
    }
    return node;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRPane_showRefsTo_closure": [],

IRPane_showRefsTo_closure0: {"": "Closure;",
  call$1: function(node) {
    return node != null;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRPane_showRefsTo_closure": [],

IRPane_showRefsTo_closure1: {"": "Closure;",
  call$1: function(node) {
    return J.clone$1$x(node, true);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+IRPane_showRefsTo_closure": [],

IRPane_showRefsTo_closure2: {"": "Closure;box_0-,this_1-,id_2-",
  call$0: function() {
    var gutter = this.this_1.line$1(this.id_2).get$gutter();
    Q._enterScopeIfNeeded();
    this.box_0.baselineOffset_0 = J.$add$ns(J.get$top$x(J.offset$0$x(Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(gutter))), J.$tdiv$n(J.get$clientHeight$x(gutter), 2));
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+IRPane_showRefsTo_closure": [],

IRPaneLine: {"": "Object;gutter<-,text>-"},

"+IRPaneLine": [],

_Range: {"": "Object;start>-,length*-", $is_Range: true},

"+_Range": [],

_RefsPanel: {"": "Object;root-,onScroll>-,onResize>-,baselineOffset-,rightBorder-",
  close$0: function(_) {
    var t1, t2;
    t1 = this.root;
    t2 = J.getInterceptor$x(t1);
    if (t2.get$parent(t1) != null) {
      this.onResize.cancel$0();
      this.onScroll.cancel$0();
      J.remove$1$ax(J.get$nodes$x(t2.get$parent(t1)), t1);
    }
  },
  "+close:0:0": 1,
  position$0: function(_) {
    Q.scoped(new U._RefsPanel_position_closure(this));
  },
  "+position:0:0": 1,
  _RefsPanel$3: function(baselineOffset, rightBorder, $content) {
    var t1, t2;
    this.onScroll = J.get$onScroll$x(W._convertNativeToDart_Window(document.defaultView)).listen$1(new U._RefsPanel_closure(this));
    this.onResize = J.get$onResize$x(W._convertNativeToDart_Window(document.defaultView)).listen$1(new U._RefsPanel_closure0(this));
    t1 = this.root;
    t2 = J.getInterceptor$x(t1);
    J.get$onClick$x(t2.query$1(t1, ".close")).listen$1(new U._RefsPanel_closure1(this));
    J.add$1$ax(J.get$nodes$x(t2.query$1(t1, ".irpane-refs-inner")), $content);
    t2 = document.body;
    t2.get$nodes;
    new W._ChildNodeListLazy(t2)._this.appendChild(t1);
    this.position$0(this);
  },
  static: {
"": "_RefsPanel_PADDING-",
_RefsPanel$: function(baselineOffset, rightBorder, $content) {
  var t1 = new U._RefsPanel(W.Element_Element$html("<div class=\"irpane-refs\">  <button type=\"button\" class=\"close\">X</button>  <br style=\"clear: both;\"/>  <div class=\"irpane-refs-inner\"></div></div>", null, null), null, null, baselineOffset, rightBorder);
  t1._RefsPanel$3(baselineOffset, rightBorder, $content);
  return t1;
},

"+new _RefsPanel:3:0": 1}

},

"+_RefsPanel": [],

_RefsPanel_closure: {"": "Closure;this_0-",
  call$1: function(e) {
    var t1 = this.this_0;
    return t1.position$0(t1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_RefsPanel_closure": [],

_RefsPanel_closure0: {"": "Closure;this_1-",
  call$1: function(e) {
    var t1 = this.this_1;
    return t1.position$0(t1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_RefsPanel_closure": [],

_RefsPanel_closure1: {"": "Closure;this_2-",
  call$1: function(e) {
    var t1 = this.this_2;
    return t1.close$0(t1);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+_RefsPanel_closure": [],

_RefsPanel_position_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1, t2, t3, height, t4, $window, leftBorderOffset, right, baselineTop, maxTop, $top;
    t1 = this.this_0;
    t2 = t1.root;
    t3 = J.getInterceptor$x(t2);
    height = J.get$height$x(t3.getBoundingClientRect$0(t2));
    Q._enterScopeIfNeeded();
    t4 = Q._deserialize($._jsPortSync.callSync$1([]));
    Q._enterScopeIfNeeded();
    $window = t4.jQuery$1(J.get$window$x(Q._deserialize($._jsPortSync.callSync$1([]))));
    Q._enterScopeIfNeeded();
    leftBorderOffset = J.get$left$x(J.offset$0$x(Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(t1.rightBorder)));
    t4 = J.getInterceptor$x($window);
    right = J.$add$ns(J.$add$ns(t4.scrollLeft$0($window), J.$sub$n(t4.width$0($window), leftBorderOffset)), 5);
    baselineTop = J.$sub$n(J.$sub$n(t1.baselineOffset, t4.scrollTop$0($window)), J.$tdiv$n(height, 2));
    maxTop = J.$sub$n(J.$sub$n(t4.height$0($window), 5), height);
    $top = P.min(P.max(baselineTop, 5), maxTop);
    J.set$right$x(t3.get$style(t2), H.S(right) + "px");
    J.set$top$x(t3.get$style(t2), H.S($top) + "px");
    J.set$maxWidth$x(t3.get$style(t2), H.S(J.$sub$n(leftBorderOffset, 15)) + "px");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_RefsPanel_position_closure": []}],
["x_tabs", "_from_packages/irhydra/src/ui/tabs.dart", , V, {
Tabs: {"": "WebComponent;_liblib13$_css-,__e23-,_liblib13$__t-,tabs-,_activeTab-,_host-,_shadowRoots-,_generatedRoots-,_mapper-,_liblib17$_host-,_liblib17$_shadowRoots-,_liblib17$_generatedRoots-",
  created_autogenerated$0: function() {
    var __root, t1, t2;
    __root = this.createShadowRoot$1(this, "x-tabs");
    this._mapper = new F.ScopedCssMapper(H.fillLiteralMap(["x-tabs", "[is=\"x-tabs\"]"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this._liblib13$_css = this._mapper;
    this._liblib13$__t = new V.Template(__root, [], []);
    t1 = J.getInterceptor$x(__root);
    J.add$1$ax(t1.get$nodes(__root), J.clone$1$x($.get$Tabs___shadowTemplate(), true));
    this.__e23 = J.$index$asx(J.get$nodes$x(J.$index$asx(J.get$nodes$x(J.$index$asx(t1.get$nodes(__root), 1)), 1)), 1);
    t1 = this._liblib13$__t;
    t2 = this.__e23;
    t1.children.push(new V.LoopTemplate(new V.Tabs_created_autogenerated_closure(this), new V.Tabs_created_autogenerated_closure0(this), null, t2, [], []));
    this._liblib13$__t.create$0();
  },
  "+created_autogenerated:0:0": 1,
  inserted_autogenerated$0: function() {
    var t1 = this._liblib13$__t;
    t1.insert$0(t1);
  },
  "+inserted_autogenerated:0:0": 1,
  removed_autogenerated$0: function() {
    var t1 = this._liblib13$__t;
    t1.remove$0(t1);
    this.__e23 = null;
    this._liblib13$__t = null;
  },
  "+removed_autogenerated:0:0": 1,
  inserted$0: function() {
    var t1, t2;
    t1 = this.tabs;
    t2 = this._generatedRoots;
    C.JSArray_methods.addAll$1(t1, J.queryAll$1$x(t2.$index(t2, "x-tabs"), "[data-title]"));
    t2 = t1.length;
    if (t2 !== 0) {
      if (0 >= t2)
        throw H.ioore(t1, 0);
      this.set$activeTab(t1[0]);
    }
  },
  "+inserted:0:0": 1,
  set$activeTab: function(tab) {
    this._activeTab = tab;
    H.IterableMixinWorkaround_forEach(this.tabs, new V.Tabs_activeTab_closure(this));
  },
  "+activeTab=": 1,
  switchTo$1: function(href) {
    var t1, tab;
    for (t1 = this.tabs, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      tab = t1._liblib$_current;
      if (J.$eq(J.$index$asx(J.get$attributes$x(tab), "data-href"), href)) {
        this.set$activeTab(tab);
        break;
      }
    }
  },
  "+switchTo:1:0": 1,
  static: {
"": "Tabs___html1-,Tabs___shadowTemplate-",
}

},

"+Tabs": [],

Tabs_created_autogenerated_closure0: {"": "Closure;this_1-",
  call$0: function() {
    return this.this_1.tabs;
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Tabs_created_autogenerated_closure": [],

Tabs_created_autogenerated_closure: {"": "Closure;this_2-",
  call$3: function($$list, $$index, __t) {
    var t1, tab, __e22, __binding20, t2, t3;
    t1 = {};
    tab = J.$index$asx($$list, $$index);
    t1.__e21_0 = null;
    __e22 = J.clone$1$x($.get$Tabs___html1(), true);
    t1.__e21_0 = J.$index$asx(J.get$nodes$x(__e22), 1);
    __binding20 = __t.contentBind$2(new V.Tabs_created_autogenerated__closure(tab), false);
    J.addAll$1$ax(J.get$nodes$x(t1.__e21_0), [document.createTextNode("\n                "), __binding20, document.createTextNode("\n              ")]);
    t2 = this.this_2;
    __t.listen$2(J.get$onClick$x(t1.__e21_0), new V.Tabs_created_autogenerated__closure0(t2, tab));
    t3 = J.getInterceptor$x(__t);
    t3.bind$3(__t, new V.Tabs_created_autogenerated__closure1(tab), new V.Tabs_created_autogenerated__closure2(t1), false);
    __t.bindClass$3(__e22, new V.Tabs_created_autogenerated__closure3(t2, tab), false);
    t3.addAll$1(__t, [document.createTextNode("\n            "), __e22, document.createTextNode("\n          ")]);
  },
  "+call:3:0": 1,
  $isFunction: true
},

"+Tabs_created_autogenerated_closure": [],

Tabs_created_autogenerated__closure: {"": "Closure;tab_3-",
  call$0: function() {
    return J.$index$asx(J.get$attributes$x(this.tab_3), "data-title");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Tabs_created_autogenerated__closure": [],

Tabs_created_autogenerated__closure0: {"": "Closure;this_4-,tab_5-",
  call$1: function($$event) {
    this.this_4.set$activeTab(this.tab_5);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Tabs_created_autogenerated__closure": [],

Tabs_created_autogenerated__closure1: {"": "Closure;tab_6-",
  call$0: function() {
    return J.$index$asx(J.get$attributes$x(this.tab_6), "data-href");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Tabs_created_autogenerated__closure": [],

Tabs_created_autogenerated__closure2: {"": "Closure;box_0-",
  call$1: function(__e) {
    J.set$href$x(this.box_0.__e21_0, V.sanitizeUri("#" + H.S(J.get$newValue$x(__e))));
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Tabs_created_autogenerated__closure": [],

Tabs_created_autogenerated__closure3: {"": "Closure;this_7-,tab_8-",
  call$0: function() {
    return J.$eq(this.tab_8, this.this_7._activeTab) ? "active" : "";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Tabs_created_autogenerated__closure": [],

Tabs_activeTab_closure: {"": "Closure;this_0-",
  call$1: function(pane) {
    var t1, t2;
    t1 = J.getInterceptor$x(pane);
    t2 = t1.get$style(pane);
    t1 = t1.$eq(pane, this.this_0._activeTab) ? "block" : "none";
    J.set$display$x(t2, t1);
    return t1;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+Tabs_activeTab_closure": []}],
["x_v8_ir_descriptions", "_from_packages/irhydra/src/modes/v8/descriptions.html.dart", , Y, {
V8IRDescriptions: {"": "WebComponent;_css-,__t-,_host-,_shadowRoots-,_generatedRoots-,_mapper-,_liblib17$_host-,_liblib17$_shadowRoots-,_liblib17$_generatedRoots-",
  created_autogenerated$0: function() {
    var __root = this.createShadowRoot$1(this, "x-v8-ir-descriptions");
    this._mapper = new F.ScopedCssMapper(H.fillLiteralMap(["x-v8-ir-descriptions", "[is=\"x-v8-ir-descriptions\"]"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this._css = this._mapper;
    this.__t = new V.Template(__root, [], []);
    J.add$1$ax(J.get$nodes$x(__root), J.clone$1$x($.get$V8IRDescriptions___shadowTemplate(), true));
    this.__t.create$0();
  },
  "+created_autogenerated:0:0": 1,
  inserted_autogenerated$0: function() {
    var t1 = this.__t;
    t1.insert$0(t1);
  },
  "+inserted_autogenerated:0:0": 1,
  removed_autogenerated$0: function() {
    var t1 = this.__t;
    t1.remove$0(t1);
    this.__t = null;
  },
  "+removed_autogenerated:0:0": 1,
  lookup$2: function(ns, opcode) {
    var t1, elem;
    t1 = this._generatedRoots;
    elem = J.query$1$x(t1.$index(t1, "x-v8-ir-descriptions"), "div[data-" + H.S(ns) + "=" + H.S(opcode) + "]");
    return elem != null ? J.get$innerHtml$x(elem) : null;
  },
  "+lookup:2:0": 1,
  static: {
"": "V8IRDescriptions___shadowTemplate-",
}

},

"+V8IRDescriptions": []}],
["xref", "package:irhydra/src/xref.dart", , R, {
makeAttachableReferencer: function(getContent, type) {
  var delayed = new X.DelayedReaction(C.Duration_500000, null);
  return new R.makeAttachableReferencer_closure(new R.makeAttachableReferencer_mouseOver(getContent, type, delayed), new R.makeAttachableReferencer_mouseOut(type, delayed));
},

"+makeAttachableReferencer:1:1:type": 1,

"*makeAttachableReferencer": [6],

makeReferencer: function(getContent, getAnchor, type) {
  return new R.makeReferencer_closure(getAnchor, R.makeAttachableReferencer(getContent, type));
},

"+makeReferencer:2:1:type": 1,

"*makeReferencer": [6],

makeAttachableReferencer_mouseOver: {"": "Closure;getContent_0-,type_1-,delayed_2-",
  call$2: function(target, id) {
    this.delayed_2.schedule$1(new R.makeAttachableReferencer_mouseOver_closure(this.getContent_0, this.type_1, target, id));
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+makeAttachableReferencer_mouseOver": [],

makeAttachableReferencer_mouseOver_closure: {"": "Closure;getContent_3-,type_4-,target_5-,id_6-",
  call$0: function() {
    var $content, t1;
    $content = this.getContent_3.call$1(this.id_6);
    if ($content != null) {
      t1 = this.type_4;
      t1.show$2(t1, this.target_5, $content);
    }
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+makeAttachableReferencer_mouseOver_closure": [],

makeAttachableReferencer_mouseOut: {"": "Closure;type_7-,delayed_8-",
  call$2: function(target, id) {
    this.delayed_8._setTimer$1(null);
    this.type_7.destroy$1(target);
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+makeAttachableReferencer_mouseOut": [],

makeAttachableReferencer_closure: {"": "Closure;mouseOver_9-,mouseOut_10-",
  call$2: function(node, id) {
    var t1 = J.getInterceptor$x(node);
    t1.get$onMouseOver(node).listen$1(new R.makeAttachableReferencer__closure(this.mouseOver_9, id));
    t1.get$onMouseOut(node).listen$1(new R.makeAttachableReferencer__closure0(this.mouseOut_10, id));
  },
  "+call:2:0": 1,
  $isFunction: true
},

"+makeAttachableReferencer_closure": [],

makeAttachableReferencer__closure: {"": "Closure;mouseOver_11-,id_12-",
  call$1: function($event) {
    return this.mouseOver_11.call$2(J.get$target$x($event), this.id_12);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+makeAttachableReferencer__closure": [],

makeAttachableReferencer__closure0: {"": "Closure;mouseOut_13-,id_14-",
  call$1: function($event) {
    return this.mouseOut_13.call$2(J.get$target$x($event), this.id_14);
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+makeAttachableReferencer__closure": [],

makeReferencer_closure: {"": "Closure;getAnchor_0-,attach_1-",
  call$1: function(id) {
    var link, t1;
    link = W.AnchorElement_AnchorElement(null);
    t1 = J.getInterceptor$x(link);
    t1.set$href(link, "#" + H.S(this.getAnchor_0.call$1(id)));
    t1.appendText$1(link, id);
    this.attach_1.call$2(link, id);
    return link;
  },
  "+call:1:0": 1,
  $isFunction: true
},

"+makeReferencer_closure": [],

_Popover: {"": "Object;",
  show$2: function(_, target, $content) {
    Q.scoped(new R._Popover_show_closure(target, $content));
  },
  "+show:2:0": 1,
  destroy$1: function(target) {
    Q.scoped(new R._Popover_destroy_closure(target));
  },
  "+destroy:1:0": 1
},

"+_Popover": [],

_Popover_show_closure: {"": "Closure;target_0-,content_1-",
  call$0: function() {
    var t1, t2, data;
    Q._enterScopeIfNeeded();
    t1 = Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.target_0);
    t2 = H.fillLiteralMap(["title", "", "content", this.content_1, "trigger", "manual", "placement", "bottom", "html", true, "container", "body"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    Q._enterScopeIfNeeded();
    data = J.data$1$x(t1.popover$1(Q._deserialize($._jsPortConvert.callSync$1(Q.Proxy__serializeDataTree(t2)))), "popover");
    data.tip$0().addClass$1("xref");
    J.show$0$x(data);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Popover_show_closure": [],

_Popover_destroy_closure: {"": "Closure;target_0-",
  call$0: function() {
    Q._enterScopeIfNeeded();
    Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.target_0).popover$1("destroy");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Popover_destroy_closure": [],

_Tooltip: {"": "Object;",
  show$2: function(_, target, $content) {
    Q.scoped(new R._Tooltip_show_closure(target, $content));
  },
  "+show:2:0": 1,
  destroy$1: function(target) {
    Q.scoped(new R._Tooltip_destroy_closure(target));
  },
  "+destroy:1:0": 1
},

"+_Tooltip": [],

_Tooltip_show_closure: {"": "Closure;target_0-,content_1-",
  call$0: function() {
    var t1, t2, data;
    Q._enterScopeIfNeeded();
    t1 = Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.target_0);
    t2 = H.fillLiteralMap(["title", this.content_1, "trigger", "manual", "placement", "bottom", "html", true, "container", "body"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    Q._enterScopeIfNeeded();
    data = J.data$1$x(t1.tooltip$1(Q._deserialize($._jsPortConvert.callSync$1(Q.Proxy__serializeDataTree(t2)))), "tooltip");
    data.tip$0().addClass$1("xref");
    J.show$0$x(data);
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Tooltip_show_closure": [],

_Tooltip_destroy_closure: {"": "Closure;target_0-",
  call$0: function() {
    Q._enterScopeIfNeeded();
    Q._deserialize($._jsPortSync.callSync$1([])).jQuery$1(this.target_0).tooltip$1("destroy");
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+_Tooltip_destroy_closure": []}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$_processWorkerMessage(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$_throwFormatException(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$toStringWrapper(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$invokeClosure(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$isAssignable(H.isAssignable, "isAssignable$closure");
init.globalFunctions.typeNameInChrome$closure = H.typeNameInChrome$closure = new H.Closure$typeNameInChrome(H.typeNameInChrome, "typeNameInChrome$closure");
init.globalFunctions.typeNameInSafari$closure = H.typeNameInSafari$closure = new H.Closure$typeNameInSafari(H.typeNameInSafari, "typeNameInSafari$closure");
init.globalFunctions.typeNameInOpera$closure = H.typeNameInOpera$closure = new H.Closure$typeNameInOpera(H.typeNameInOpera, "typeNameInOpera$closure");
init.globalFunctions.typeNameInFirefox$closure = H.typeNameInFirefox$closure = new H.Closure$typeNameInFirefox(H.typeNameInFirefox, "typeNameInFirefox$closure");
init.globalFunctions.typeNameInIE$closure = H.typeNameInIE$closure = new H.Closure$typeNameInIE(H.typeNameInIE, "typeNameInIE$closure");
init.globalFunctions.constructorNameFallback$closure = H.constructorNameFallback$closure = new H.Closure$constructorNameFallback(H.constructorNameFallback, "constructorNameFallback$closure");
init.globalFunctions.callDartFunctionWith1Arg$closure = H.callDartFunctionWith1Arg$closure = new H.Closure$callDartFunctionWith1Arg(H.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
init.globalFunctions._matchString$closure = H._matchString$closure = new H.Closure$_matchString(H._matchString, "_matchString$closure");
init.globalFunctions._stringIdentity$closure = H._stringIdentity$closure = new H.Closure$_stringIdentity(H._stringIdentity, "_stringIdentity$closure");
init.globalFunctions.main0$closure = Y.main0$closure = new Y.Closure$main(Y.main0, "main0$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new P.Closure$_asyncRunCallback(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new P.Closure$_nullDataHandler(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$_nullErrorHandler(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new P.Closure$_nullDoneHandler(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._rootHandleUncaughtError$closure = P._rootHandleUncaughtError$closure = new P.Closure$_rootHandleUncaughtError(P._rootHandleUncaughtError, "_rootHandleUncaughtError$closure");
init.globalFunctions._rootRun$closure = P._rootRun$closure = new P.Closure$_rootRun(P._rootRun, "_rootRun$closure");
init.globalFunctions._rootRunUnary$closure = P._rootRunUnary$closure = new P.Closure$_rootRunUnary(P._rootRunUnary, "_rootRunUnary$closure");
init.globalFunctions._rootRegisterCallback$closure = P._rootRegisterCallback$closure = new P.Closure$_rootRegisterCallback(P._rootRegisterCallback, "_rootRegisterCallback$closure");
init.globalFunctions._rootRegisterUnaryCallback$closure = P._rootRegisterUnaryCallback$closure = new P.Closure$_rootRegisterUnaryCallback(P._rootRegisterUnaryCallback, "_rootRegisterUnaryCallback$closure");
init.globalFunctions._rootScheduleMicrotask$closure = P._rootScheduleMicrotask$closure = new P.Closure$_rootScheduleMicrotask(P._rootScheduleMicrotask, "_rootScheduleMicrotask$closure");
init.globalFunctions._rootCreateTimer$closure = P._rootCreateTimer$closure = new P.Closure$_rootCreateTimer(P._rootCreateTimer, "_rootCreateTimer$closure");
init.globalFunctions._rootCreatePeriodicTimer$closure = P._rootCreatePeriodicTimer$closure = new P.Closure$_rootCreatePeriodicTimer(P._rootCreatePeriodicTimer, "_rootCreatePeriodicTimer$closure");
init.globalFunctions._rootFork$closure = P._rootFork$closure = new P.Closure$_rootFork(P._rootFork, "_rootFork$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new P.Closure$_defaultEquals(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new P.Closure$_defaultHashCode(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new P.Closure$compare(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new P.Closure$identical(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new P.Closure$identityHashCode(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$_standardAttributeValidator(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$_uriAttributeValidator(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions.max$closure = P.max$closure = new P.Closure$max(P.max, "max$closure");
init.globalFunctions.displayPhase$closure = U.displayPhase$closure = new U.Closure$displayPhase(U.displayPhase, "displayPhase$closure");
init.globalFunctions.loadData$closure = U.loadData$closure = new U.Closure$loadData(U.loadData, "loadData$closure");
init.globalFunctions.loadUrl$closure = U.loadUrl$closure = new U.Closure$loadUrl(U.loadUrl, "loadUrl$closure");
init.globalFunctions.Proxy__serializeDataTree$closure = Q.Proxy__serializeDataTree$closure = new Q.Closure$_serializeDataTree(Q.Proxy__serializeDataTree, "Proxy__serializeDataTree$closure");
init.globalFunctions._serialize$closure = Q._serialize$closure = new Q.Closure$_serialize(Q._serialize, "_serialize$closure");
init.globalFunctions._deserialize$closure = Q._deserialize$closure = new Q.Closure$_deserialize(Q._deserialize, "_deserialize$closure");
init.globalFunctions._updateCurrentFilter$closure = G._updateCurrentFilter$closure = new G.Closure$_updateCurrentFilter(G._updateCurrentFilter, "_updateCurrentFilter$closure");
init.globalFunctions.stop$closure = R.stop$closure = new R.Closure$stop(R.stop, "stop$closure");
init.globalFunctions._doNothing$closure = T._doNothing$closure = new T.Closure$_doNothing(T._doNothing, "_doNothing$closure");
init.globalFunctions.defaultObserveUnhandledError$closure = T.defaultObserveUnhandledError$closure = new T.Closure$defaultObserveUnhandledError(T.defaultObserveUnhandledError, "defaultObserveUnhandledError$closure");
// Runtime type support
W.Node.$isNode = true;
W.Node.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.File.$isObject = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
N.Level.$isComparable = true;
N.Level.$asComparable = [N.Level];
N.Level.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
P._SplayTreeNode.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.Object.$isObject = true;
Q.Proxy.$isObject = true;
Q.FunctionProxy.$isObject = true;
P.Match.$isMatch = true;
P.Match.$isObject = true;
D.Edge.$isObject = true;
D.Node0.$isObject = true;
D.Rank.$isObject = true;
J.JSArray.$isObject = true;
Y._Watcher.$isObject = true;
N.Logger.$isObject = true;
L.LinkedListNode.$isLinkedListNode = true;
L.LinkedListNode.$isObject = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
W.ReceivePortSync.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
D.CollapsedEdges.$isObject = true;
D.NodeCluster.$isObject = true;
D.Point.$isPoint = true;
D.Point.$isObject = true;
W.ProgressEvent.$isEvent = true;
W.ProgressEvent.$isObject = true;
U._Range.$isObject = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
W.HttpRequest.$isObject = true;
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P.Zone.$isZone = true;
P.Zone.$isObject = true;
P.ZoneDelegate.$isZoneDelegate = true;
P.ZoneDelegate.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.ZoneSpecification.$isZoneSpecification = true;
P.ZoneSpecification.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
U.IRPaneLine.$isIRPaneLine = true;
U.IRPaneLine.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
T.Observable.$isObservable = true;
T.Observable.$isObject = true;
F.WebComponent.$isWebComponent = true;
F.WebComponent.$isElement = true;
F.WebComponent.$isNode = true;
F.WebComponent.$isObject = true;
D.Insets.$isInsets = true;
D.Insets.$isObject = true;
D.Rectangle.$isRectangle = true;
D.Rectangle.$isObject = true;
K.Block.$isBlock = true;
K.Block.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C_CloseToken = new H.CloseToken();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_JsonCodec = new P.JsonCodec();
C.C_UnknownJavaScriptObject = new J.UnknownJavaScriptObject();
C.C__DelayedDone = new P._DelayedDone();
C.C__Popover = new R._Popover();
C.C__Random = new P._Random();
C.C__Tooltip = new R._Tooltip();
C.C__Undefined = new Q._Undefined();
C.Duration_0 = new P.Duration(0);
C.Duration_10000 = new P.Duration(10000);
C.Duration_200000 = new P.Duration(200000);
C.Duration_500000 = new P.Duration(500000);
C.EventStreamProvider_change = new W.EventStreamProvider("change");
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_hashchange = new W.EventStreamProvider("hashchange");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_mouseout = new W.EventStreamProvider("mouseout");
C.EventStreamProvider_mouseover = new W.EventStreamProvider("mouseover");
C.EventStreamProvider_progress = new W.EventStreamProvider("progress");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.EventStreamProvider_scroll = new W.EventStreamProvider("scroll");
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_09I = Isolate.makeConstantList(["inline asm", "separate asm", "no asm"]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_K9X = H.setRuntimeTypeInfo(Isolate.makeConstantList(["demo-1"]), [J.JSString]);
C.List_RlL = Isolate.makeConstantList(["1.v8.hydrogen.cfg", "1.v8.code.asm"]);
C.List_empty = Isolate.makeConstantList([]);
C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [J.JSString]);
C.List_http_https_ftp_mailto = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.Map_K93ad = H.setRuntimeTypeInfo(new H.ConstantStringMap(1, {"demo-1": C.List_RlL}, C.List_K9X), [null, null]);
C.Map_empty = H.setRuntimeTypeInfo(new H.ConstantStringMap(0, {}, C.List_empty0), [null, null]);
C.Map_empty0 = H.setRuntimeTypeInfo(new H.ConstantStringMap(0, {}, C.List_empty0), [P.Symbol, null]);
C.NodeList_methods = W.NodeList0.prototype;
C.ScrollAlignment_BOTTOM0 = new W.ScrollAlignment("BOTTOM");
C.ScrollAlignment_CENTER0 = new W.ScrollAlignment("CENTER");
C.ScrollAlignment_TOP0 = new W.ScrollAlignment("TOP");
C.Symbol_call = new H.Symbol0("call");
C.Utf8Codec_false = new P.Utf8Codec(false);
C.Window_methods = W.Window.prototype;
C._ZoneSpecification_eDx = new P._ZoneSpecification(P._rootHandleUncaughtError$closure, P._rootRun$closure, P._rootRunUnary$closure, P._rootRegisterCallback$closure, P._rootRegisterUnaryCallback$closure, P._rootScheduleMicrotask$closure, P._rootCreateTimer$closure, P._rootCreatePeriodicTimer$closure, P._rootFork$closure);
C._CustomizedZone_WYN = new P._CustomizedZone(null, C._ZoneSpecification_eDx, C.Map_empty0);
C._WatcherType_HASH_MAP = new Y._WatcherType("HASH_MAP");
C._WatcherType_LIST = new Y._WatcherType("LIST");
C._WatcherType_ORDERED_MAP = new Y._WatcherType("ORDERED_MAP");
C._WatcherType_OTHER = new Y._WatcherType("OTHER");
C._ZoneSpecification_eLJ = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.interceptorsByTag = null;
$.leafTags = null;
$.interceptorToTag = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C._CustomizedZone_WYN;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$.HorizontalPlacement_step = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.currentFiles = null;
$.currentMode = null;
$.currentPhase = null;
$._jsPortSync = null;
$._jsPortCreate = null;
$._jsPortProxyCount = null;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortHasProperty = null;
$._jsPortDeleteProperty = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$._jsExitJavaScriptScope = null;
$._jsGlobalize = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$._localNextElementId = 0;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.Logger__loggers = null;
$.LogRecord__nextNumber = 0;
$.currentMethods = null;
$._methodsList = null;
$._filterInput = null;
$._currentFilter = null;
$._sortByDropDown = null;
$._sortCriteria = null;
$._spinner = null;
$.useObservers = false;
$.verboseDebugMessages = false;
$._watchers = null;
$._Watcher__nextId = 0;
$.useShadowDom = false;
$._activeObserver = null;
$._changedExpressions = null;
$._ExpressionObserver__nextId = 0;
$.onObserveUnhandledError = T.defaultObserveUnhandledError$closure;
J.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
J.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return J.getInterceptor$n(receiver).$or(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$shr$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shr(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._initCustomEvent$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver)._initCustomEvent$4(receiver, a0, a1, a2, a3);
};
J._removeChild$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._removeChild$1(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.add$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).add$2(receiver, a0, a1);
};
J.add$3$klass$ax = function(receiver, a0, a1, a2) {
  return J.getInterceptor$ax(receiver).add$3$klass(receiver, a0, a1, a2);
};
J.add$4$id$klass$ax = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$ax(receiver).add$4$id$klass(receiver, a0, a1, a2, a3);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.appendHtml$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).appendHtml$1(receiver, a0);
};
J.appendText$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).appendText$1(receiver, a0);
};
J.bind$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bind$3(receiver, a0, a1, a2);
};
J.ceil$0$nx = function(receiver) {
  return J.getInterceptor$nx(receiver).ceil$0(receiver);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.click$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).click$0(receiver);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.clone$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clone$1(receiver, a0);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.createShadowRoot$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createShadowRoot$0(receiver);
};
J.data$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).data$1(receiver, a0);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_namespaceUri$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_namespaceUri(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$bottomRight$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bottomRight(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$client$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$client(receiver);
};
J.get$clientHeight$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$clientHeight(receiver);
};
J.get$code$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$code(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$detail$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$detail(receiver);
};
J.get$document$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$document(receiver);
};
J.get$files$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$files(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$firstChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$firstChild(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$href$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$href(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$innerHtml$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$innerHtml(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$label$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$label(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$left$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$left(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$list$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$list(receiver);
};
J.get$method$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$method(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$newValue$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$newValue(receiver);
};
J.get$nextNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextNode(receiver);
};
J.get$nodeType$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodeType(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$onChange$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onChange(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$onKeyUp$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onKeyUp(receiver);
};
J.get$onMouseOut$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onMouseOut(receiver);
};
J.get$onMouseOver$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onMouseOver(receiver);
};
J.get$onResize$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onResize(receiver);
};
J.get$onScroll$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onScroll(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$parentNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parentNode(receiver);
};
J.get$points$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$points(receiver);
};
J.get$previousNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$previousNode(receiver);
};
J.get$remove$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$remove(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$right$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$right(receiver);
};
J.get$scrollLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$scrollLeft(receiver);
};
J.get$scrollTop$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$scrollTop(receiver);
};
J.get$source$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$source(receiver);
};
J.get$start$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$start(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$top$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$top(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$total$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$total(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$window$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$window(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$xtag$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$xtag(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getNamespacedAttributes$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getNamespacedAttributes$1(receiver, a0);
};
J.getPropertyValue$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
J.getRange$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
};
J.height$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).height$0(receiver);
};
J.href$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).href$1(receiver, a0);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.insert$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).insert$0(receiver);
};
J.insertAllBefore$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAllBefore$2(receiver, a0, a1);
};
J.insertBefore$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
J.intersects$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).intersects$1(receiver, a0);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.matches$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matches$1(receiver, a0);
};
J.matchesWithAncestors$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matchesWithAncestors$1(receiver, a0);
};
J.offset$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).offset$0(receiver);
};
J.query$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).query$1(receiver, a0);
};
J.queryAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceAllMapped$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAllMapped$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.reset$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).reset$0(receiver);
};
J.scrollIntoView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).scrollIntoView$0(receiver);
};
J.scrollIntoView$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).scrollIntoView$1(receiver, a0);
};
J.scrollTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).scrollTo$2(receiver, a0, a1);
};
J.send$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
J.set$attributes$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$attributes(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$code$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$code(receiver, value);
};
J.set$cssText$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cssText(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$index$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$index(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$maxWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$maxWidth(receiver, value);
};
J.set$right$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$right(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$xtag$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$xtag(receiver, value);
};
J.setProperty$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
J.show$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).show$0(receiver);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.stop$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stop$0(receiver);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$nx = function(receiver) {
  return J.getInterceptor$nx(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toStringAsFixed$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.mapTypeToInterceptor = [];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return H.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new P.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:([^:/?#]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", false, true, false), null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "mdvPackage", "TemplateElement_mdvPackage", "get$TemplateElement_mdvPackage", function() {
  return new W.closure2();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "wordRe", "wordRe", "get$wordRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^[-\\w]+", false, true, false), null, null);
});
Isolate.$lazy($, "BREWER_PALETTE", "BREWER_PALETTE", "get$BREWER_PALETTE", function() {
  return ["#FCBBA1", "#FC9272", "#FB6A4A", "#EF3B2C", "#CB181D", "#A50F15", "#67000D"];
});
Isolate.$lazy($, "MODES", "MODES", "get$MODES", function() {
  return [new V.Mode(null, null, null, null, null, 0), new D.Mode0(false, false, null, null, null, null, null, null, null, 0)];
});
Isolate.$lazy($, "openCompilation", "openCompilation", "get$openCompilation", function() {
  return U.connectToFileInput("compilation", new U.closure0());
});
Isolate.$lazy($, "openProfile", "openProfile", "get$openProfile", function() {
  return U.connectToFileInput("llprof", new U.closure1());
});
Isolate.$lazy($, "_proxiedObjectTable", "_proxiedObjectTable", "get$_proxiedObjectTable", function() {
  return Q._ProxiedObjectTable$();
});
Isolate.$lazy($, "uriNameRe", "uriNameRe", "get$uriNameRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^file://.*/([^/]+)$", false, true, false), null, null);
});
Isolate.$lazy($, "demangleRe", "demangleRe", "get$demangleRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("@0x[0-9a-f]+\\.?$", false, true, false), null, null);
});
Isolate.$lazy($, "fileNameRe", "fileNameRe", "get$fileNameRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([-\\w]+\\.dart)_(.*)$", false, true, false), null, null);
});
Isolate.$lazy($, "dartSchemeRe", "dartSchemeRe", "get$dartSchemeRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(dart:_?[-a-zA-Z0-9]+)_(.*)$", false, true, false), null, null);
});
Isolate.$lazy($, "accessorRe", "accessorRe", "get$accessorRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("([gs]et)_(_?)([a-z0-9]+|[A-Z0-9_]+)$", false, true, false), null, null);
});
Isolate.$lazy($, "nullTreeSanitizer", "nullTreeSanitizer", "get$nullTreeSanitizer", function() {
  return new V._NullTreeSanitizer();
});
Isolate.$lazy($, "lirIdMarker", "lirIdMarker", "get$lirIdMarker", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("<@(\\d+),#\\d+>", false, true, false), null, null);
});
Isolate.$lazy($, "hirLineRe", "hirLineRe", "get$hirLineRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\s+\\d+\\s+\\d+\\s+([A-Za-z]\\d+)\\s+([-\\w]+)\\s*(.*)<", false, true, false), null, null);
});
Isolate.$lazy($, "lirLineRe", "lirLineRe", "get$lirLineRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\s+(\\d+)\\s+([-\\w]+)\\s*(.*)<", false, true, false), null, null);
});
Isolate.$lazy($, "lirLineIgnoredMovesRe", "lirLineIgnoredMovesRe", "get$lirLineIgnoredMovesRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\(0\\) = \\[[^\\]]+\\];", false, true, false), null, null);
});
Isolate.$lazy($, "lirLineRedundantMovesRe", "lirLineRedundantMovesRe", "get$lirLineRedundantMovesRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("([^ ])\\[[^\\]]+\\];", false, true, false), null, null);
});
Isolate.$lazy($, "readCurrentStackTrace", "readCurrentStackTrace", "get$readCurrentStackTrace", function() {
  return new Y.closure();
});
Isolate.$lazy($, "_logger", "_logger", "get$_logger", function() {
  return N.Logger_Logger("watcher");
});
Isolate.$lazy($, "webUIRoot", "webUIRoot", "get$webUIRoot", function() {
  return document.body;
});
Isolate.$lazy($, "__shadowTemplate", "IRPane___shadowTemplate", "get$IRPane___shadowTemplate", function() {
  var t1 = $.get$nullTreeSanitizer();
  return J.createFragment$3$treeSanitizer$validator$x(document.body, "      \n      <div style=\"display: inline-block; position: relative;\">\n        <table class=\"irpane\"></table>\n      </div>\n    ", t1, null);
});
Isolate.$lazy($, "__html1", "Tabs___html1", "get$Tabs___html1", function() {
  return W.Element_Element$html("<li class=\"\">\n              <a></a>\n            </li>", $.get$nullTreeSanitizer(), null);
});
Isolate.$lazy($, "__shadowTemplate", "Tabs___shadowTemplate", "get$Tabs___shadowTemplate", function() {
  var t1 = $.get$nullTreeSanitizer();
  return J.createFragment$3$treeSanitizer$validator$x(document.body, "      <div>\n        <ul class=\"nav nav-tabs\">\n          <template></template>\n          <content select=\".after-tabs\"></content>\n        </ul>\n      </div>\n      <content></content>\n    ", t1, null);
});
Isolate.$lazy($, "__shadowTemplate", "V8IRDescriptions___shadowTemplate", "get$V8IRDescriptions___shadowTemplate", function() {
  var t1 = $.get$nullTreeSanitizer();
  return J.createFragment$3$treeSanitizer$validator$x(document.body, "      \n      <div data-hir=\"CheckMaps\" data-lir=\"check-maps\">\n        <p>Checks whether value's hidden class matches expected value and deoptimizes if this is not the case.</p>\n        <p>Deoptimization at <code>CheckMaps</code> usually indicates that the code is polymorphic.</p>\n      </div>\n      <div data-hir=\"SoftDeoptimize\" data-lir=\"deoptimize\">\n        <p>When executed this instruction always deoptimizes.</p>\n        <p>V8 generates then on control flow paths that were never executed before and thus contain no actionable type feedback that could be used to optimize the code.</p>\n        <p>For a function with a long running loop it is not uncommon to hit at OSR in the loop and then deoptimize on a <code>SoftDeoptimize</code> emitted after the loop</p>\n      </div>\n      <div data-hir=\"Change\">\n        <p>This instruction converts value from one internal representation to another.</p>\n        <p>It will deoptimize if the value can't be converted</p>\n      </div>\n      <div data-lir=\"tagged-to-i\">\n        <p>Conversion from a tagged representation to a 32-bit signed integer. Can be either truncating or exact (see if hydrogen counterpart is marked with <code>truncating-int32</code>.</p>\n        <p>Deoptimizes when source is not representable in this format. Truncating conversions deoptimize when value is too big for an int32 type or not a number or <code>undefined</code>. Exact conversions deoptimize if <code>ToInt32(val) != val</code></p>\n      </div>\n      <div data-lir=\"check-smi\">\n        <p>Checks that value is a tagged smi (<b>sm</b>all <b>i</b>nteger): it is a tagged integer representation used by V8.</p>\n        <p>On 32bit platforms smi can contain 31-bit signed integers and on 64bit platforms they are wide enough for 32bit signed integers.</p>\n        <p>If numeric value does not fit into a smi it has to be boxed as a <em>heap number</em>.</p>\n      </div>\n    ", t1, null);
});
// Native classes
H.defineNativeMethods("DOMImplementation|Navigator|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString", J.Interceptor);

H.defineNativeMethods("HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableSectionElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement", W.HtmlElement);

H.defineNativeMethodsNonleaf("HTMLElement", W.HtmlElement);

H.defineNativeMethods("HTMLAnchorElement", W.AnchorElement);

H.defineNativeMethods("HTMLAreaElement", W.AreaElement);

H.defineNativeMethods("HTMLBaseElement", W.BaseElement);

H.defineNativeMethodsNonleaf("Blob", W.Blob);

H.defineNativeMethods("HTMLBodyElement", W.BodyElement);

H.defineNativeMethods("HTMLButtonElement", W.ButtonElement);

H.defineNativeMethods("HTMLCanvasElement", W.CanvasElement);

H.defineNativeMethods("Comment", W.CharacterData);

H.defineNativeMethodsNonleaf("CharacterData", W.CharacterData);

H.defineNativeMethods("CloseEvent", W.CloseEvent);

H.defineNativeMethods("CompositionEvent", W.CompositionEvent);

H.defineNativeMethods("CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties", W.CssStyleDeclaration);

H.defineNativeMethods("CustomEvent", W.CustomEvent);

H.defineNativeMethods("HTMLDialogElement", W.DialogElement);

H.defineNativeMethods("Document|HTMLDocument|SVGDocument", W.Document);

H.defineNativeMethodsNonleaf("DocumentFragment", W.DocumentFragment);

H.defineNativeMethodsNonleaf("DOMError", W.DomError);

H.defineNativeMethods("DOMException", W.DomException);

H.defineNativeMethodsNonleaf("Element", W.Element);

H.defineNativeMethods("HTMLEmbedElement", W.EmbedElement);

H.defineNativeMethods("AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent", W.Event);

H.defineNativeMethodsNonleaf("Event", W.Event);

H.defineNativeMethods("FileReader", W.EventTarget);

H.defineNativeMethodsNonleaf("EventTarget", W.EventTarget);

H.defineNativeMethods("HTMLFieldSetElement", W.FieldSetElement);

H.defineNativeMethods("File", W.File);

H.defineNativeMethods("FileError", W.FileError);

H.defineNativeMethods("FileList", W.FileList);

H.defineNativeMethods("HTMLFormElement", W.FormElement);

H.defineNativeMethods("HashChangeEvent", W.HashChangeEvent);

H.defineNativeMethods("HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection", W.HtmlCollection);

H.defineNativeMethods("XMLHttpRequest", W.HttpRequest);

H.defineNativeMethods("HTMLIFrameElement", W.IFrameElement);

H.defineNativeMethods("HTMLImageElement", W.ImageElement);

H.defineNativeMethods("HTMLInputElement", W.InputElement);

H.defineNativeMethods("KeyboardEvent", W.KeyboardEvent);

H.defineNativeMethods("HTMLKeygenElement", W.KeygenElement);

H.defineNativeMethods("HTMLLIElement", W.LIElement);

H.defineNativeMethods("HTMLLinkElement", W.LinkElement);

H.defineNativeMethods("Location", W.Location);

H.defineNativeMethods("HTMLMapElement", W.MapElement);

H.defineNativeMethods("HTMLAudioElement", W.MediaElement);

H.defineNativeMethodsNonleaf("HTMLMediaElement", W.MediaElement);

H.defineNativeMethods("MediaError", W.MediaError);

H.defineNativeMethods("MediaKeyError", W.MediaKeyError);

H.defineNativeMethods("MediaStream", W.MediaStream);

H.defineNativeMethods("MessageEvent", W.MessageEvent);

H.defineNativeMethods("HTMLMetaElement", W.MetaElement);

H.defineNativeMethods("HTMLMeterElement", W.MeterElement);

H.defineNativeMethods("MIDIConnectionEvent", W.MidiConnectionEvent);

H.defineNativeMethods("MIDIMessageEvent", W.MidiMessageEvent);

H.defineNativeMethods("MIDIOutput", W.MidiOutput);

H.defineNativeMethods("MIDIInput", W.MidiPort);

H.defineNativeMethodsNonleaf("MIDIPort", W.MidiPort);

H.defineNativeMethods("DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent", W.MouseEvent);

H.defineNativeMethods("MutationEvent", W.MutationEvent);

H.defineNativeMethods("NavigatorUserMediaError", W.NavigatorUserMediaError);

H.defineNativeMethods("DocumentType|Entity|Notation", W.Node);

H.defineNativeMethodsNonleaf("Node", W.Node);

H.defineNativeMethods("NodeList|RadioNodeList", W.NodeList0);

H.defineNativeMethods("HTMLOListElement", W.OListElement);

H.defineNativeMethods("HTMLObjectElement", W.ObjectElement);

H.defineNativeMethods("HTMLOptGroupElement", W.OptGroupElement);

H.defineNativeMethods("HTMLOptionElement", W.OptionElement);

H.defineNativeMethods("HTMLOutputElement", W.OutputElement);

H.defineNativeMethods("HTMLParamElement", W.ParamElement);

H.defineNativeMethods("PositionError", W.PositionError);

H.defineNativeMethods("ProcessingInstruction", W.ProcessingInstruction);

H.defineNativeMethods("HTMLProgressElement", W.ProgressElement);

H.defineNativeMethods("ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent", W.ProgressEvent);

H.defineNativeMethods("Range", W.Range0);

H.defineNativeMethods("HTMLScriptElement", W.ScriptElement);

H.defineNativeMethods("HTMLSelectElement", W.SelectElement);

H.defineNativeMethods("ShadowRoot", W.ShadowRoot);

H.defineNativeMethods("HTMLSourceElement", W.SourceElement);

H.defineNativeMethods("SpeechSynthesisEvent", W.SpeechSynthesisEvent);

H.defineNativeMethods("StorageEvent", W.StorageEvent);

H.defineNativeMethods("HTMLStyleElement", W.StyleElement);

H.defineNativeMethods("HTMLTableRowElement", W.TableRowElement);

H.defineNativeMethods("HTMLTemplateElement", W.TemplateElement);

H.defineNativeMethods("CDATASection|Text", W.Text);

H.defineNativeMethods("HTMLTextAreaElement", W.TextAreaElement);

H.defineNativeMethods("TextEvent", W.TextEvent);

H.defineNativeMethods("HTMLTrackElement", W.TrackElement);

H.defineNativeMethods("FocusEvent|SVGZoomEvent|TouchEvent", W.UIEvent);

H.defineNativeMethodsNonleaf("UIEvent", W.UIEvent);

H.defineNativeMethods("HTMLVideoElement", W.VideoElement);

H.defineNativeMethods("DOMWindow|Window", W.Window);

H.defineNativeMethodsNonleaf("XMLHttpRequestEventTarget", W.XmlHttpRequestEventTarget);

H.defineNativeMethods("Attr", W._Attr);

H.defineNativeMethods("ClientRect", W._ClientRect);

H.defineNativeMethods("MozNamedAttrMap|NamedNodeMap", W._NamedNodeMap);

H.defineNativeMethods("SVGAElement", P.AElement);

H.defineNativeMethods("SVGAltGlyphElement", P.AltGlyphElement);

H.defineNativeMethods("SVGFEBlendElement", P.FEBlendElement);

H.defineNativeMethods("SVGFEColorMatrixElement", P.FEColorMatrixElement);

H.defineNativeMethods("SVGFEComponentTransferElement", P.FEComponentTransferElement);

H.defineNativeMethods("SVGFECompositeElement", P.FECompositeElement);

H.defineNativeMethods("SVGFEConvolveMatrixElement", P.FEConvolveMatrixElement);

H.defineNativeMethods("SVGFEDiffuseLightingElement", P.FEDiffuseLightingElement);

H.defineNativeMethods("SVGFEDisplacementMapElement", P.FEDisplacementMapElement);

H.defineNativeMethods("SVGFEFloodElement", P.FEFloodElement);

H.defineNativeMethods("SVGFEGaussianBlurElement", P.FEGaussianBlurElement);

H.defineNativeMethods("SVGFEImageElement", P.FEImageElement);

H.defineNativeMethods("SVGFEMergeElement", P.FEMergeElement);

H.defineNativeMethods("SVGFEMorphologyElement", P.FEMorphologyElement);

H.defineNativeMethods("SVGFEOffsetElement", P.FEOffsetElement);

H.defineNativeMethods("SVGFEPointLightElement", P.FEPointLightElement);

H.defineNativeMethods("SVGFESpecularLightingElement", P.FESpecularLightingElement);

H.defineNativeMethods("SVGFESpotLightElement", P.FESpotLightElement);

H.defineNativeMethods("SVGFETileElement", P.FETileElement);

H.defineNativeMethods("SVGFETurbulenceElement", P.FETurbulenceElement);

H.defineNativeMethods("SVGFilterElement", P.FilterElement);

H.defineNativeMethods("SVGForeignObjectElement", P.ForeignObjectElement);

H.defineNativeMethods("SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGSwitchElement", P.GraphicsElement);

H.defineNativeMethodsNonleaf("SVGGraphicsElement", P.GraphicsElement);

H.defineNativeMethods("SVGImageElement", P.ImageElement0);

H.defineNativeMethods("SVGMaskElement", P.MaskElement);

H.defineNativeMethods("SVGPatternElement", P.PatternElement);

H.defineNativeMethods("SVGPointList", P.PointList0);

H.defineNativeMethods("SVGPolygonElement", P.PolygonElement);

H.defineNativeMethods("SVGPolylineElement", P.PolylineElement);

H.defineNativeMethods("SVGRectElement", P.RectElement);

H.defineNativeMethods("SVGScriptElement", P.ScriptElement0);

H.defineNativeMethods("SVGStyleElement", P.StyleElement0);

H.defineNativeMethods("SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement", P.SvgElement);

H.defineNativeMethodsNonleaf("SVGElement", P.SvgElement);

H.defineNativeMethods("SVGSVGElement", P.SvgSvgElement);

H.defineNativeMethodsNonleaf("SVGTextContentElement", P.TextContentElement);

H.defineNativeMethods("SVGTextPathElement", P.TextPathElement);

H.defineNativeMethods("SVGTRefElement|SVGTSpanElement|SVGTextElement", P.TextPositioningElement);

H.defineNativeMethodsNonleaf("SVGTextPositioningElement", P.TextPositioningElement);

H.defineNativeMethods("SVGUseElement", P.UseElement);

H.defineNativeMethods("SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement", P._GradientElement);

H.defineNativeMethods("SQLError", P.SqlError);

H.defineNativeMethods("ArrayBuffer", P.ByteBuffer);

H.defineNativeMethods("DataView", P.TypedData);

H.defineNativeMethodsExtended("ArrayBufferView", P.TypedData, [P.TypedData_ListMixin, P.TypedData_ListMixin_FixedLengthListMixin, P.TypedData_ListMixin0, P.TypedData_ListMixin_FixedLengthListMixin0, P.TypedData_ListMixin1, P.TypedData_ListMixin_FixedLengthListMixin1, P.TypedData_ListMixin2, P.TypedData_ListMixin_FixedLengthListMixin2, P.TypedData_ListMixin3, P.TypedData_ListMixin_FixedLengthListMixin3, P.TypedData_ListMixin4, P.TypedData_ListMixin_FixedLengthListMixin4, P.TypedData_ListMixin5, P.TypedData_ListMixin_FixedLengthListMixin5, P.TypedData_ListMixin6, P.TypedData_ListMixin_FixedLengthListMixin6, P.TypedData_ListMixin7, P.TypedData_ListMixin_FixedLengthListMixin7, P.Int64List, P.Uint64List]);

H.defineNativeMethods("Float32Array", P.Float32List);

H.defineNativeMethods("Float64Array", P.Float64List);

H.defineNativeMethods("Int16Array", P.Int16List);

H.defineNativeMethods("Int32Array", P.Int32List);

H.defineNativeMethods("Int8Array", P.Int8List);

H.defineNativeMethods("Uint16Array", P.Uint16List);

H.defineNativeMethods("Uint32Array", P.Uint32List);

H.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", P.Uint8ClampedList);

H.defineNativeMethodsNonleaf("Uint8Array", P.Uint8List);


init.functionAliases = {};
;
init.metadata = [,
false,
0,
true,
"white",
"black",
C.C__Popover,
J.JSBool,
P.Null,
J.JSObject,
"",
J.JSIndexable,
[J.JSArray, null],
J.JSMutableIndexable,
J.JSNumber,
J.JSDouble,
J.JSInt,
J.JSString,
P.IsolateSink,
H.IsolateContext,
P.SendPort,
P.ReceivePort,
H._MessageTraverserVisitedMap0,
P.Timer,
[P.Map, null, null],
P.Invocation,
P.NoSuchMethodError,
P.StackTrace,
P.Function,
P.CastError,
P.Type,
P.RegExp,
P.Match,
[P.Iterator, P.Match],
W.Element,
[P.Iterator, null],
P.Symbol,
P._BroadcastSubscriptionLink,
[P._EventDispatch, null],
[P._EventSink, null],
[P._StreamControllerLifecycle, null],
[P.StreamController, null],
[P.Completer, null],
[P.Future, null],
[P.StreamSubscription, null],
P._DelayedEvent,
P.ZoneSpecification,
P.ZoneDelegate,
P.Zone,
[P.HashMap, null, null],
[P.LinkedHashMap, null, null],
[P.LinkedHashSet, null],
[P.Set, null],
[P.Iterable, null],
[P.HashSet, null],
[P.ListMixin, null],
[P.Queue, null],
P.StreamTransformer,
P.Comparable,
[P.Comparable, P.Duration],
P.UnsupportedError,
P.Error,
P.Exception,
P.StringSink,
W.ElementList,
[P.Map, J.JSString, J.JSString],
[W.ElementStream, null],
W.NodeValidator,
P.SendPortSync,
W.WindowBase,
W.Location,
W.UriPolicy,
W.NodeTreeSanitizer,
P.Random,
[J.JSArray, J.JSInt],
H.JavaScriptIndexingBehavior,
W.CssClassSet,
[Q.Serializable, Q.Proxy],
C.C__Undefined,
[Q.Serializable, Q.FunctionProxy],
[P.Comparable, N.Level],
1,
W.CanvasImageSource,
W.ChildNode,
W.ParentNode,
[J.JSArray, W.File],
[J.JSArray, W.Node],
W.ButtonInputElement,
W.ResetButtonInputElement,
W.ImageButtonInputElement,
W.SubmitButtonInputElement,
W.FileUploadInputElement,
W.RadioButtonInputElement,
W.CheckboxInputElement,
W.RangeInputElement,
W.NumberInputElement,
W.LocalDateTimeInputElement,
W.TimeInputElement,
W.WeekInputElement,
W.MonthInputElement,
W.DateInputElement,
W.PasswordInputElement,
W.EmailInputElement,
W.TelephoneInputElement,
W.UrlInputElement,
W.TextInputElement,
W.SearchInputElement,
W.HiddenInputElement,
W.LocationBase,
W.WindowBase64,
W.WindowTimers,
W.Rect,
P.ExternalResourcesRequired,
P.UriReference,
P.FilterPrimitiveStandardAttributes,
P.Tests,
P.FitToViewBox,
P.ZoomAndPan,
[J.JSArray, J.JSDouble],
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(Y.main0$closure); });
  } else {
    H.startRootIsolate(Y.main0$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      prototype = inheritFrom(constructor, superConstructor);
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=hydra.html_bootstrap.dart.js.map
//@ sourceMappingURL=hydra.html_bootstrap.dart.js.map
